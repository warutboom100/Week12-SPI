
Week12-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000808c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08008230  08008230  00018230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b0  080086b0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b8  080086b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080086c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000088  08008748  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08008748  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000facf  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ce  00000000  00000000  0002fb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00032bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017732  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b28f  00000000  00000000  0004b182  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000944c3  00000000  00000000  00056411  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea8d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  000ea950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008214 	.word	0x08008214

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008214 	.word	0x08008214

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b972 	b.w	8000f68 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9e08      	ldr	r6, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	4688      	mov	r8, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d14b      	bne.n	8000d42 <__udivmoddi4+0xa6>
 8000caa:	428a      	cmp	r2, r1
 8000cac:	4615      	mov	r5, r2
 8000cae:	d967      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	b14a      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb6:	f1c2 0720 	rsb	r7, r2, #32
 8000cba:	fa01 f302 	lsl.w	r3, r1, r2
 8000cbe:	fa20 f707 	lsr.w	r7, r0, r7
 8000cc2:	4095      	lsls	r5, r2
 8000cc4:	ea47 0803 	orr.w	r8, r7, r3
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd4:	fa1f fc85 	uxth.w	ip, r5
 8000cd8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cdc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ce0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18eb      	adds	r3, r5, r3
 8000cea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cee:	f080 811b 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8118 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000cf8:	3f02      	subs	r7, #2
 8000cfa:	442b      	add	r3, r5
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d10:	45a4      	cmp	ip, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x290>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x290>
 8000d24:	3802      	subs	r0, #2
 8000d26:	442c      	add	r4, r5
 8000d28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	2700      	movs	r7, #0
 8000d32:	b11e      	cbz	r6, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xbe>
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	f000 80eb 	beq.w	8000f22 <__udivmoddi4+0x286>
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d52:	4638      	mov	r0, r7
 8000d54:	4639      	mov	r1, r7
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f783 	clz	r7, r3
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d147      	bne.n	8000df2 <__udivmoddi4+0x156>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd0>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80fa 	bhi.w	8000f60 <__udivmoddi4+0x2c4>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	4698      	mov	r8, r3
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000d7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xe8>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 808f 	bne.w	8000eac <__udivmoddi4+0x210>
 8000d8e:	1b49      	subs	r1, r1, r5
 8000d90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d94:	fa1f f885 	uxth.w	r8, r5
 8000d98:	2701      	movs	r7, #1
 8000d9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9e:	0c23      	lsrs	r3, r4, #16
 8000da0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x124>
 8000db0:	18eb      	adds	r3, r5, r3
 8000db2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x122>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	f200 80cd 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000dbe:	4684      	mov	ip, r0
 8000dc0:	1a59      	subs	r1, r3, r1
 8000dc2:	b2a3      	uxth	r3, r4
 8000dc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dd0:	fb08 f800 	mul.w	r8, r8, r0
 8000dd4:	45a0      	cmp	r8, r4
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0x14c>
 8000dd8:	192c      	adds	r4, r5, r4
 8000dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x14a>
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	f200 80b6 	bhi.w	8000f52 <__udivmoddi4+0x2b6>
 8000de6:	4618      	mov	r0, r3
 8000de8:	eba4 0408 	sub.w	r4, r4, r8
 8000dec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000df0:	e79f      	b.n	8000d32 <__udivmoddi4+0x96>
 8000df2:	f1c7 0c20 	rsb	ip, r7, #32
 8000df6:	40bb      	lsls	r3, r7
 8000df8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e00:	fa01 f407 	lsl.w	r4, r1, r7
 8000e04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e10:	4325      	orrs	r5, r4
 8000e12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e16:	0c2c      	lsrs	r4, r5, #16
 8000e18:	fb08 3319 	mls	r3, r8, r9, r3
 8000e1c:	fa1f fa8e 	uxth.w	sl, lr
 8000e20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e24:	fb09 f40a 	mul.w	r4, r9, sl
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e32:	d90b      	bls.n	8000e4c <__udivmoddi4+0x1b0>
 8000e34:	eb1e 0303 	adds.w	r3, lr, r3
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	f080 8087 	bcs.w	8000f4e <__udivmoddi4+0x2b2>
 8000e40:	429c      	cmp	r4, r3
 8000e42:	f240 8084 	bls.w	8000f4e <__udivmoddi4+0x2b2>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4473      	add	r3, lr
 8000e4c:	1b1b      	subs	r3, r3, r4
 8000e4e:	b2ad      	uxth	r5, r5
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3310 	mls	r3, r8, r0, r3
 8000e58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e60:	45a2      	cmp	sl, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1da>
 8000e64:	eb1e 0404 	adds.w	r4, lr, r4
 8000e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e6c:	d26b      	bcs.n	8000f46 <__udivmoddi4+0x2aa>
 8000e6e:	45a2      	cmp	sl, r4
 8000e70:	d969      	bls.n	8000f46 <__udivmoddi4+0x2aa>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4474      	add	r4, lr
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	eba4 040a 	sub.w	r4, r4, sl
 8000e82:	454c      	cmp	r4, r9
 8000e84:	46c2      	mov	sl, r8
 8000e86:	464b      	mov	r3, r9
 8000e88:	d354      	bcc.n	8000f34 <__udivmoddi4+0x298>
 8000e8a:	d051      	beq.n	8000f30 <__udivmoddi4+0x294>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d069      	beq.n	8000f64 <__udivmoddi4+0x2c8>
 8000e90:	ebb1 050a 	subs.w	r5, r1, sl
 8000e94:	eb64 0403 	sbc.w	r4, r4, r3
 8000e98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e9c:	40fd      	lsrs	r5, r7
 8000e9e:	40fc      	lsrs	r4, r7
 8000ea0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e747      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb4:	4095      	lsls	r5, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	fa21 f303 	lsr.w	r3, r1, r3
 8000ebe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ec2:	4338      	orrs	r0, r7
 8000ec4:	0c01      	lsrs	r1, r0, #16
 8000ec6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eca:	fa1f f885 	uxth.w	r8, r5
 8000ece:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ed2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed6:	fb07 f308 	mul.w	r3, r7, r8
 8000eda:	428b      	cmp	r3, r1
 8000edc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x256>
 8000ee2:	1869      	adds	r1, r5, r1
 8000ee4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee8:	d22f      	bcs.n	8000f4a <__udivmoddi4+0x2ae>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d92d      	bls.n	8000f4a <__udivmoddi4+0x2ae>
 8000eee:	3f02      	subs	r7, #2
 8000ef0:	4429      	add	r1, r5
 8000ef2:	1acb      	subs	r3, r1, r3
 8000ef4:	b281      	uxth	r1, r0
 8000ef6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb00 f308 	mul.w	r3, r0, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x27e>
 8000f0a:	1869      	adds	r1, r5, r1
 8000f0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f10:	d217      	bcs.n	8000f42 <__udivmoddi4+0x2a6>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d915      	bls.n	8000f42 <__udivmoddi4+0x2a6>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4429      	add	r1, r5
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f20:	e73b      	b.n	8000d9a <__udivmoddi4+0xfe>
 8000f22:	4637      	mov	r7, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e709      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f28:	4607      	mov	r7, r0
 8000f2a:	e6e7      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f30:	4541      	cmp	r1, r8
 8000f32:	d2ab      	bcs.n	8000e8c <__udivmoddi4+0x1f0>
 8000f34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f38:	eb69 020e 	sbc.w	r2, r9, lr
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	4613      	mov	r3, r2
 8000f40:	e7a4      	b.n	8000e8c <__udivmoddi4+0x1f0>
 8000f42:	4660      	mov	r0, ip
 8000f44:	e7e9      	b.n	8000f1a <__udivmoddi4+0x27e>
 8000f46:	4618      	mov	r0, r3
 8000f48:	e795      	b.n	8000e76 <__udivmoddi4+0x1da>
 8000f4a:	4667      	mov	r7, ip
 8000f4c:	e7d1      	b.n	8000ef2 <__udivmoddi4+0x256>
 8000f4e:	4681      	mov	r9, r0
 8000f50:	e77c      	b.n	8000e4c <__udivmoddi4+0x1b0>
 8000f52:	3802      	subs	r0, #2
 8000f54:	442c      	add	r4, r5
 8000f56:	e747      	b.n	8000de8 <__udivmoddi4+0x14c>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	442b      	add	r3, r5
 8000f5e:	e72f      	b.n	8000dc0 <__udivmoddi4+0x124>
 8000f60:	4638      	mov	r0, r7
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xda>
 8000f64:	4637      	mov	r7, r6
 8000f66:	e6e9      	b.n	8000d3c <__udivmoddi4+0xa0>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f001 fc7e 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 fd30 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 ff00 	bl	8001d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f84:	f000 fede 	bl	8001d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f88:	f000 feb2 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f8c:	f000 fd90 	bl	8001ab0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000f90:	f000 fe06 	bl	8001ba0 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000f94:	f000 fe3c 	bl	8001c10 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f98:	f000 fe86 	bl	8001ca8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f9c:	48b3      	ldr	r0, [pc, #716]	; (800126c <main+0x2fc>)
 8000f9e:	f004 f9e8 	bl	8005372 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000fa2:	48b3      	ldr	r0, [pc, #716]	; (8001270 <main+0x300>)
 8000fa4:	f004 fa09 	bl	80053ba <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	49b2      	ldr	r1, [pc, #712]	; (8001274 <main+0x304>)
 8000fac:	48b2      	ldr	r0, [pc, #712]	; (8001278 <main+0x308>)
 8000fae:	f001 fe59 	bl	8002c64 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	48b0      	ldr	r0, [pc, #704]	; (800127c <main+0x30c>)
 8000fba:	f003 f9db 	bl	8004374 <HAL_GPIO_WritePin>
	char temp[]="----Function_Gen----\r\n[1] Sawtooth_Wave..\r\n[2] Sine_Wave..\r\n[3] Square_Wave..\r\n" ;
 8000fbe:	4ab0      	ldr	r2, [pc, #704]	; (8001280 <main+0x310>)
 8000fc0:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2250      	movs	r2, #80	; 0x50
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 fcff 	bl	80069cc <memcpy>
	char temp1[]="...Sawtooh_Wave...\r\n[1] Frequency(hz)\r\n[2] V_high,V_low\r\n[3] Slope_up,Slope_down\r\n[x] Return menu\r\n";
 8000fce:	4aad      	ldr	r2, [pc, #692]	; (8001284 <main+0x314>)
 8000fd0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	2264      	movs	r2, #100	; 0x64
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fcf7 	bl	80069cc <memcpy>
	char temp2[]="...Sine_Wave...\r\n[1] Frequency(hz)\r\n[2] V_high,V_low\r\n[x] Return menu\r\n";
 8000fde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fe2:	4aa9      	ldr	r2, [pc, #676]	; (8001288 <main+0x318>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	2348      	movs	r3, #72	; 0x48
 8000fea:	461a      	mov	r2, r3
 8000fec:	f005 fcee 	bl	80069cc <memcpy>
	char temp3[]="...Square_Wave...\r\n[1] Frequency(hz)\r\n[2] V_high,V_low\r\n[3] Duty cycle\r\n[x] Return menu\r\n";
 8000ff0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ff4:	4aa5      	ldr	r2, [pc, #660]	; (800128c <main+0x31c>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	235a      	movs	r3, #90	; 0x5a
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f005 fce5 	bl	80069cc <memcpy>
	char temp4[]="...Set Hz value...\r\n[+] 0.1hz \r\n[-] 0.1hz\r\n[x] Back\r\n";
 8001002:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001006:	4aa2      	ldr	r2, [pc, #648]	; (8001290 <main+0x320>)
 8001008:	461c      	mov	r4, r3
 800100a:	4615      	mov	r5, r2
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101c:	6020      	str	r0, [r4, #0]
 800101e:	3404      	adds	r4, #4
 8001020:	8021      	strh	r1, [r4, #0]
	char temp5[]="...Set Volt_high,low Value...\r\n[a]V_high+0.1 \r\n[b]V_high-0.1 \r\n[c]V_low+0.1 \r\n[d]V_low-0.1 \r\n[x] Back\r\n";
 8001022:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001026:	4a9b      	ldr	r2, [pc, #620]	; (8001294 <main+0x324>)
 8001028:	4618      	mov	r0, r3
 800102a:	4611      	mov	r1, r2
 800102c:	2368      	movs	r3, #104	; 0x68
 800102e:	461a      	mov	r2, r3
 8001030:	f005 fccc 	bl	80069cc <memcpy>
	char temp6[]="...Set Duty Value...\r\n[+]Duty0.1 \r\n[-]Duty0.1\r\n[x] Back\r\n";
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4a97      	ldr	r2, [pc, #604]	; (8001298 <main+0x328>)
 800103a:	461c      	mov	r4, r3
 800103c:	4615      	mov	r5, r2
 800103e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800104e:	c403      	stmia	r4!, {r0, r1}
 8001050:	8022      	strh	r2, [r4, #0]
	char temp7[]="Try again\r\n";
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4a91      	ldr	r2, [pc, #580]	; (800129c <main+0x32c>)
 8001056:	ca07      	ldmia	r2, {r0, r1, r2}
 8001058:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800105c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f8bd 	bl	80001e0 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	b29a      	uxth	r2, r3
 800106a:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 800106e:	230a      	movs	r3, #10
 8001070:	488b      	ldr	r0, [pc, #556]	; (80012a0 <main+0x330>)
 8001072:	f004 fd96 	bl	8005ba2 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100){ //10khz
 8001076:	f001 f989 	bl	800238c <micros>
 800107a:	460a      	mov	r2, r1
 800107c:	4601      	mov	r1, r0
 800107e:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <main+0x334>)
 8001080:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001084:	460b      	mov	r3, r1
 8001086:	4614      	mov	r4, r2
 8001088:	1b5b      	subs	r3, r3, r5
 800108a:	eb64 0406 	sbc.w	r4, r4, r6
 800108e:	2c00      	cmp	r4, #0
 8001090:	bf08      	it	eq
 8001092:	2b65      	cmpeq	r3, #101	; 0x65
 8001094:	d31e      	bcc.n	80010d4 <main+0x164>
			timestamp = micros();
 8001096:	f001 f979 	bl	800238c <micros>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4a81      	ldr	r2, [pc, #516]	; (80012a4 <main+0x334>)
 80010a0:	e9c2 3400 	strd	r3, r4, [r2]
			//dataOut++; output update value all time
			//dataOut %= 4096; 12bits
			Gen_Wave();
 80010a4:	f000 ff10 	bl	8001ec8 <Gen_Wave>
			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET){
 80010a8:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <main+0x338>)
 80010aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10f      	bne.n	80010d4 <main+0x164>
 80010b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b8:	487c      	ldr	r0, [pc, #496]	; (80012ac <main+0x33c>)
 80010ba:	f003 f943 	bl	8004344 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <main+0x164>
				MCP4922SetOutput(DACConfig, dataOut);
 80010c4:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <main+0x340>)
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	4b7a      	ldr	r3, [pc, #488]	; (80012b4 <main+0x344>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f001 f8ac 	bl	800222c <MCP4922SetOutput>
			}
		}
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80010d4:	2220      	movs	r2, #32
 80010d6:	4978      	ldr	r1, [pc, #480]	; (80012b8 <main+0x348>)
 80010d8:	4871      	ldr	r0, [pc, #452]	; (80012a0 <main+0x330>)
 80010da:	f004 fdfb 	bl	8005cd4 <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 80010de:	f001 f903 	bl	80022e8 <UARTRecieveIT>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246

	switch(Mode){
 80010e8:	4b74      	ldr	r3, [pc, #464]	; (80012bc <main+0x34c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d8c1      	bhi.n	8001076 <main+0x106>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <main+0x188>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	0800182b 	.word	0x0800182b
 80010fc:	08001635 	.word	0x08001635
 8001100:	080014dd 	.word	0x080014dd
 8001104:	08001119 	.word	0x08001119
 8001108:	08001077 	.word	0x08001077
 800110c:	080011e5 	.word	0x080011e5
 8001110:	08001329 	.word	0x08001329
 8001114:	080013ef 	.word	0x080013ef
		case -1:
			switch(inputchar){
 8001118:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 800111c:	2b31      	cmp	r3, #49	; 0x31
 800111e:	d00a      	beq.n	8001136 <main+0x1c6>
 8001120:	2b31      	cmp	r3, #49	; 0x31
 8001122:	dc03      	bgt.n	800112c <main+0x1bc>
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d05a      	beq.n	80011e0 <main+0x270>
 800112a:	e040      	b.n	80011ae <main+0x23e>
 800112c:	2b32      	cmp	r3, #50	; 0x32
 800112e:	d016      	beq.n	800115e <main+0x1ee>
 8001130:	2b33      	cmp	r3, #51	; 0x33
 8001132:	d028      	beq.n	8001186 <main+0x216>
 8001134:	e03b      	b.n	80011ae <main+0x23e>
			case -1: //Main menu
				break;
			case 49:
				graph = 1;
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <main+0x350>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp1, strlen(temp1),10);
 800113c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f84d 	bl	80001e0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800114e:	230a      	movs	r3, #10
 8001150:	4853      	ldr	r0, [pc, #332]	; (80012a0 <main+0x330>)
 8001152:	f004 fd26 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = 1;
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <main+0x34c>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
				break;
 800115c:	e041      	b.n	80011e2 <main+0x272>
			case 50:
				graph = 2;
 800115e:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <main+0x350>)
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2),10);
 8001164:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f839 	bl	80001e0 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001176:	230a      	movs	r3, #10
 8001178:	4849      	ldr	r0, [pc, #292]	; (80012a0 <main+0x330>)
 800117a:	f004 fd12 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = 2;
 800117e:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <main+0x34c>)
 8001180:	2202      	movs	r2, #2
 8001182:	601a      	str	r2, [r3, #0]
				break;
 8001184:	e02d      	b.n	80011e2 <main+0x272>
			case 51:
				graph = 3;
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <main+0x350>)
 8001188:	2203      	movs	r2, #3
 800118a:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp3, strlen(temp3),10);
 800118c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f825 	bl	80001e0 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800119e:	230a      	movs	r3, #10
 80011a0:	483f      	ldr	r0, [pc, #252]	; (80012a0 <main+0x330>)
 80011a2:	f004 fcfe 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = 3;
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <main+0x34c>)
 80011a8:	2203      	movs	r2, #3
 80011aa:	601a      	str	r2, [r3, #0]
				break;
 80011ac:	e019      	b.n	80011e2 <main+0x272>
			default:
				HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f815 	bl	80001e0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	1d39      	adds	r1, r7, #4
 80011bc:	230a      	movs	r3, #10
 80011be:	4838      	ldr	r0, [pc, #224]	; (80012a0 <main+0x330>)
 80011c0:	f004 fcef 	bl	8005ba2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80011c4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f809 	bl	80001e0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 80011d6:	230a      	movs	r3, #10
 80011d8:	4831      	ldr	r0, [pc, #196]	; (80012a0 <main+0x330>)
 80011da:	f004 fce2 	bl	8005ba2 <HAL_UART_Transmit>
				break;
 80011de:	e000      	b.n	80011e2 <main+0x272>
				break;
 80011e0:	bf00      	nop
			}
			break;
 80011e2:	e3ea      	b.n	80019ba <main+0xa4a>
		case 1: //Sawtooth wave
			switch(inputchar){
 80011e4:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 80011e8:	2b32      	cmp	r3, #50	; 0x32
 80011ea:	d01f      	beq.n	800122c <main+0x2bc>
 80011ec:	2b32      	cmp	r3, #50	; 0x32
 80011ee:	dc06      	bgt.n	80011fe <main+0x28e>
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	f000 8096 	beq.w	8001324 <main+0x3b4>
 80011f8:	2b31      	cmp	r3, #49	; 0x31
 80011fa:	d005      	beq.n	8001208 <main+0x298>
 80011fc:	e079      	b.n	80012f2 <main+0x382>
 80011fe:	2b33      	cmp	r3, #51	; 0x33
 8001200:	d026      	beq.n	8001250 <main+0x2e0>
 8001202:	2b78      	cmp	r3, #120	; 0x78
 8001204:	d060      	beq.n	80012c8 <main+0x358>
 8001206:	e074      	b.n	80012f2 <main+0x382>
			case -1:
				break;
			case 49: //1,+-hz
				HAL_UART_Transmit(&huart2, (uint8_t*)temp4, strlen(temp4),10);
 8001208:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffe7 	bl	80001e0 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800121a:	230a      	movs	r3, #10
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <main+0x330>)
 800121e:	f004 fcc0 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -2;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <main+0x34c>)
 8001224:	f06f 0201 	mvn.w	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

				break;
 800122a:	e07c      	b.n	8001326 <main+0x3b6>
			case 50: //2,+-v
				HAL_UART_Transmit(&huart2, (uint8_t*)temp5, strlen(temp5),10);
 800122c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ffd5 	bl	80001e0 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800123e:	230a      	movs	r3, #10
 8001240:	4817      	ldr	r0, [pc, #92]	; (80012a0 <main+0x330>)
 8001242:	f004 fcae 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -3;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <main+0x34c>)
 8001248:	f06f 0202 	mvn.w	r2, #2
 800124c:	601a      	str	r2, [r3, #0]

				break;
 800124e:	e06a      	b.n	8001326 <main+0x3b6>
			case 51: //3,type slope
				if(slope == 1){
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <main+0x354>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <main+0x2f4>
					slope ++;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <main+0x354>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <main+0x354>)
 8001260:	6013      	str	r3, [r2, #0]
				}
				else{
					slope = 1;
				}

				break;
 8001262:	e060      	b.n	8001326 <main+0x3b6>
					slope = 1;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <main+0x354>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
				break;
 800126a:	e05c      	b.n	8001326 <main+0x3b6>
 800126c:	20000128 	.word	0x20000128
 8001270:	20000208 	.word	0x20000208
 8001274:	200000a4 	.word	0x200000a4
 8001278:	200001c0 	.word	0x200001c0
 800127c:	40020000 	.word	0x40020000
 8001280:	08008230 	.word	0x08008230
 8001284:	08008280 	.word	0x08008280
 8001288:	080082e4 	.word	0x080082e4
 800128c:	0800832c 	.word	0x0800832c
 8001290:	08008388 	.word	0x08008388
 8001294:	080083c0 	.word	0x080083c0
 8001298:	08008428 	.word	0x08008428
 800129c:	08008464 	.word	0x08008464
 80012a0:	200002a8 	.word	0x200002a8
 80012a4:	20000110 	.word	0x20000110
 80012a8:	20000168 	.word	0x20000168
 80012ac:	40020400 	.word	0x40020400
 80012b0:	20000000 	.word	0x20000000
 80012b4:	200000b0 	.word	0x200000b0
 80012b8:	200000d4 	.word	0x200000d4
 80012bc:	20000004 	.word	0x20000004
 80012c0:	200000f4 	.word	0x200000f4
 80012c4:	20000014 	.word	0x20000014
			case 120: //x menu
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80012c8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ff87 	bl	80001e0 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 80012da:	230a      	movs	r3, #10
 80012dc:	48a4      	ldr	r0, [pc, #656]	; (8001570 <main+0x600>)
 80012de:	f004 fc60 	bl	8005ba2 <HAL_UART_Transmit>
				graph = 0;
 80012e2:	4ba4      	ldr	r3, [pc, #656]	; (8001574 <main+0x604>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
				Mode =-1;
 80012e8:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <main+0x608>)
 80012ea:	f04f 32ff 	mov.w	r2, #4294967295
 80012ee:	601a      	str	r2, [r3, #0]
				break;
 80012f0:	e019      	b.n	8001326 <main+0x3b6>
			default:
				HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff73 	bl	80001e0 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	1d39      	adds	r1, r7, #4
 8001300:	230a      	movs	r3, #10
 8001302:	489b      	ldr	r0, [pc, #620]	; (8001570 <main+0x600>)
 8001304:	f004 fc4d 	bl	8005ba2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp1, strlen(temp1),10);
 8001308:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ff67 	bl	80001e0 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800131a:	230a      	movs	r3, #10
 800131c:	4894      	ldr	r0, [pc, #592]	; (8001570 <main+0x600>)
 800131e:	f004 fc40 	bl	8005ba2 <HAL_UART_Transmit>
				break;
 8001322:	e000      	b.n	8001326 <main+0x3b6>
				break;
 8001324:	bf00      	nop
			}
			break;
 8001326:	e348      	b.n	80019ba <main+0xa4a>
		case 2: //Sine wave
			switch(inputchar){
 8001328:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 800132c:	2b31      	cmp	r3, #49	; 0x31
 800132e:	d00a      	beq.n	8001346 <main+0x3d6>
 8001330:	2b31      	cmp	r3, #49	; 0x31
 8001332:	dc03      	bgt.n	800133c <main+0x3cc>
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d057      	beq.n	80013ea <main+0x47a>
 800133a:	e03d      	b.n	80013b8 <main+0x448>
 800133c:	2b32      	cmp	r3, #50	; 0x32
 800133e:	d014      	beq.n	800136a <main+0x3fa>
 8001340:	2b78      	cmp	r3, #120	; 0x78
 8001342:	d024      	beq.n	800138e <main+0x41e>
 8001344:	e038      	b.n	80013b8 <main+0x448>
			case -1:
				break;
			case 49: //1,+-hz
				HAL_UART_Transmit(&huart2, (uint8_t*)temp4, strlen(temp4),10);
 8001346:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ff48 	bl	80001e0 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001358:	230a      	movs	r3, #10
 800135a:	4885      	ldr	r0, [pc, #532]	; (8001570 <main+0x600>)
 800135c:	f004 fc21 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -2;
 8001360:	4b85      	ldr	r3, [pc, #532]	; (8001578 <main+0x608>)
 8001362:	f06f 0201 	mvn.w	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

				break;
 8001368:	e040      	b.n	80013ec <main+0x47c>
			case 50: //2,+-v
				HAL_UART_Transmit(&huart2, (uint8_t*)temp5, strlen(temp5),10);
 800136a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ff36 	bl	80001e0 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800137c:	230a      	movs	r3, #10
 800137e:	487c      	ldr	r0, [pc, #496]	; (8001570 <main+0x600>)
 8001380:	f004 fc0f 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -3;
 8001384:	4b7c      	ldr	r3, [pc, #496]	; (8001578 <main+0x608>)
 8001386:	f06f 0202 	mvn.w	r2, #2
 800138a:	601a      	str	r2, [r3, #0]

				break;
 800138c:	e02e      	b.n	80013ec <main+0x47c>
			case 120: //x menu
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800138e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe ff24 	bl	80001e0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 80013a0:	230a      	movs	r3, #10
 80013a2:	4873      	ldr	r0, [pc, #460]	; (8001570 <main+0x600>)
 80013a4:	f004 fbfd 	bl	8005ba2 <HAL_UART_Transmit>
				graph = 0;
 80013a8:	4b72      	ldr	r3, [pc, #456]	; (8001574 <main+0x604>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
				Mode =-1;
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <main+0x608>)
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	601a      	str	r2, [r3, #0]
				break;
 80013b6:	e019      	b.n	80013ec <main+0x47c>
			default:
				HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff10 	bl	80001e0 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	1d39      	adds	r1, r7, #4
 80013c6:	230a      	movs	r3, #10
 80013c8:	4869      	ldr	r0, [pc, #420]	; (8001570 <main+0x600>)
 80013ca:	f004 fbea 	bl	8005ba2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2),10);
 80013ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe ff04 	bl	80001e0 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80013e0:	230a      	movs	r3, #10
 80013e2:	4863      	ldr	r0, [pc, #396]	; (8001570 <main+0x600>)
 80013e4:	f004 fbdd 	bl	8005ba2 <HAL_UART_Transmit>
				break;
 80013e8:	e000      	b.n	80013ec <main+0x47c>
				break;
 80013ea:	bf00      	nop
			}
			break;
 80013ec:	e2e5      	b.n	80019ba <main+0xa4a>
		case 3: //Square_wave
			switch(inputchar){
 80013ee:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 80013f2:	2b32      	cmp	r3, #50	; 0x32
 80013f4:	d01e      	beq.n	8001434 <main+0x4c4>
 80013f6:	2b32      	cmp	r3, #50	; 0x32
 80013f8:	dc05      	bgt.n	8001406 <main+0x496>
 80013fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fe:	d06b      	beq.n	80014d8 <main+0x568>
 8001400:	2b31      	cmp	r3, #49	; 0x31
 8001402:	d005      	beq.n	8001410 <main+0x4a0>
 8001404:	e04f      	b.n	80014a6 <main+0x536>
 8001406:	2b33      	cmp	r3, #51	; 0x33
 8001408:	d026      	beq.n	8001458 <main+0x4e8>
 800140a:	2b78      	cmp	r3, #120	; 0x78
 800140c:	d036      	beq.n	800147c <main+0x50c>
 800140e:	e04a      	b.n	80014a6 <main+0x536>
			case -1:
				break;
			case 49: //1,+-hz
				HAL_UART_Transmit(&huart2, (uint8_t*)temp4, strlen(temp4),10);
 8001410:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe fee3 	bl	80001e0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001422:	230a      	movs	r3, #10
 8001424:	4852      	ldr	r0, [pc, #328]	; (8001570 <main+0x600>)
 8001426:	f004 fbbc 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -2;
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <main+0x608>)
 800142c:	f06f 0201 	mvn.w	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

				break;
 8001432:	e052      	b.n	80014da <main+0x56a>
			case 50: //2,+-v
				HAL_UART_Transmit(&huart2, (uint8_t*)temp5, strlen(temp5),10);
 8001434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fed1 	bl	80001e0 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001446:	230a      	movs	r3, #10
 8001448:	4849      	ldr	r0, [pc, #292]	; (8001570 <main+0x600>)
 800144a:	f004 fbaa 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -3;
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <main+0x608>)
 8001450:	f06f 0202 	mvn.w	r2, #2
 8001454:	601a      	str	r2, [r3, #0]

				break;
 8001456:	e040      	b.n	80014da <main+0x56a>
			case 51: //3,+-Duty
				HAL_UART_Transmit(&huart2, (uint8_t*)temp6, strlen(temp6),10);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe febf 	bl	80001e0 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f107 0110 	add.w	r1, r7, #16
 800146a:	230a      	movs	r3, #10
 800146c:	4840      	ldr	r0, [pc, #256]	; (8001570 <main+0x600>)
 800146e:	f004 fb98 	bl	8005ba2 <HAL_UART_Transmit>
				Mode = -4;
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <main+0x608>)
 8001474:	f06f 0203 	mvn.w	r2, #3
 8001478:	601a      	str	r2, [r3, #0]
				break;
 800147a:	e02e      	b.n	80014da <main+0x56a>
			case 120: //x menu
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800147c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fead 	bl	80001e0 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 800148e:	230a      	movs	r3, #10
 8001490:	4837      	ldr	r0, [pc, #220]	; (8001570 <main+0x600>)
 8001492:	f004 fb86 	bl	8005ba2 <HAL_UART_Transmit>
				graph = 0;
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <main+0x604>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
				Mode =-1;
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <main+0x608>)
 800149e:	f04f 32ff 	mov.w	r2, #4294967295
 80014a2:	601a      	str	r2, [r3, #0]
				break;
 80014a4:	e019      	b.n	80014da <main+0x56a>
			default:
				HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fe99 	bl	80001e0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	1d39      	adds	r1, r7, #4
 80014b4:	230a      	movs	r3, #10
 80014b6:	482e      	ldr	r0, [pc, #184]	; (8001570 <main+0x600>)
 80014b8:	f004 fb73 	bl	8005ba2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp3, strlen(temp3),10);
 80014bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe8d 	bl	80001e0 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80014ce:	230a      	movs	r3, #10
 80014d0:	4827      	ldr	r0, [pc, #156]	; (8001570 <main+0x600>)
 80014d2:	f004 fb66 	bl	8005ba2 <HAL_UART_Transmit>
				break;
 80014d6:	e000      	b.n	80014da <main+0x56a>
				break;
 80014d8:	bf00      	nop
			}
			break;
 80014da:	e26e      	b.n	80019ba <main+0xa4a>
		case -2: //Set hz value
			switch(inputchar){
 80014dc:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 80014e0:	2b2b      	cmp	r3, #43	; 0x2b
 80014e2:	d00b      	beq.n	80014fc <main+0x58c>
 80014e4:	2b2b      	cmp	r3, #43	; 0x2b
 80014e6:	dc04      	bgt.n	80014f2 <main+0x582>
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	f000 809e 	beq.w	800162c <main+0x6bc>
 80014f0:	e083      	b.n	80015fa <main+0x68a>
 80014f2:	2b2d      	cmp	r3, #45	; 0x2d
 80014f4:	d016      	beq.n	8001524 <main+0x5b4>
 80014f6:	2b78      	cmp	r3, #120	; 0x78
 80014f8:	d042      	beq.n	8001580 <main+0x610>
 80014fa:	e07e      	b.n	80015fa <main+0x68a>
				case -1:
					break;
				case 43: //+
					Freq += 0.1;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <main+0x60c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f829 	bl	8000558 <__aeabi_f2d>
 8001506:	a318      	add	r3, pc, #96	; (adr r3, 8001568 <main+0x5f8>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7fe fec6 	bl	800029c <__adddf3>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	4618      	mov	r0, r3
 8001516:	4621      	mov	r1, r4
 8001518:	f7ff fb58 	bl	8000bcc <__aeabi_d2f>
 800151c:	4602      	mov	r2, r0
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <main+0x60c>)
 8001520:	601a      	str	r2, [r3, #0]
					break;
 8001522:	e086      	b.n	8001632 <main+0x6c2>
				case 45: //-
					if(Freq > 0){
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <main+0x60c>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	dd13      	ble.n	800155c <main+0x5ec>
						Freq -= 0.1;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <main+0x60c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	a30a      	add	r3, pc, #40	; (adr r3, 8001568 <main+0x5f8>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7fe fea8 	bl	8000298 <__aeabi_dsub>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	f7ff fb3c 	bl	8000bcc <__aeabi_d2f>
 8001554:	4602      	mov	r2, r0
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <main+0x60c>)
 8001558:	601a      	str	r2, [r3, #0]
					}
					else{
						Freq = 0;
					}
					break;
 800155a:	e06a      	b.n	8001632 <main+0x6c2>
						Freq = 0;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <main+0x60c>)
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
					break;
 8001564:	e065      	b.n	8001632 <main+0x6c2>
 8001566:	bf00      	nop
 8001568:	9999999a 	.word	0x9999999a
 800156c:	3fb99999 	.word	0x3fb99999
 8001570:	200002a8 	.word	0x200002a8
 8001574:	200000f4 	.word	0x200000f4
 8001578:	20000004 	.word	0x20000004
 800157c:	20000008 	.word	0x20000008
				case 120: //x menu
					if(graph == 1){
 8001580:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <main+0x8f0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10f      	bne.n	80015a8 <main+0x638>
						HAL_UART_Transmit(&huart2, (uint8_t*)temp1, strlen(temp1),10);
 8001588:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe fe27 	bl	80001e0 <strlen>
 8001592:	4603      	mov	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800159a:	230a      	movs	r3, #10
 800159c:	48b1      	ldr	r0, [pc, #708]	; (8001864 <main+0x8f4>)
 800159e:	f004 fb00 	bl	8005ba2 <HAL_UART_Transmit>
						Mode = 1;
 80015a2:	4bb1      	ldr	r3, [pc, #708]	; (8001868 <main+0x8f8>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
					}
					if(graph == 2){
 80015a8:	4bad      	ldr	r3, [pc, #692]	; (8001860 <main+0x8f0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d10f      	bne.n	80015d0 <main+0x660>
						HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2),10);
 80015b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fe13 	bl	80001e0 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80015c2:	230a      	movs	r3, #10
 80015c4:	48a7      	ldr	r0, [pc, #668]	; (8001864 <main+0x8f4>)
 80015c6:	f004 faec 	bl	8005ba2 <HAL_UART_Transmit>
						Mode = 2;
 80015ca:	4ba7      	ldr	r3, [pc, #668]	; (8001868 <main+0x8f8>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	601a      	str	r2, [r3, #0]
					}
					if(graph == 3){
 80015d0:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <main+0x8f0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d12b      	bne.n	8001630 <main+0x6c0>
						HAL_UART_Transmit(&huart2, (uint8_t*)temp3, strlen(temp3),10);
 80015d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdff 	bl	80001e0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80015ea:	230a      	movs	r3, #10
 80015ec:	489d      	ldr	r0, [pc, #628]	; (8001864 <main+0x8f4>)
 80015ee:	f004 fad8 	bl	8005ba2 <HAL_UART_Transmit>
						Mode = 3;
 80015f2:	4b9d      	ldr	r3, [pc, #628]	; (8001868 <main+0x8f8>)
 80015f4:	2203      	movs	r2, #3
 80015f6:	601a      	str	r2, [r3, #0]
					}
					break;
 80015f8:	e01a      	b.n	8001630 <main+0x6c0>
				default:
					HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdef 	bl	80001e0 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	b29a      	uxth	r2, r3
 8001606:	1d39      	adds	r1, r7, #4
 8001608:	230a      	movs	r3, #10
 800160a:	4896      	ldr	r0, [pc, #600]	; (8001864 <main+0x8f4>)
 800160c:	f004 fac9 	bl	8005ba2 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp4, strlen(temp4),10);
 8001610:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fde3 	bl	80001e0 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001622:	230a      	movs	r3, #10
 8001624:	488f      	ldr	r0, [pc, #572]	; (8001864 <main+0x8f4>)
 8001626:	f004 fabc 	bl	8005ba2 <HAL_UART_Transmit>
					break;
 800162a:	e002      	b.n	8001632 <main+0x6c2>
					break;
 800162c:	bf00      	nop
 800162e:	e1c4      	b.n	80019ba <main+0xa4a>
					break;
 8001630:	bf00      	nop
			}
			break;
 8001632:	e1c2      	b.n	80019ba <main+0xa4a>
		case -3: //Set volt value
			switch(inputchar){
 8001634:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 8001638:	2b62      	cmp	r3, #98	; 0x62
 800163a:	d035      	beq.n	80016a8 <main+0x738>
 800163c:	2b62      	cmp	r3, #98	; 0x62
 800163e:	dc06      	bgt.n	800164e <main+0x6de>
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	f000 80ed 	beq.w	8001822 <main+0x8b2>
 8001648:	2b61      	cmp	r3, #97	; 0x61
 800164a:	d008      	beq.n	800165e <main+0x6ee>
 800164c:	e0d0      	b.n	80017f0 <main+0x880>
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d070      	beq.n	8001734 <main+0x7c4>
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	db49      	blt.n	80016ea <main+0x77a>
 8001656:	2b78      	cmp	r3, #120	; 0x78
 8001658:	f000 808d 	beq.w	8001776 <main+0x806>
 800165c:	e0c8      	b.n	80017f0 <main+0x880>
			case -1:
				break;
			case 97: //a,v_high+
				if(V_high<3.29){
 800165e:	4b83      	ldr	r3, [pc, #524]	; (800186c <main+0x8fc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff78 	bl	8000558 <__aeabi_f2d>
 8001668:	a379      	add	r3, pc, #484	; (adr r3, 8001850 <main+0x8e0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7ff fa3d 	bl	8000aec <__aeabi_dcmplt>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <main+0x730>
					V_high += 0.1;
 8001678:	4b7c      	ldr	r3, [pc, #496]	; (800186c <main+0x8fc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff6b 	bl	8000558 <__aeabi_f2d>
 8001682:	a375      	add	r3, pc, #468	; (adr r3, 8001858 <main+0x8e8>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe fe08 	bl	800029c <__adddf3>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	4618      	mov	r0, r3
 8001692:	4621      	mov	r1, r4
 8001694:	f7ff fa9a 	bl	8000bcc <__aeabi_d2f>
 8001698:	4602      	mov	r2, r0
 800169a:	4b74      	ldr	r3, [pc, #464]	; (800186c <main+0x8fc>)
 800169c:	601a      	str	r2, [r3, #0]
				}
				else{
					V_high = 3.3;
				}
				break;
 800169e:	e0c3      	b.n	8001828 <main+0x8b8>
					V_high = 3.3;
 80016a0:	4b72      	ldr	r3, [pc, #456]	; (800186c <main+0x8fc>)
 80016a2:	4a73      	ldr	r2, [pc, #460]	; (8001870 <main+0x900>)
 80016a4:	601a      	str	r2, [r3, #0]
				break;
 80016a6:	e0bf      	b.n	8001828 <main+0x8b8>
			case 98: //b,v_high-
				V_high -= 0.1;
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <main+0x8fc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff53 	bl	8000558 <__aeabi_f2d>
 80016b2:	a369      	add	r3, pc, #420	; (adr r3, 8001858 <main+0x8e8>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe fdee 	bl	8000298 <__aeabi_dsub>
 80016bc:	4603      	mov	r3, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	4618      	mov	r0, r3
 80016c2:	4621      	mov	r1, r4
 80016c4:	f7ff fa82 	bl	8000bcc <__aeabi_d2f>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b68      	ldr	r3, [pc, #416]	; (800186c <main+0x8fc>)
 80016cc:	601a      	str	r2, [r3, #0]
				if(V_high<=0){
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <main+0x8fc>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	d900      	bls.n	80016e0 <main+0x770>
					V_high = 0;
				}
				break;
 80016de:	e0a3      	b.n	8001828 <main+0x8b8>
					V_high = 0;
 80016e0:	4b62      	ldr	r3, [pc, #392]	; (800186c <main+0x8fc>)
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
				break;
 80016e8:	e09e      	b.n	8001828 <main+0x8b8>
			case 99: //c,v_low+
				if(V_low<3.29){
 80016ea:	4b62      	ldr	r3, [pc, #392]	; (8001874 <main+0x904>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff32 	bl	8000558 <__aeabi_f2d>
 80016f4:	a356      	add	r3, pc, #344	; (adr r3, 8001850 <main+0x8e0>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7ff f9f7 	bl	8000aec <__aeabi_dcmplt>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <main+0x7bc>
					V_low += 0.1;
 8001704:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <main+0x904>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff25 	bl	8000558 <__aeabi_f2d>
 800170e:	a352      	add	r3, pc, #328	; (adr r3, 8001858 <main+0x8e8>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fdc2 	bl	800029c <__adddf3>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	4618      	mov	r0, r3
 800171e:	4621      	mov	r1, r4
 8001720:	f7ff fa54 	bl	8000bcc <__aeabi_d2f>
 8001724:	4602      	mov	r2, r0
 8001726:	4b53      	ldr	r3, [pc, #332]	; (8001874 <main+0x904>)
 8001728:	601a      	str	r2, [r3, #0]
				}
				else{
					V_low = 3.3;
				}

				break;
 800172a:	e07d      	b.n	8001828 <main+0x8b8>
					V_low = 3.3;
 800172c:	4b51      	ldr	r3, [pc, #324]	; (8001874 <main+0x904>)
 800172e:	4a50      	ldr	r2, [pc, #320]	; (8001870 <main+0x900>)
 8001730:	601a      	str	r2, [r3, #0]
				break;
 8001732:	e079      	b.n	8001828 <main+0x8b8>
			case 100: //d,v_low-
				V_low -= 0.1;
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <main+0x904>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff0d 	bl	8000558 <__aeabi_f2d>
 800173e:	a346      	add	r3, pc, #280	; (adr r3, 8001858 <main+0x8e8>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fda8 	bl	8000298 <__aeabi_dsub>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	4618      	mov	r0, r3
 800174e:	4621      	mov	r1, r4
 8001750:	f7ff fa3c 	bl	8000bcc <__aeabi_d2f>
 8001754:	4602      	mov	r2, r0
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <main+0x904>)
 8001758:	601a      	str	r2, [r3, #0]
				if(V_low<=0){
 800175a:	4b46      	ldr	r3, [pc, #280]	; (8001874 <main+0x904>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d900      	bls.n	800176c <main+0x7fc>
					V_low = 0;
				}

				break;
 800176a:	e05d      	b.n	8001828 <main+0x8b8>
					V_low = 0;
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <main+0x904>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
				break;
 8001774:	e058      	b.n	8001828 <main+0x8b8>
			case 120: //x menu
				if(graph == 1){
 8001776:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <main+0x8f0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10f      	bne.n	800179e <main+0x82e>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp1, strlen(temp1),10);
 800177e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fd2c 	bl	80001e0 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8001790:	230a      	movs	r3, #10
 8001792:	4834      	ldr	r0, [pc, #208]	; (8001864 <main+0x8f4>)
 8001794:	f004 fa05 	bl	8005ba2 <HAL_UART_Transmit>
					Mode = 1;
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <main+0x8f8>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
				}
				if(graph == 2){
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <main+0x8f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d10f      	bne.n	80017c6 <main+0x856>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2),10);
 80017a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd18 	bl	80001e0 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80017b8:	230a      	movs	r3, #10
 80017ba:	482a      	ldr	r0, [pc, #168]	; (8001864 <main+0x8f4>)
 80017bc:	f004 f9f1 	bl	8005ba2 <HAL_UART_Transmit>
					Mode = 2;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <main+0x8f8>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
				}
				if(graph == 3){
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <main+0x8f0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d12b      	bne.n	8001826 <main+0x8b6>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp3, strlen(temp3),10);
 80017ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fd04 	bl	80001e0 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80017e0:	230a      	movs	r3, #10
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <main+0x8f4>)
 80017e4:	f004 f9dd 	bl	8005ba2 <HAL_UART_Transmit>
					Mode = 3;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <main+0x8f8>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	601a      	str	r2, [r3, #0]
				}

				break;
 80017ee:	e01a      	b.n	8001826 <main+0x8b6>
			default:
				HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fcf4 	bl	80001e0 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	1d39      	adds	r1, r7, #4
 80017fe:	230a      	movs	r3, #10
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <main+0x8f4>)
 8001802:	f004 f9ce 	bl	8005ba2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp5, strlen(temp5),10);
 8001806:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fce8 	bl	80001e0 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	b29a      	uxth	r2, r3
 8001814:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001818:	230a      	movs	r3, #10
 800181a:	4812      	ldr	r0, [pc, #72]	; (8001864 <main+0x8f4>)
 800181c:	f004 f9c1 	bl	8005ba2 <HAL_UART_Transmit>
				break;
 8001820:	e002      	b.n	8001828 <main+0x8b8>
				break;
 8001822:	bf00      	nop
 8001824:	e0c9      	b.n	80019ba <main+0xa4a>
				break;
 8001826:	bf00      	nop
			}
			break;
 8001828:	e0c7      	b.n	80019ba <main+0xa4a>
		case -4: //Set duty value
			switch(inputchar){
 800182a:	f9b7 3246 	ldrsh.w	r3, [r7, #582]	; 0x246
 800182e:	2b2b      	cmp	r3, #43	; 0x2b
 8001830:	d022      	beq.n	8001878 <main+0x908>
 8001832:	2b2b      	cmp	r3, #43	; 0x2b
 8001834:	dc04      	bgt.n	8001840 <main+0x8d0>
 8001836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183a:	f000 80ba 	beq.w	80019b2 <main+0xa42>
 800183e:	e09f      	b.n	8001980 <main+0xa10>
 8001840:	2b2d      	cmp	r3, #45	; 0x2d
 8001842:	d03f      	beq.n	80018c4 <main+0x954>
 8001844:	2b78      	cmp	r3, #120	; 0x78
 8001846:	d05e      	beq.n	8001906 <main+0x996>
 8001848:	e09a      	b.n	8001980 <main+0xa10>
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	851eb852 	.word	0x851eb852
 8001854:	400a51eb 	.word	0x400a51eb
 8001858:	9999999a 	.word	0x9999999a
 800185c:	3fb99999 	.word	0x3fb99999
 8001860:	200000f4 	.word	0x200000f4
 8001864:	200002a8 	.word	0x200002a8
 8001868:	20000004 	.word	0x20000004
 800186c:	2000000c 	.word	0x2000000c
 8001870:	40533333 	.word	0x40533333
 8001874:	200000fc 	.word	0x200000fc
			case -1:
				break;
			case 43: //1,+
				if(Duty < 0.99){
 8001878:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <main+0xa60>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	a34f      	add	r3, pc, #316	; (adr r3, 80019c0 <main+0xa50>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7ff f930 	bl	8000aec <__aeabi_dcmplt>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d013      	beq.n	80018ba <main+0x94a>
					Duty += 0.1 ;
 8001892:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <main+0xa60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe5e 	bl	8000558 <__aeabi_f2d>
 800189c:	a34a      	add	r3, pc, #296	; (adr r3, 80019c8 <main+0xa58>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fcfb 	bl	800029c <__adddf3>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	4618      	mov	r0, r3
 80018ac:	4621      	mov	r1, r4
 80018ae:	f7ff f98d 	bl	8000bcc <__aeabi_d2f>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <main+0xa60>)
 80018b6:	601a      	str	r2, [r3, #0]
				}
				else{
					Duty = 1.0;
				}
				break;
 80018b8:	e07e      	b.n	80019b8 <main+0xa48>
					Duty = 1.0;
 80018ba:	4b45      	ldr	r3, [pc, #276]	; (80019d0 <main+0xa60>)
 80018bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c0:	601a      	str	r2, [r3, #0]
				break;
 80018c2:	e079      	b.n	80019b8 <main+0xa48>
			case 45: //2,-
				if(Duty > 0){
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <main+0xa60>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd13      	ble.n	80018fc <main+0x98c>
					Duty -= 0.1;
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <main+0xa60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe3d 	bl	8000558 <__aeabi_f2d>
 80018de:	a33a      	add	r3, pc, #232	; (adr r3, 80019c8 <main+0xa58>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fcd8 	bl	8000298 <__aeabi_dsub>
 80018e8:	4603      	mov	r3, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	4618      	mov	r0, r3
 80018ee:	4621      	mov	r1, r4
 80018f0:	f7ff f96c 	bl	8000bcc <__aeabi_d2f>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <main+0xa60>)
 80018f8:	601a      	str	r2, [r3, #0]
				}
				else{
					Duty = 0;
				}
				break;
 80018fa:	e05d      	b.n	80019b8 <main+0xa48>
					Duty = 0;
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <main+0xa60>)
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
				break;
 8001904:	e058      	b.n	80019b8 <main+0xa48>
			case 120: //x menu
				if(graph== 1){
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <main+0xa64>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d10f      	bne.n	800192e <main+0x9be>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp1, strlen(temp1),10);
 800190e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fc64 	bl	80001e0 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8001920:	230a      	movs	r3, #10
 8001922:	482d      	ldr	r0, [pc, #180]	; (80019d8 <main+0xa68>)
 8001924:	f004 f93d 	bl	8005ba2 <HAL_UART_Transmit>
					Mode = 1;
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <main+0xa6c>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]
				}
				if(graph == 2){
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <main+0xa64>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d10f      	bne.n	8001956 <main+0x9e6>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2),10);
 8001936:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc50 	bl	80001e0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001948:	230a      	movs	r3, #10
 800194a:	4823      	ldr	r0, [pc, #140]	; (80019d8 <main+0xa68>)
 800194c:	f004 f929 	bl	8005ba2 <HAL_UART_Transmit>
					Mode = 2;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <main+0xa6c>)
 8001952:	2202      	movs	r2, #2
 8001954:	601a      	str	r2, [r3, #0]
				}
				if(graph == 3){
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <main+0xa64>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d12b      	bne.n	80019b6 <main+0xa46>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp3, strlen(temp3),10);
 800195e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fc3c 	bl	80001e0 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001970:	230a      	movs	r3, #10
 8001972:	4819      	ldr	r0, [pc, #100]	; (80019d8 <main+0xa68>)
 8001974:	f004 f915 	bl	8005ba2 <HAL_UART_Transmit>
					Mode = 3;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <main+0xa6c>)
 800197a:	2203      	movs	r2, #3
 800197c:	601a      	str	r2, [r3, #0]
				}
				break;
 800197e:	e01a      	b.n	80019b6 <main+0xa46>
			default:
				HAL_UART_Transmit(&huart2, (uint8_t*)temp7, strlen(temp7),10);
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fc2c 	bl	80001e0 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	b29a      	uxth	r2, r3
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	230a      	movs	r3, #10
 8001990:	4811      	ldr	r0, [pc, #68]	; (80019d8 <main+0xa68>)
 8001992:	f004 f906 	bl	8005ba2 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp6, strlen(temp6),10);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc20 	bl	80001e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 0110 	add.w	r1, r7, #16
 80019a8:	230a      	movs	r3, #10
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <main+0xa68>)
 80019ac:	f004 f8f9 	bl	8005ba2 <HAL_UART_Transmit>
				break;
 80019b0:	e002      	b.n	80019b8 <main+0xa48>
				break;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <main+0xa48>
				break;
 80019b6:	bf00      	nop
			}
			break;
 80019b8:	bf00      	nop
	{
 80019ba:	f7ff bb5c 	b.w	8001076 <main+0x106>
 80019be:	bf00      	nop
 80019c0:	7ae147ae 	.word	0x7ae147ae
 80019c4:	3fefae14 	.word	0x3fefae14
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fb99999 	.word	0x3fb99999
 80019d0:	20000010 	.word	0x20000010
 80019d4:	200000f4 	.word	0x200000f4
 80019d8:	200002a8 	.word	0x200002a8
 80019dc:	20000004 	.word	0x20000004

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fff7 	bl	80069e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <SystemClock_Config+0xc8>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <SystemClock_Config+0xc8>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <SystemClock_Config+0xc8>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <SystemClock_Config+0xcc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <SystemClock_Config+0xcc>)
 8001a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <SystemClock_Config+0xcc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a44:	2310      	movs	r3, #16
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a50:	2308      	movs	r3, #8
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fc9f 	bl	80043a8 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a70:	f000 fca6 	bl	80023c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2103      	movs	r1, #3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fef9 	bl	8004888 <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a9c:	f000 fc90 	bl	80023c0 <Error_Handler>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3750      	adds	r7, #80	; 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000

08001ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 ff89 	bl	80069e2 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001ad2:	4a31      	ldr	r2, [pc, #196]	; (8001b98 <MX_ADC1_Init+0xe8>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001ad8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b24:	f000 ff1a 	bl	800295c <HAL_ADC_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001b2e:	f000 fc47 	bl	80023c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	4619      	mov	r1, r3
 8001b44:	4813      	ldr	r0, [pc, #76]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b46:	f001 f989 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001b50:	f000 fc36 	bl	80023c0 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_ADC1_Init+0xec>)
 8001b6a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_ADC1_Init+0xe4>)
 8001b7e:	f001 fc27 	bl	80033d0 <HAL_ADCEx_InjectedConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001b88:	f000 fc1a 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3730      	adds	r7, #48	; 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200001c0 	.word	0x200001c0
 8001b98:	40012000 	.word	0x40012000
 8001b9c:	000f0001 	.word	0x000f0001

08001ba0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <MX_SPI3_Init+0x6c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bbe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bd6:	2218      	movs	r2, #24
 8001bd8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bee:	220a      	movs	r2, #10
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_SPI3_Init+0x68>)
 8001bf4:	f003 f83a 	bl	8004c6c <HAL_SPI_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001bfe:	f000 fbdf 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000168 	.word	0x20000168
 8001c0c:	40003c00 	.word	0x40003c00

08001c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <MX_TIM3_Init+0x94>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c34:	2263      	movs	r2, #99	; 0x63
 8001c36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c40:	2264      	movs	r2, #100	; 0x64
 8001c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c50:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c52:	f003 fb63 	bl	800531c <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001c5c:	f000 fbb0 	bl	80023c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c6e:	f003 fcd0 	bl	8005612 <HAL_TIM_ConfigClockSource>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c78:	f000 fba2 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_TIM3_Init+0x90>)
 8001c8a:	f003 febb 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c94:	f000 fb94 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000128 	.word	0x20000128
 8001ca4:	40000400 	.word	0x40000400

08001ca8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <MX_TIM11_Init+0x44>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cb4:	2263      	movs	r2, #99	; 0x63
 8001cb6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_TIM11_Init+0x40>)
 8001cd4:	f003 fb22 	bl	800531c <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001cde:	f000 fb6f 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000208 	.word	0x20000208
 8001cec:	40014800 	.word	0x40014800

08001cf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f003 feee 	bl	8005b08 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f000 fb45 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002a8 	.word	0x200002a8
 8001d40:	40004400 	.word	0x40004400

08001d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_DMA_Init+0x3c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <MX_DMA_Init+0x3c>)
 8001d54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_DMA_Init+0x3c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2038      	movs	r0, #56	; 0x38
 8001d6c:	f001 fda1 	bl	80038b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d70:	2038      	movs	r0, #56	; 0x38
 8001d72:	f001 fdba 	bl	80038ea <HAL_NVIC_EnableIRQ>

}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a43      	ldr	r2, [pc, #268]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a3c      	ldr	r2, [pc, #240]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a35      	ldr	r2, [pc, #212]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <MX_GPIO_Init+0x12c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	4829      	ldr	r0, [pc, #164]	; (8001eb4 <MX_GPIO_Init+0x130>)
 8001e10:	f002 fab0 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1a:	4827      	ldr	r0, [pc, #156]	; (8001eb8 <MX_GPIO_Init+0x134>)
 8001e1c:	f002 faaa 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	4825      	ldr	r0, [pc, #148]	; (8001ebc <MX_GPIO_Init+0x138>)
 8001e26:	f002 faa5 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e30:	4820      	ldr	r0, [pc, #128]	; (8001eb4 <MX_GPIO_Init+0x130>)
 8001e32:	f002 fa9f 	bl	8004374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <MX_GPIO_Init+0x13c>)
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481c      	ldr	r0, [pc, #112]	; (8001ebc <MX_GPIO_Init+0x138>)
 8001e4c:	f002 f8f8 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001e50:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <MX_GPIO_Init+0x130>)
 8001e6a:	f002 f8e9 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <MX_GPIO_Init+0x134>)
 8001e88:	f002 f8da 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_GPIO_Init+0x138>)
 8001ea4:	f002 f8cc 	bl	8004040 <HAL_GPIO_Init>

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	10210000 	.word	0x10210000
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <Gen_Wave>:

/* USER CODE BEGIN 4 */

void Gen_Wave(){
 8001ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ecc:	af00      	add	r7, sp, #0
	T = 1/Freq;
 8001ece:	4bca      	ldr	r3, [pc, #808]	; (80021f8 <Gen_Wave+0x330>)
 8001ed0:	ed93 7a00 	vldr	s14, [r3]
 8001ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001edc:	4bc7      	ldr	r3, [pc, #796]	; (80021fc <Gen_Wave+0x334>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
	t += 0.001;
 8001ee2:	4bc7      	ldr	r3, [pc, #796]	; (8002200 <Gen_Wave+0x338>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb36 	bl	8000558 <__aeabi_f2d>
 8001eec:	a3bc      	add	r3, pc, #752	; (adr r3, 80021e0 <Gen_Wave+0x318>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe f9d3 	bl	800029c <__adddf3>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460c      	mov	r4, r1
 8001efa:	4618      	mov	r0, r3
 8001efc:	4621      	mov	r1, r4
 8001efe:	f7fe fe65 	bl	8000bcc <__aeabi_d2f>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4bbe      	ldr	r3, [pc, #760]	; (8002200 <Gen_Wave+0x338>)
 8001f06:	601a      	str	r2, [r3, #0]
	delta_Y = V_high-V_low;
 8001f08:	4bbe      	ldr	r3, [pc, #760]	; (8002204 <Gen_Wave+0x33c>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	4bbe      	ldr	r3, [pc, #760]	; (8002208 <Gen_Wave+0x340>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f18:	4bbc      	ldr	r3, [pc, #752]	; (800220c <Gen_Wave+0x344>)
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
	//duty cycle
	T1 = T*Duty;
 8001f1e:	4bb7      	ldr	r3, [pc, #732]	; (80021fc <Gen_Wave+0x334>)
 8001f20:	ed93 7a00 	vldr	s14, [r3]
 8001f24:	4bba      	ldr	r3, [pc, #744]	; (8002210 <Gen_Wave+0x348>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	4bb9      	ldr	r3, [pc, #740]	; (8002214 <Gen_Wave+0x34c>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]
	switch(graph){
 8001f34:	4bb8      	ldr	r3, [pc, #736]	; (8002218 <Gen_Wave+0x350>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d07c      	beq.n	8002036 <Gen_Wave+0x16e>
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	f000 80e8 	beq.w	8002112 <Gen_Wave+0x24a>
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d000      	beq.n	8001f48 <Gen_Wave+0x80>
		else{
			t = 0;
		}
		break;
	}
}
 8001f46:	e146      	b.n	80021d6 <Gen_Wave+0x30e>
		if(t<=T){
 8001f48:	4bad      	ldr	r3, [pc, #692]	; (8002200 <Gen_Wave+0x338>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	4bab      	ldr	r3, [pc, #684]	; (80021fc <Gen_Wave+0x334>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d866      	bhi.n	800202c <Gen_Wave+0x164>
			if(slope == 1){
 8001f5e:	4baf      	ldr	r3, [pc, #700]	; (800221c <Gen_Wave+0x354>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d12e      	bne.n	8001fc4 <Gen_Wave+0xfc>
				dataOut = (((delta_Y / T)*t)+V_low)*4096.0/3.3;
 8001f66:	4ba9      	ldr	r3, [pc, #676]	; (800220c <Gen_Wave+0x344>)
 8001f68:	edd3 6a00 	vldr	s13, [r3]
 8001f6c:	4ba3      	ldr	r3, [pc, #652]	; (80021fc <Gen_Wave+0x334>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f76:	4ba2      	ldr	r3, [pc, #648]	; (8002200 <Gen_Wave+0x338>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f80:	4ba1      	ldr	r3, [pc, #644]	; (8002208 <Gen_Wave+0x340>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	ee17 0a90 	vmov	r0, s15
 8001f8e:	f7fe fae3 	bl	8000558 <__aeabi_f2d>
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4ba2      	ldr	r3, [pc, #648]	; (8002220 <Gen_Wave+0x358>)
 8001f98:	f7fe fb36 	bl	8000608 <__aeabi_dmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	a390      	add	r3, pc, #576	; (adr r3, 80021e8 <Gen_Wave+0x320>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fc57 	bl	800085c <__aeabi_ddiv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	f7fe fde9 	bl	8000b8c <__aeabi_d2uiz>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b99      	ldr	r3, [pc, #612]	; (8002224 <Gen_Wave+0x35c>)
 8001fc0:	801a      	strh	r2, [r3, #0]
		break;
 8001fc2:	e108      	b.n	80021d6 <Gen_Wave+0x30e>
				dataOut = (((V_low-V_high/ T)*t)+V_high)*4096.0/3.3;
 8001fc4:	4b90      	ldr	r3, [pc, #576]	; (8002208 <Gen_Wave+0x340>)
 8001fc6:	ed93 7a00 	vldr	s14, [r3]
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <Gen_Wave+0x33c>)
 8001fcc:	ed93 6a00 	vldr	s12, [r3]
 8001fd0:	4b8a      	ldr	r3, [pc, #552]	; (80021fc <Gen_Wave+0x334>)
 8001fd2:	edd3 6a00 	vldr	s13, [r3]
 8001fd6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <Gen_Wave+0x338>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <Gen_Wave+0x33c>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe faaf 	bl	8000558 <__aeabi_f2d>
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b88      	ldr	r3, [pc, #544]	; (8002220 <Gen_Wave+0x358>)
 8002000:	f7fe fb02 	bl	8000608 <__aeabi_dmul>
 8002004:	4603      	mov	r3, r0
 8002006:	460c      	mov	r4, r1
 8002008:	4618      	mov	r0, r3
 800200a:	4621      	mov	r1, r4
 800200c:	a376      	add	r3, pc, #472	; (adr r3, 80021e8 <Gen_Wave+0x320>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe fc23 	bl	800085c <__aeabi_ddiv>
 8002016:	4603      	mov	r3, r0
 8002018:	460c      	mov	r4, r1
 800201a:	4618      	mov	r0, r3
 800201c:	4621      	mov	r1, r4
 800201e:	f7fe fdb5 	bl	8000b8c <__aeabi_d2uiz>
 8002022:	4603      	mov	r3, r0
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <Gen_Wave+0x35c>)
 8002028:	801a      	strh	r2, [r3, #0]
		break;
 800202a:	e0d4      	b.n	80021d6 <Gen_Wave+0x30e>
			t = 0;
 800202c:	4b74      	ldr	r3, [pc, #464]	; (8002200 <Gen_Wave+0x338>)
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
		break;
 8002034:	e0cf      	b.n	80021d6 <Gen_Wave+0x30e>
		dataOut = ((delta_Y/2)*sin(2*M_PI*Freq*t)+((V_high+V_low)*0.5))*4096.0/3.3;
 8002036:	4b75      	ldr	r3, [pc, #468]	; (800220c <Gen_Wave+0x344>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002040:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002044:	ee16 0a90 	vmov	r0, s13
 8002048:	f7fe fa86 	bl	8000558 <__aeabi_f2d>
 800204c:	4604      	mov	r4, r0
 800204e:	460d      	mov	r5, r1
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <Gen_Wave+0x330>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa7f 	bl	8000558 <__aeabi_f2d>
 800205a:	a365      	add	r3, pc, #404	; (adr r3, 80021f0 <Gen_Wave+0x328>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fad2 	bl	8000608 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4690      	mov	r8, r2
 800206a:	4699      	mov	r9, r3
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <Gen_Wave+0x338>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa71 	bl	8000558 <__aeabi_f2d>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4640      	mov	r0, r8
 800207c:	4649      	mov	r1, r9
 800207e:	f7fe fac3 	bl	8000608 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	ec43 2b17 	vmov	d7, r2, r3
 800208a:	eeb0 0a47 	vmov.f32	s0, s14
 800208e:	eef0 0a67 	vmov.f32	s1, s15
 8002092:	f005 f8ad 	bl	80071f0 <sin>
 8002096:	ec53 2b10 	vmov	r2, r3, d0
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f7fe fab3 	bl	8000608 <__aeabi_dmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	460c      	mov	r4, r1
 80020a6:	4625      	mov	r5, r4
 80020a8:	461c      	mov	r4, r3
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <Gen_Wave+0x33c>)
 80020ac:	ed93 7a00 	vldr	s14, [r3]
 80020b0:	4b55      	ldr	r3, [pc, #340]	; (8002208 <Gen_Wave+0x340>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	ee17 0a90 	vmov	r0, s15
 80020be:	f7fe fa4b 	bl	8000558 <__aeabi_f2d>
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <Gen_Wave+0x360>)
 80020c8:	f7fe fa9e 	bl	8000608 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe f8e2 	bl	800029c <__adddf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	4618      	mov	r0, r3
 80020de:	4621      	mov	r1, r4
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <Gen_Wave+0x358>)
 80020e6:	f7fe fa8f 	bl	8000608 <__aeabi_dmul>
 80020ea:	4603      	mov	r3, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	4618      	mov	r0, r3
 80020f0:	4621      	mov	r1, r4
 80020f2:	a33d      	add	r3, pc, #244	; (adr r3, 80021e8 <Gen_Wave+0x320>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fbb0 	bl	800085c <__aeabi_ddiv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4618      	mov	r0, r3
 8002102:	4621      	mov	r1, r4
 8002104:	f7fe fd42 	bl	8000b8c <__aeabi_d2uiz>
 8002108:	4603      	mov	r3, r0
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <Gen_Wave+0x35c>)
 800210e:	801a      	strh	r2, [r3, #0]
		break;
 8002110:	e061      	b.n	80021d6 <Gen_Wave+0x30e>
		if(t <= T1){
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <Gen_Wave+0x338>)
 8002114:	ed93 7a00 	vldr	s14, [r3]
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <Gen_Wave+0x34c>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d81d      	bhi.n	8002164 <Gen_Wave+0x29c>
			dataOut = V_high*4096.0/3.3;
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <Gen_Wave+0x33c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa13 	bl	8000558 <__aeabi_f2d>
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <Gen_Wave+0x358>)
 8002138:	f7fe fa66 	bl	8000608 <__aeabi_dmul>
 800213c:	4603      	mov	r3, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4618      	mov	r0, r3
 8002142:	4621      	mov	r1, r4
 8002144:	a328      	add	r3, pc, #160	; (adr r3, 80021e8 <Gen_Wave+0x320>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fb87 	bl	800085c <__aeabi_ddiv>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	4618      	mov	r0, r3
 8002154:	4621      	mov	r1, r4
 8002156:	f7fe fd19 	bl	8000b8c <__aeabi_d2uiz>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <Gen_Wave+0x35c>)
 8002160:	801a      	strh	r2, [r3, #0]
		break;
 8002162:	e037      	b.n	80021d4 <Gen_Wave+0x30c>
		else if((t <= T) && (t > T1)){
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <Gen_Wave+0x338>)
 8002166:	ed93 7a00 	vldr	s14, [r3]
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <Gen_Wave+0x334>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002178:	d828      	bhi.n	80021cc <Gen_Wave+0x304>
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <Gen_Wave+0x338>)
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <Gen_Wave+0x34c>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	dd1d      	ble.n	80021cc <Gen_Wave+0x304>
			dataOut = V_low*4096.0/3.3;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <Gen_Wave+0x340>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9df 	bl	8000558 <__aeabi_f2d>
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <Gen_Wave+0x358>)
 80021a0:	f7fe fa32 	bl	8000608 <__aeabi_dmul>
 80021a4:	4603      	mov	r3, r0
 80021a6:	460c      	mov	r4, r1
 80021a8:	4618      	mov	r0, r3
 80021aa:	4621      	mov	r1, r4
 80021ac:	a30e      	add	r3, pc, #56	; (adr r3, 80021e8 <Gen_Wave+0x320>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe fb53 	bl	800085c <__aeabi_ddiv>
 80021b6:	4603      	mov	r3, r0
 80021b8:	460c      	mov	r4, r1
 80021ba:	4618      	mov	r0, r3
 80021bc:	4621      	mov	r1, r4
 80021be:	f7fe fce5 	bl	8000b8c <__aeabi_d2uiz>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <Gen_Wave+0x35c>)
 80021c8:	801a      	strh	r2, [r3, #0]
		break;
 80021ca:	e003      	b.n	80021d4 <Gen_Wave+0x30c>
			t = 0;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <Gen_Wave+0x338>)
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
		break;
 80021d4:	bf00      	nop
}
 80021d6:	bf00      	nop
 80021d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021dc:	f3af 8000 	nop.w
 80021e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80021e4:	3f50624d 	.word	0x3f50624d
 80021e8:	66666666 	.word	0x66666666
 80021ec:	400a6666 	.word	0x400a6666
 80021f0:	54442d18 	.word	0x54442d18
 80021f4:	401921fb 	.word	0x401921fb
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000100 	.word	0x20000100
 8002200:	20000108 	.word	0x20000108
 8002204:	2000000c 	.word	0x2000000c
 8002208:	200000fc 	.word	0x200000fc
 800220c:	200000f8 	.word	0x200000f8
 8002210:	20000010 	.word	0x20000010
 8002214:	20000104 	.word	0x20000104
 8002218:	200000f4 	.word	0x200000f4
 800221c:	20000014 	.word	0x20000014
 8002220:	40b00000 	.word	0x40b00000
 8002224:	200000b0 	.word	0x200000b0
 8002228:	3fe00000 	.word	0x3fe00000

0800222c <MCP4922SetOutput>:


void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	460a      	mov	r2, r1
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	4613      	mov	r3, r2
 800223a:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	031b      	lsls	r3, r3, #12
 8002246:	b29b      	uxth	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002252:	4807      	ldr	r0, [pc, #28]	; (8002270 <MCP4922SetOutput+0x44>)
 8002254:	f002 f88e 	bl	8004374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2201      	movs	r2, #1
 800225e:	4619      	mov	r1, r3
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <MCP4922SetOutput+0x48>)
 8002262:	f002 fd67 	bl	8004d34 <HAL_SPI_Transmit_IT>
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020400 	.word	0x40020400
 8002274:	20000168 	.word	0x20000168

08002278 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_SPI_TxCpltCallback+0x24>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d105      	bne.n	8002294 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <HAL_SPI_TxCpltCallback+0x28>)
 8002290:	f002 f870 	bl	8004374 <HAL_GPIO_WritePin>
	}
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000168 	.word	0x20000168
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10d      	bne.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		_micro += 65535;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80022b8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80022bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	eb1b 0301 	adds.w	r3, fp, r1
 80022c8:	eb4c 0402 	adc.w	r4, ip, r2
 80022cc:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80022ce:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000208 	.word	0x20000208
 80022e4:	200000a8 	.word	0x200000a8

080022e8 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80022ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f2:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <UARTRecieveIT+0x58>)
 80022f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <UARTRecieveIT+0x58>)
 80022fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	461a      	mov	r2, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <UARTRecieveIT+0x5c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d010      	beq.n	800232e <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <UARTRecieveIT+0x5c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <UARTRecieveIT+0x60>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <UARTRecieveIT+0x5c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a08      	ldr	r2, [pc, #32]	; (8002340 <UARTRecieveIT+0x58>)
 800231e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002320:	fbb3 f1f2 	udiv	r1, r3, r2
 8002324:	fb02 f201 	mul.w	r2, r2, r1
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <UARTRecieveIT+0x5c>)
 800232c:	6013      	str	r3, [r2, #0]
	}
	return data;
 800232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200002a8 	.word	0x200002a8
 8002344:	20000118 	.word	0x20000118
 8002348:	200000d4 	.word	0x200000d4

0800234c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_UART_RxCpltCallback+0x30>)
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_UART_RxCpltCallback+0x34>)
 8002358:	480a      	ldr	r0, [pc, #40]	; (8002384 <HAL_UART_RxCpltCallback+0x38>)
 800235a:	f004 fb4b 	bl	80069f4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <HAL_UART_RxCpltCallback+0x38>)
 8002360:	f7fd ff3e 	bl	80001e0 <strlen>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236c:	4905      	ldr	r1, [pc, #20]	; (8002384 <HAL_UART_RxCpltCallback+0x38>)
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_UART_RxCpltCallback+0x3c>)
 8002370:	f003 fc17 	bl	8005ba2 <HAL_UART_Transmit>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200000d4 	.word	0x200000d4
 8002380:	08008470 	.word	0x08008470
 8002384:	200000b4 	.word	0x200000b4
 8002388:	200002a8 	.word	0x200002a8

0800238c <micros>:
inline uint64_t micros()
{
 800238c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002390:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <micros+0x2c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <micros+0x30>)
 80023a0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80023a4:	eb1b 0301 	adds.w	r3, fp, r1
 80023a8:	eb4c 0402 	adc.w	r4, ip, r2
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	4621      	mov	r1, r4
 80023b0:	46bd      	mov	sp, r7
 80023b2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80023b6:	4770      	bx	lr
 80023b8:	20000208 	.word	0x20000208
 80023bc:	200000a8 	.word	0x200000a8

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023c6:	e7fe      	b.n	80023c6 <Error_Handler+0x6>

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <HAL_MspInit+0x4c>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_MspInit+0x4c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_MspInit+0x4c>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_MspInit+0x4c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002406:	2007      	movs	r0, #7
 8002408:	f001 fa48 	bl	800389c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a33      	ldr	r2, [pc, #204]	; (8002504 <HAL_ADC_MspInit+0xec>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d15f      	bne.n	80024fa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a31      	ldr	r2, [pc, #196]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_ADC_MspInit+0xf0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002472:	2301      	movs	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002476:	2303      	movs	r3, #3
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4821      	ldr	r0, [pc, #132]	; (800250c <HAL_ADC_MspInit+0xf4>)
 8002486:	f001 fddb 	bl	8004040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_ADC_MspInit+0xfc>)
 800248e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 8002492:	2200      	movs	r2, #0
 8002494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800249c:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024ce:	4810      	ldr	r0, [pc, #64]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024d0:	f001 fa26 	bl	8003920 <HAL_DMA_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80024da:	f7ff ff71 	bl	80023c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_ADC_MspInit+0xf8>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2012      	movs	r0, #18
 80024f0:	f001 f9df 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024f4:	2012      	movs	r0, #18
 80024f6:	f001 f9f8 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40012000 	.word	0x40012000
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000
 8002510:	20000248 	.word	0x20000248
 8002514:	40026410 	.word	0x40026410

08002518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_SPI_MspInit+0x94>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d133      	bne.n	80025a2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_SPI_MspInit+0x98>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_SPI_MspInit+0x98>)
 8002544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_SPI_MspInit+0x98>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_SPI_MspInit+0x98>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <HAL_SPI_MspInit+0x98>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_SPI_MspInit+0x98>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002572:	2338      	movs	r3, #56	; 0x38
 8002574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002582:	2306      	movs	r3, #6
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <HAL_SPI_MspInit+0x9c>)
 800258e:	f001 fd57 	bl	8004040 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2033      	movs	r0, #51	; 0x33
 8002598:	f001 f98b 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800259c:	2033      	movs	r0, #51	; 0x33
 800259e:	f001 f9a4 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40003c00 	.word	0x40003c00
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020400 	.word	0x40020400

080025b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_Base_MspInit+0x70>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_TIM_Base_MspInit+0x74>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_TIM_Base_MspInit+0x74>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_TIM_Base_MspInit+0x74>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80025e6:	e01a      	b.n	800261e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_TIM_Base_MspInit+0x78>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d115      	bne.n	800261e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_TIM_Base_MspInit+0x74>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_TIM_Base_MspInit+0x74>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_TIM_Base_MspInit+0x74>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	201a      	movs	r0, #26
 8002614:	f001 f94d 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002618:	201a      	movs	r0, #26
 800261a:	f001 f966 	bl	80038ea <HAL_NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40000400 	.word	0x40000400
 800262c:	40023800 	.word	0x40023800
 8002630:	40014800 	.word	0x40014800

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_UART_MspInit+0x94>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d133      	bne.n	80026be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_UART_MspInit+0x98>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_UART_MspInit+0x98>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_UART_MspInit+0x98>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800268e:	230c      	movs	r3, #12
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269e:	2307      	movs	r3, #7
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4809      	ldr	r0, [pc, #36]	; (80026d0 <HAL_UART_MspInit+0x9c>)
 80026aa:	f001 fcc9 	bl	8004040 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2026      	movs	r0, #38	; 0x26
 80026b4:	f001 f8fd 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026b8:	2026      	movs	r0, #38	; 0x26
 80026ba:	f001 f916 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40004400 	.word	0x40004400
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f000 f8fc 	bl	800291c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <ADC_IRQHandler+0x10>)
 800272e:	f000 f958 	bl	80029e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200001c0 	.word	0x200001c0

0800273c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002742:	f002 fe5e 	bl	8005402 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000208 	.word	0x20000208

08002750 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <USART2_IRQHandler+0x10>)
 8002756:	f003 fb13 	bl	8005d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002a8 	.word	0x200002a8

08002764 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <SPI3_IRQHandler+0x10>)
 800276a:	f002 fb65 	bl	8004e38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000168 	.word	0x20000168

08002778 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <DMA2_Stream0_IRQHandler+0x10>)
 800277e:	f001 f9f7 	bl	8003b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000248 	.word	0x20000248

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f004 f8dc 	bl	8006978 <__errno>
 80027c0:	4602      	mov	r2, r0
 80027c2:	230c      	movs	r3, #12
 80027c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20020000 	.word	0x20020000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	2000011c 	.word	0x2000011c
 80027f4:	200002f0 	.word	0x200002f0

080027f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <SystemInit+0x28>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <SystemInit+0x28>)
 8002804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SystemInit+0x28>)
 800280e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002812:	609a      	str	r2, [r3, #8]
#endif
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800285c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002828:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800282a:	e003      	b.n	8002834 <LoopCopyDataInit>

0800282c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800282e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002830:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002832:	3104      	adds	r1, #4

08002834 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002838:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800283a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800283c:	d3f6      	bcc.n	800282c <CopyDataInit>
  ldr  r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002840:	e002      	b.n	8002848 <LoopFillZerobss>

08002842 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002842:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002844:	f842 3b04 	str.w	r3, [r2], #4

08002848 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800284a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800284c:	d3f9      	bcc.n	8002842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800284e:	f7ff ffd3 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f004 f897 	bl	8006984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7fe fb8b 	bl	8000f70 <main>
  bx  lr    
 800285a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800285c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002860:	080086c0 	.word	0x080086c0
  ldr  r0, =_sdata
 8002864:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002868:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800286c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002870:	200002f0 	.word	0x200002f0

08002874 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <DMA1_Stream0_IRQHandler>
	...

08002878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_Init+0x40>)
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_Init+0x40>)
 800288e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_Init+0x40>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f000 fffb 	bl	800389c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f000 f808 	bl	80028bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ac:	f7ff fd8c 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_InitTick+0x54>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_InitTick+0x58>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f813 	bl	8003906 <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 ffdb 	bl	80038b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <HAL_InitTick+0x5c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000018 	.word	0x20000018
 8002914:	20000020 	.word	0x20000020
 8002918:	2000001c 	.word	0x2000001c

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000020 	.word	0x20000020
 8002940:	200002e8 	.word	0x200002e8

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200002e8 	.word	0x200002e8

0800295c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e033      	b.n	80029da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fd4c 	bl	8002418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029a2:	f023 0302 	bic.w	r3, r3, #2
 80029a6:	f043 0202 	orr.w	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fb86 	bl	80030c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
 80029ca:	e001      	b.n	80029d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d049      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0xd6>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d046      	beq.n	8002ab8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d12b      	bne.n	8002aa8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d127      	bne.n	8002aa8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d119      	bne.n	8002aa8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0220 	bic.w	r2, r2, #32
 8002a82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f9af 	bl	8002e0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0212 	mvn.w	r2, #18
 8002ab6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d057      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x1b8>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d054      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d139      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12b      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d124      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d119      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fc16 	bl	80033bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 020c 	mvn.w	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x21a>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d014      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10d      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f921 	bl	8002e34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f06f 0201 	mvn.w	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x27a>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d012      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0220 	mvn.w	r2, #32
 8002c4a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f8fb 	bl	8002e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0220 	mvn.w	r2, #32
 8002c5a:	601a      	str	r2, [r3, #0]
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x1e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0b1      	b.n	8002de6 <HAL_ADC_Start_DMA+0x182>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d018      	beq.n	8002cca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca8:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_ADC_Start_DMA+0x18c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_ADC_Start_DMA+0x190>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0c9a      	lsrs	r2, r3, #18
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	f040 8085 	bne.w	8002de4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d106      	bne.n	8002d28 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f023 0206 	bic.w	r2, r3, #6
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
 8002d26:	e002      	b.n	8002d2e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d36:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_ADC_Start_DMA+0x194>)
 8002d38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <HAL_ADC_Start_DMA+0x198>)
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <HAL_ADC_Start_DMA+0x19c>)
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	4a2d      	ldr	r2, [pc, #180]	; (8002e04 <HAL_ADC_Start_DMA+0x1a0>)
 8002d50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	334c      	adds	r3, #76	; 0x4c
 8002d86:	4619      	mov	r1, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f000 fe76 	bl	8003a7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10f      	bne.n	8002dbc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11c      	bne.n	8002de4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	e013      	b.n	8002de4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_ADC_Start_DMA+0x1a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10e      	bne.n	8002de4 <HAL_ADC_Start_DMA+0x180>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002de2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000018 	.word	0x20000018
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	080032b9 	.word	0x080032b9
 8002e00:	08003373 	.word	0x08003373
 8002e04:	0800338f 	.word	0x0800338f
 8002e08:	40012000 	.word	0x40012000

08002e0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e113      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x244>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d925      	bls.n	8002ed4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68d9      	ldr	r1, [r3, #12]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b1e      	subs	r3, #30
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3b1e      	subs	r3, #30
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	e022      	b.n	8002f1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6919      	ldr	r1, [r3, #16]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2207      	movs	r2, #7
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6919      	ldr	r1, [r3, #16]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4403      	add	r3, r0
 8002f10:	409a      	lsls	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d824      	bhi.n	8002f6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	3b05      	subs	r3, #5
 8002f34:	221f      	movs	r2, #31
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	400a      	ands	r2, r1
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b05      	subs	r3, #5
 8002f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34
 8002f6a:	e04c      	b.n	8003006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d824      	bhi.n	8002fbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	3b23      	subs	r3, #35	; 0x23
 8002f86:	221f      	movs	r2, #31
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	400a      	ands	r2, r1
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b23      	subs	r3, #35	; 0x23
 8002fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	e023      	b.n	8003006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b41      	subs	r3, #65	; 0x41
 8002fd0:	221f      	movs	r2, #31
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	400a      	ands	r2, r1
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b41      	subs	r3, #65	; 0x41
 8002ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_ADC_ConfigChannel+0x250>)
 8003008:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <HAL_ADC_ConfigChannel+0x254>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10f      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1d8>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b12      	cmp	r3, #18
 800301a:	d10b      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_ADC_ConfigChannel+0x254>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d12b      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x23a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_ADC_ConfigChannel+0x258>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x1f4>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b11      	cmp	r3, #17
 800304e:	d122      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <HAL_ADC_ConfigChannel+0x258>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d111      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_ADC_ConfigChannel+0x25c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a11      	ldr	r2, [pc, #68]	; (80030bc <HAL_ADC_ConfigChannel+0x260>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	0c9a      	lsrs	r2, r3, #18
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003088:	e002      	b.n	8003090 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	3b01      	subs	r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f9      	bne.n	800308a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40012300 	.word	0x40012300
 80030b0:	40012000 	.word	0x40012000
 80030b4:	10000012 	.word	0x10000012
 80030b8:	20000018 	.word	0x20000018
 80030bc:	431bde83 	.word	0x431bde83

080030c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c8:	4b79      	ldr	r3, [pc, #484]	; (80032b0 <ADC_Init+0x1f0>)
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003118:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <ADC_Init+0x1f4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003166:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003188:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	e00f      	b.n	80031be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0202 	bic.w	r2, r2, #2
 80031cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7e1b      	ldrb	r3, [r3, #24]
 80031d8:	005a      	lsls	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800320a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	3b01      	subs	r3, #1
 8003218:	035a      	lsls	r2, r3, #13
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	e007      	b.n	8003234 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003232:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	3b01      	subs	r3, #1
 8003250:	051a      	lsls	r2, r3, #20
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003276:	025a      	lsls	r2, r3, #9
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6899      	ldr	r1, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	029a      	lsls	r2, r3, #10
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40012300 	.word	0x40012300
 80032b4:	0f000001 	.word	0x0f000001

080032b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d13c      	bne.n	800334c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d12b      	bne.n	8003344 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d127      	bne.n	8003344 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d006      	beq.n	8003310 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800330c:	2b00      	cmp	r3, #0
 800330e:	d119      	bne.n	8003344 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0220 	bic.w	r2, r2, #32
 800331e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff fd61 	bl	8002e0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800334a:	e00e      	b.n	800336a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fd75 	bl	8002e48 <HAL_ADC_ErrorCallback>
}
 800335e:	e004      	b.n	800336a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fd4d 	bl	8002e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f043 0204 	orr.w	r2, r3, #4
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff fd4a 	bl	8002e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e17b      	b.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x310>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	d925      	bls.n	8003444 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	3b1e      	subs	r3, #30
 800340e:	2207      	movs	r2, #7
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43da      	mvns	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	400a      	ands	r2, r1
 800341c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68d9      	ldr	r1, [r3, #12]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	4618      	mov	r0, r3
 8003430:	4603      	mov	r3, r0
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4403      	add	r3, r0
 8003436:	3b1e      	subs	r3, #30
 8003438:	409a      	lsls	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e022      	b.n	800348a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	2207      	movs	r2, #7
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	400a      	ands	r2, r1
 8003466:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6919      	ldr	r1, [r3, #16]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	4603      	mov	r3, r0
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4403      	add	r3, r0
 8003480:	409a      	lsls	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	051a      	lsls	r2, r3, #20
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3303      	adds	r3, #3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	221f      	movs	r2, #31
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43da      	mvns	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	400a      	ands	r2, r1
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	4618      	mov	r0, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3303      	adds	r3, #3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	fa00 f203 	lsl.w	r2, r0, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	4a73      	ldr	r2, [pc, #460]	; (80036ec <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	e00f      	b.n	8003588 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003586:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	7d5b      	ldrb	r3, [r3, #21]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	e007      	b.n	80035b2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	7d1b      	ldrb	r3, [r3, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e007      	b.n	80035dc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035da:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d017      	beq.n	8003614 <HAL_ADCEx_InjectedConfigChannel+0x244>
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d029      	beq.n	800363c <HAL_ADCEx_InjectedConfigChannel+0x26c>
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d13b      	bne.n	8003664 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80035fa:	f023 030f 	bic.w	r3, r3, #15
 80035fe:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6959      	ldr	r1, [r3, #20]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	615a      	str	r2, [r3, #20]
      break;
 8003612:	e03b      	b.n	800368c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003622:	f023 030f 	bic.w	r3, r3, #15
 8003626:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
      break;
 800363a:	e027      	b.n	800368c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800364a:	f023 030f 	bic.w	r3, r3, #15
 800364e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69d9      	ldr	r1, [r3, #28]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	61da      	str	r2, [r3, #28]
      break;
 8003662:	e013      	b.n	800368c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003672:	f023 030f 	bic.w	r3, r3, #15
 8003676:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a19      	ldr	r1, [r3, #32]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	621a      	str	r2, [r3, #32]
      break;
 800368a:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800368e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d109      	bne.n	80036ae <HAL_ADCEx_InjectedConfigChannel+0x2de>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b12      	cmp	r3, #18
 80036a0:	d105      	bne.n	80036ae <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10e      	bne.n	80036d6 <HAL_ADCEx_InjectedConfigChannel+0x306>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <HAL_ADCEx_InjectedConfigChannel+0x2fa>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b11      	cmp	r3, #17
 80036c8:	d105      	bne.n	80036d6 <HAL_ADCEx_InjectedConfigChannel+0x306>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	000f0001 	.word	0x000f0001
 80036f0:	40012300 	.word	0x40012300
 80036f4:	40012000 	.word	0x40012000
 80036f8:	10000012 	.word	0x10000012

080036fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	60d3      	str	r3, [r2, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <__NVIC_GetPriorityGrouping+0x18>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 0307 	and.w	r3, r3, #7
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db0b      	blt.n	800378a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4907      	ldr	r1, [pc, #28]	; (8003798 <__NVIC_EnableIRQ+0x38>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2001      	movs	r0, #1
 8003782:	fa00 f202 	lsl.w	r2, r0, r2
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000e100 	.word	0xe000e100

0800379c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	db0a      	blt.n	80037c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	490c      	ldr	r1, [pc, #48]	; (80037e8 <__NVIC_SetPriority+0x4c>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	440b      	add	r3, r1
 80037c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c4:	e00a      	b.n	80037dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4908      	ldr	r1, [pc, #32]	; (80037ec <__NVIC_SetPriority+0x50>)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3b04      	subs	r3, #4
 80037d4:	0112      	lsls	r2, r2, #4
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	440b      	add	r3, r1
 80037da:	761a      	strb	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f1c3 0307 	rsb	r3, r3, #7
 800380a:	2b04      	cmp	r3, #4
 800380c:	bf28      	it	cs
 800380e:	2304      	movcs	r3, #4
 8003810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3304      	adds	r3, #4
 8003816:	2b06      	cmp	r3, #6
 8003818:	d902      	bls.n	8003820 <NVIC_EncodePriority+0x30>
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3b03      	subs	r3, #3
 800381e:	e000      	b.n	8003822 <NVIC_EncodePriority+0x32>
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	401a      	ands	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003838:	f04f 31ff 	mov.w	r1, #4294967295
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	43d9      	mvns	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	4313      	orrs	r3, r2
         );
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003868:	d301      	bcc.n	800386e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800386a:	2301      	movs	r3, #1
 800386c:	e00f      	b.n	800388e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <SysTick_Config+0x40>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003876:	210f      	movs	r1, #15
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f7ff ff8e 	bl	800379c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SysTick_Config+0x40>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <SysTick_Config+0x40>)
 8003888:	2207      	movs	r2, #7
 800388a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000e010 	.word	0xe000e010

0800389c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff29 	bl	80036fc <__NVIC_SetPriorityGrouping>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c4:	f7ff ff3e 	bl	8003744 <__NVIC_GetPriorityGrouping>
 80038c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7ff ff8e 	bl	80037f0 <NVIC_EncodePriority>
 80038d4:	4602      	mov	r2, r0
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff5d 	bl	800379c <__NVIC_SetPriority>
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff31 	bl	8003760 <__NVIC_EnableIRQ>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffa2 	bl	8003858 <SysTick_Config>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800392c:	f7ff f80a 	bl	8002944 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e099      	b.n	8003a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395c:	e00f      	b.n	800397e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800395e:	f7fe fff1 	bl	8002944 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b05      	cmp	r3, #5
 800396a:	d908      	bls.n	800397e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e078      	b.n	8003a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e8      	bne.n	800395e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <HAL_DMA_Init+0x158>)
 8003998:	4013      	ands	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d107      	bne.n	80039e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	4313      	orrs	r3, r2
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d117      	bne.n	8003a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fa91 	bl	8003f4c <DMA_CheckFifoParam>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e016      	b.n	8003a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa48 	bl	8003ee0 <DMA_CalcBaseAndBitshift>
 8003a50:	4603      	mov	r3, r0
 8003a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	223f      	movs	r2, #63	; 0x3f
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	f010803f 	.word	0xf010803f

08003a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Start_IT+0x26>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e040      	b.n	8003b24 <HAL_DMA_Start_IT+0xa8>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d12f      	bne.n	8003b16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f9da 	bl	8003e84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	223f      	movs	r2, #63	; 0x3f
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0216 	orr.w	r2, r2, #22
 8003aea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0208 	orr.w	r2, r2, #8
 8003b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e005      	b.n	8003b22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00c      	b.n	8003b64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2205      	movs	r2, #5
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b7c:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <HAL_DMA_IRQHandler+0x258>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a92      	ldr	r2, [pc, #584]	; (8003dcc <HAL_DMA_IRQHandler+0x25c>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0a9b      	lsrs	r3, r3, #10
 8003b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01a      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	2208      	movs	r2, #8
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d012      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	2201      	movs	r2, #1
 8003c00:	409a      	lsls	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0202 	orr.w	r2, r3, #2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	2204      	movs	r2, #4
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d012      	beq.n	8003c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	2204      	movs	r2, #4
 8003c36:	409a      	lsls	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d043      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03c      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d024      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
 8003c9e:	e01f      	b.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	e016      	b.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0208 	bic.w	r2, r2, #8
 8003cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 808e 	beq.w	8003e0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8086 	beq.w	8003e0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	2220      	movs	r2, #32
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d136      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0216 	bic.w	r2, r2, #22
 8003d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <HAL_DMA_IRQHandler+0x1da>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0208 	bic.w	r2, r2, #8
 8003d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	223f      	movs	r2, #63	; 0x3f
 8003d60:	409a      	lsls	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d07d      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
        }
        return;
 8003d86:	e078      	b.n	8003e7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01c      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d108      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d030      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
 8003db4:	e02b      	b.n	8003e0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d027      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
 8003dc6:	e022      	b.n	8003e0e <HAL_DMA_IRQHandler+0x29e>
 8003dc8:	20000018 	.word	0x20000018
 8003dcc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0210 	bic.w	r2, r2, #16
 8003dec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d032      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d022      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2205      	movs	r2, #5
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d307      	bcc.n	8003e56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f2      	bne.n	8003e3a <HAL_DMA_IRQHandler+0x2ca>
 8003e54:	e000      	b.n	8003e58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
 8003e78:	e000      	b.n	8003e7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e7a:	bf00      	nop
    }
  }
}
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop

08003e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d108      	bne.n	8003ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ec2:	e007      	b.n	8003ed4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	3b10      	subs	r3, #16
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <DMA_CalcBaseAndBitshift+0x64>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <DMA_CalcBaseAndBitshift+0x68>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d909      	bls.n	8003f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	1d1a      	adds	r2, r3, #4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f20:	e007      	b.n	8003f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	aaaaaaab 	.word	0xaaaaaaab
 8003f48:	08008498 	.word	0x08008498

08003f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11f      	bne.n	8003fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d855      	bhi.n	8004018 <DMA_CheckFifoParam+0xcc>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <DMA_CheckFifoParam+0x28>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f97 	.word	0x08003f97
 8003f7c:	08003f85 	.word	0x08003f85
 8003f80:	08004019 	.word	0x08004019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d045      	beq.n	800401c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f94:	e042      	b.n	800401c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f9e:	d13f      	bne.n	8004020 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa4:	e03c      	b.n	8004020 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	d121      	bne.n	8003ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d836      	bhi.n	8004024 <DMA_CheckFifoParam+0xd8>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <DMA_CheckFifoParam+0x70>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fd3 	.word	0x08003fd3
 8003fc4:	08003fcd 	.word	0x08003fcd
 8003fc8:	08003fe5 	.word	0x08003fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd0:	e02f      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d024      	beq.n	8004028 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe2:	e021      	b.n	8004028 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fec:	d11e      	bne.n	800402c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ff2:	e01b      	b.n	800402c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <DMA_CheckFifoParam+0xb4>
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d003      	beq.n	8004006 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ffe:	e018      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	e015      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00e      	beq.n	8004030 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      break;
 8004016:	e00b      	b.n	8004030 <DMA_CheckFifoParam+0xe4>
      break;
 8004018:	bf00      	nop
 800401a:	e00a      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      break;
 800401c:	bf00      	nop
 800401e:	e008      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      break;
 8004020:	bf00      	nop
 8004022:	e006      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      break;
 8004024:	bf00      	nop
 8004026:	e004      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      break;
 8004028:	bf00      	nop
 800402a:	e002      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      break;   
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <DMA_CheckFifoParam+0xe6>
      break;
 8004030:	bf00      	nop
    }
  } 
  
  return status; 
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e159      	b.n	8004310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	f040 8148 	bne.w	800430a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d00b      	beq.n	800409a <HAL_GPIO_Init+0x5a>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800408e:	2b11      	cmp	r3, #17
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b12      	cmp	r3, #18
 8004098:	d130      	bne.n	80040fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040d0:	2201      	movs	r2, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 0201 	and.w	r2, r3, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0xfc>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b12      	cmp	r3, #18
 800413a:	d123      	bne.n	8004184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	220f      	movs	r2, #15
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a2 	beq.w	800430a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_GPIO_Init+0x2e4>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	4a55      	ldr	r2, [pc, #340]	; (8004324 <HAL_GPIO_Init+0x2e4>)
 80041d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d4:	6453      	str	r3, [r2, #68]	; 0x44
 80041d6:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_GPIO_Init+0x2e4>)
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e2:	4a51      	ldr	r2, [pc, #324]	; (8004328 <HAL_GPIO_Init+0x2e8>)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	3302      	adds	r3, #2
 80041ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a48      	ldr	r2, [pc, #288]	; (800432c <HAL_GPIO_Init+0x2ec>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d019      	beq.n	8004242 <HAL_GPIO_Init+0x202>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a47      	ldr	r2, [pc, #284]	; (8004330 <HAL_GPIO_Init+0x2f0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_GPIO_Init+0x1fe>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a46      	ldr	r2, [pc, #280]	; (8004334 <HAL_GPIO_Init+0x2f4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00d      	beq.n	800423a <HAL_GPIO_Init+0x1fa>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a45      	ldr	r2, [pc, #276]	; (8004338 <HAL_GPIO_Init+0x2f8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <HAL_GPIO_Init+0x1f6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a44      	ldr	r2, [pc, #272]	; (800433c <HAL_GPIO_Init+0x2fc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d101      	bne.n	8004232 <HAL_GPIO_Init+0x1f2>
 800422e:	2304      	movs	r3, #4
 8004230:	e008      	b.n	8004244 <HAL_GPIO_Init+0x204>
 8004232:	2307      	movs	r3, #7
 8004234:	e006      	b.n	8004244 <HAL_GPIO_Init+0x204>
 8004236:	2303      	movs	r3, #3
 8004238:	e004      	b.n	8004244 <HAL_GPIO_Init+0x204>
 800423a:	2302      	movs	r3, #2
 800423c:	e002      	b.n	8004244 <HAL_GPIO_Init+0x204>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_GPIO_Init+0x204>
 8004242:	2300      	movs	r3, #0
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f002 0203 	and.w	r2, r2, #3
 800424a:	0092      	lsls	r2, r2, #2
 800424c:	4093      	lsls	r3, r2
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004254:	4934      	ldr	r1, [pc, #208]	; (8004328 <HAL_GPIO_Init+0x2e8>)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	3302      	adds	r3, #2
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004262:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_GPIO_Init+0x300>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004286:	4a2e      	ldr	r2, [pc, #184]	; (8004340 <HAL_GPIO_Init+0x300>)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_GPIO_Init+0x300>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b0:	4a23      	ldr	r2, [pc, #140]	; (8004340 <HAL_GPIO_Init+0x300>)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_GPIO_Init+0x300>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042da:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_GPIO_Init+0x300>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <HAL_GPIO_Init+0x300>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004304:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <HAL_GPIO_Init+0x300>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3301      	adds	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b0f      	cmp	r3, #15
 8004314:	f67f aea2 	bls.w	800405c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004318:	bf00      	nop
 800431a:	3724      	adds	r7, #36	; 0x24
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40023800 	.word	0x40023800
 8004328:	40013800 	.word	0x40013800
 800432c:	40020000 	.word	0x40020000
 8004330:	40020400 	.word	0x40020400
 8004334:	40020800 	.word	0x40020800
 8004338:	40020c00 	.word	0x40020c00
 800433c:	40021000 	.word	0x40021000
 8004340:	40013c00 	.word	0x40013c00

08004344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e001      	b.n	8004366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
 8004380:	4613      	mov	r3, r2
 8004382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004384:	787b      	ldrb	r3, [r7, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004390:	e003      	b.n	800439a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	041a      	lsls	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	619a      	str	r2, [r3, #24]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e25b      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	4ba3      	ldr	r3, [pc, #652]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4ba0      	ldr	r3, [pc, #640]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b9d      	ldr	r3, [pc, #628]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b99      	ldr	r3, [pc, #612]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e236      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x74>
 800440e:	4b91      	ldr	r3, [pc, #580]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a90      	ldr	r2, [pc, #576]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x98>
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a8a      	ldr	r2, [pc, #552]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a87      	ldr	r2, [pc, #540]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 8004440:	4b84      	ldr	r3, [pc, #528]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a83      	ldr	r2, [pc, #524]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b81      	ldr	r3, [pc, #516]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a80      	ldr	r2, [pc, #512]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe fa70 	bl	8002944 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fe fa6c 	bl	8002944 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1fb      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b76      	ldr	r3, [pc, #472]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xc0>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fe fa5c 	bl	8002944 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004490:	f7fe fa58 	bl	8002944 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1e7      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b6c      	ldr	r3, [pc, #432]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0xe8>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	4b65      	ldr	r3, [pc, #404]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b62      	ldr	r3, [pc, #392]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1bb      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b56      	ldr	r3, [pc, #344]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4952      	ldr	r1, [pc, #328]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <HAL_RCC_OscConfig+0x2b0>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fe fa11 	bl	8002944 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004526:	f7fe fa0d 	bl	8002944 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e19c      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b46      	ldr	r3, [pc, #280]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b43      	ldr	r3, [pc, #268]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4940      	ldr	r1, [pc, #256]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b3f      	ldr	r3, [pc, #252]	; (8004658 <HAL_RCC_OscConfig+0x2b0>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe f9f0 	bl	8002944 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004568:	f7fe f9ec 	bl	8002944 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e17b      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d030      	beq.n	80045f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <HAL_RCC_OscConfig+0x2b4>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fe f9d0 	bl	8002944 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fe f9cc 	bl	8002944 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e15b      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x200>
 80045c6:	e015      	b.n	80045f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_RCC_OscConfig+0x2b4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe f9b9 	bl	8002944 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fe f9b5 	bl	8002944 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e144      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80a0 	beq.w	8004742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_OscConfig+0x2b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d121      	bne.n	8004682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_RCC_OscConfig+0x2b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a07      	ldr	r2, [pc, #28]	; (8004660 <HAL_RCC_OscConfig+0x2b8>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fe f97b 	bl	8002944 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e011      	b.n	8004676 <HAL_RCC_OscConfig+0x2ce>
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	42470000 	.word	0x42470000
 800465c:	42470e80 	.word	0x42470e80
 8004660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fe f96e 	bl	8002944 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0fd      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b81      	ldr	r3, [pc, #516]	; (800487c <HAL_RCC_OscConfig+0x4d4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d106      	bne.n	8004698 <HAL_RCC_OscConfig+0x2f0>
 800468a:	4b7d      	ldr	r3, [pc, #500]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a7c      	ldr	r2, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	e01c      	b.n	80046d2 <HAL_RCC_OscConfig+0x32a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d10c      	bne.n	80046ba <HAL_RCC_OscConfig+0x312>
 80046a0:	4b77      	ldr	r3, [pc, #476]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a76      	ldr	r2, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046a6:	f043 0304 	orr.w	r3, r3, #4
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b74      	ldr	r3, [pc, #464]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a73      	ldr	r2, [pc, #460]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	e00b      	b.n	80046d2 <HAL_RCC_OscConfig+0x32a>
 80046ba:	4b71      	ldr	r3, [pc, #452]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a70      	ldr	r2, [pc, #448]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
 80046c6:	4b6e      	ldr	r3, [pc, #440]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a6d      	ldr	r2, [pc, #436]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fe f933 	bl	8002944 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fe f92f 	bl	8002944 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0bc      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b61      	ldr	r3, [pc, #388]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCC_OscConfig+0x33a>
 8004704:	e014      	b.n	8004730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fe f91d 	bl	8002944 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fe f919 	bl	8002944 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0a6      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	4b56      	ldr	r3, [pc, #344]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ee      	bne.n	800470e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b52      	ldr	r3, [pc, #328]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a51      	ldr	r2, [pc, #324]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8092 	beq.w	8004870 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474c:	4b4c      	ldr	r3, [pc, #304]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d05c      	beq.n	8004812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d141      	bne.n	80047e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCC_OscConfig+0x4dc>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fe f8ed 	bl	8002944 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fe f8e9 	bl	8002944 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e078      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004780:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f0      	bne.n	800476e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	019b      	lsls	r3, r3, #6
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	4933      	ldr	r1, [pc, #204]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b6:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCC_OscConfig+0x4dc>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fe f8c2 	bl	8002944 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fe f8be 	bl	8002944 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04d      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x41c>
 80047e2:	e045      	b.n	8004870 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b27      	ldr	r3, [pc, #156]	; (8004884 <HAL_RCC_OscConfig+0x4dc>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fe f8ab 	bl	8002944 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fe f8a7 	bl	8002944 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e036      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x44a>
 8004810:	e02e      	b.n	8004870 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e029      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCC_OscConfig+0x4d8>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	429a      	cmp	r2, r3
 8004830:	d11c      	bne.n	800486c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d115      	bne.n	800486c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800484c:	4293      	cmp	r3, r2
 800484e:	d10d      	bne.n	800486c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d106      	bne.n	800486c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40007000 	.word	0x40007000
 8004880:	40023800 	.word	0x40023800
 8004884:	42470060 	.word	0x42470060

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0cc      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d90c      	bls.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b65      	ldr	r3, [pc, #404]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0b8      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048dc:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f4:	4b53      	ldr	r3, [pc, #332]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a52      	ldr	r2, [pc, #328]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004900:	4b50      	ldr	r3, [pc, #320]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	494d      	ldr	r1, [pc, #308]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d044      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b47      	ldr	r3, [pc, #284]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d119      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d003      	beq.n	8004946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	2b03      	cmp	r3, #3
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	4b3f      	ldr	r3, [pc, #252]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004956:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e067      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4934      	ldr	r1, [pc, #208]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004978:	f7fd ffe4 	bl	8002944 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fd ffe0 	bl	8002944 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e04f      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 020c 	and.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1eb      	bne.n	8004980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d20c      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e032      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4916      	ldr	r1, [pc, #88]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490e      	ldr	r1, [pc, #56]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0e:	f000 f821 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a12:	4601      	mov	r1, r0
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	5cd3      	ldrb	r3, [r2, r3]
 8004a22:	fa21 f303 	lsr.w	r3, r1, r3
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd ff44 	bl	80028bc <HAL_InitTick>

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023c00 	.word	0x40023c00
 8004a44:	40023800 	.word	0x40023800
 8004a48:	08008480 	.word	0x08008480
 8004a4c:	20000018 	.word	0x20000018
 8004a50:	2000001c 	.word	0x2000001c

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	2300      	movs	r3, #0
 8004a64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6a:	4b63      	ldr	r3, [pc, #396]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d007      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x32>
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d008      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x38>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 80b4 	bne.w	8004be8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a82:	60bb      	str	r3, [r7, #8]
       break;
 8004a84:	e0b3      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a86:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a88:	60bb      	str	r3, [r7, #8]
      break;
 8004a8a:	e0b0      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a8c:	4b5a      	ldr	r3, [pc, #360]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a96:	4b58      	ldr	r3, [pc, #352]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d04a      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa2:	4b55      	ldr	r3, [pc, #340]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	ea03 0501 	and.w	r5, r3, r1
 8004ab8:	ea04 0602 	and.w	r6, r4, r2
 8004abc:	4629      	mov	r1, r5
 8004abe:	4632      	mov	r2, r6
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f04f 0400 	mov.w	r4, #0
 8004ac8:	0154      	lsls	r4, r2, #5
 8004aca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ace:	014b      	lsls	r3, r1, #5
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	1b49      	subs	r1, r1, r5
 8004ad6:	eb62 0206 	sbc.w	r2, r2, r6
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	f04f 0400 	mov.w	r4, #0
 8004ae2:	0194      	lsls	r4, r2, #6
 8004ae4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ae8:	018b      	lsls	r3, r1, #6
 8004aea:	1a5b      	subs	r3, r3, r1
 8004aec:	eb64 0402 	sbc.w	r4, r4, r2
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	00e2      	lsls	r2, r4, #3
 8004afa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004afe:	00d9      	lsls	r1, r3, #3
 8004b00:	460b      	mov	r3, r1
 8004b02:	4614      	mov	r4, r2
 8004b04:	195b      	adds	r3, r3, r5
 8004b06:	eb44 0406 	adc.w	r4, r4, r6
 8004b0a:	f04f 0100 	mov.w	r1, #0
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	0262      	lsls	r2, r4, #9
 8004b14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b18:	0259      	lsls	r1, r3, #9
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	4621      	mov	r1, r4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f04f 0400 	mov.w	r4, #0
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	f7fc f89e 	bl	8000c6c <__aeabi_uldivmod>
 8004b30:	4603      	mov	r3, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e049      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b38:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	f04f 0400 	mov.w	r4, #0
 8004b42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	ea03 0501 	and.w	r5, r3, r1
 8004b4e:	ea04 0602 	and.w	r6, r4, r2
 8004b52:	4629      	mov	r1, r5
 8004b54:	4632      	mov	r2, r6
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	f04f 0400 	mov.w	r4, #0
 8004b5e:	0154      	lsls	r4, r2, #5
 8004b60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b64:	014b      	lsls	r3, r1, #5
 8004b66:	4619      	mov	r1, r3
 8004b68:	4622      	mov	r2, r4
 8004b6a:	1b49      	subs	r1, r1, r5
 8004b6c:	eb62 0206 	sbc.w	r2, r2, r6
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	f04f 0400 	mov.w	r4, #0
 8004b78:	0194      	lsls	r4, r2, #6
 8004b7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b7e:	018b      	lsls	r3, r1, #6
 8004b80:	1a5b      	subs	r3, r3, r1
 8004b82:	eb64 0402 	sbc.w	r4, r4, r2
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	00e2      	lsls	r2, r4, #3
 8004b90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b94:	00d9      	lsls	r1, r3, #3
 8004b96:	460b      	mov	r3, r1
 8004b98:	4614      	mov	r4, r2
 8004b9a:	195b      	adds	r3, r3, r5
 8004b9c:	eb44 0406 	adc.w	r4, r4, r6
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	02a2      	lsls	r2, r4, #10
 8004baa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bae:	0299      	lsls	r1, r3, #10
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f04f 0400 	mov.w	r4, #0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	f7fc f853 	bl	8000c6c <__aeabi_uldivmod>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	60bb      	str	r3, [r7, #8]
      break;
 8004be6:	e002      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bea:	60bb      	str	r3, [r7, #8]
      break;
 8004bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bee:	68bb      	ldr	r3, [r7, #8]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000018 	.word	0x20000018

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4601      	mov	r1, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a9b      	lsrs	r3, r3, #10
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5cd3      	ldrb	r3, [r2, r3]
 8004c34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	08008490 	.word	0x08008490

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c48:	f7ff ffdc 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0b5b      	lsrs	r3, r3, #13
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4a03      	ldr	r2, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	08008490 	.word	0x08008490

08004c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e056      	b.n	8004d2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fd fc3d 	bl	8002518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 0104 	and.w	r1, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_SPI_Transmit_IT+0x20>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e067      	b.n	8004e24 <HAL_SPI_Transmit_IT+0xf0>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_SPI_Transmit_IT+0x34>
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d6c:	e055      	b.n	8004e1a <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d7e:	e04c      	b.n	8004e1a <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2203      	movs	r2, #3
 8004d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	88fa      	ldrh	r2, [r7, #6]
 8004d9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_SPI_Transmit_IT+0xfc>)
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
 8004dc6:	e002      	b.n	8004dce <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	; (8004e34 <HAL_SPI_Transmit_IT+0x100>)
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd6:	d107      	bne.n	8004de8 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004df6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d008      	beq.n	8004e18 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e000      	b.n	8004e1a <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004e18:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	080050bb 	.word	0x080050bb
 8004e34:	08005075 	.word	0x08005075

08004e38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
    return;
 8004e7a:	e0d8      	b.n	800502e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x66>
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	09db      	lsrs	r3, r3, #7
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
    return;
 8004e9c:	e0c7      	b.n	800502e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_SPI_IRQHandler+0x8c>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80b5 	beq.w	800502e <HAL_SPI_IRQHandler+0x1f6>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80ae 	beq.w	800502e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d023      	beq.n	8004f26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d011      	beq.n	8004f0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	e00b      	b.n	8004f26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	693b      	ldr	r3, [r7, #16]
        return;
 8004f24:	e083      	b.n	800502e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f043 0208 	orr.w	r2, r3, #8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]
 8004f80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d050      	beq.n	800502c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_SPI_IRQHandler+0x17e>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d034      	beq.n	8005020 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0203 	bic.w	r2, r2, #3
 8004fc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <HAL_SPI_IRQHandler+0x1fc>)
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fda6 	bl	8003b2c <HAL_DMA_Abort_IT>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	4a0d      	ldr	r2, [pc, #52]	; (8005034 <HAL_SPI_IRQHandler+0x1fc>)
 8005000:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fd90 	bl	8003b2c <HAL_DMA_Abort_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800501e:	e003      	b.n	8005028 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f809 	bl	8005038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005026:	e000      	b.n	800502a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005028:	bf00      	nop
    return;
 800502a:	bf00      	nop
 800502c:	bf00      	nop
  }
}
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	0800504d 	.word	0x0800504d

08005038 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ffe6 	bl	8005038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f8d3 	bl	8005258 <SPI_CloseTx_ISR>
  }
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	881a      	ldrh	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f8b1 	bl	8005258 <SPI_CloseTx_ISR>
  }
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510e:	e04c      	b.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d048      	beq.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005118:	f7fd fc14 	bl	8002944 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d902      	bls.n	800512e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d13d      	bne.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800513c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005146:	d111      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005150:	d004      	beq.n	800515c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515a:	d107      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005174:	d10f      	bne.n	8005196 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00f      	b.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d1a3      	bne.n	8005110 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <SPI_EndRxTxTransaction+0x7c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <SPI_EndRxTxTransaction+0x80>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	0d5b      	lsrs	r3, r3, #21
 80051ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fe:	d112      	bne.n	8005226 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2200      	movs	r2, #0
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff ff77 	bl	80050fe <SPI_WaitFlagStateUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e00f      	b.n	8005246 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3b01      	subs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d0f2      	beq.n	8005226 <SPI_EndRxTxTransaction+0x52>
 8005240:	e000      	b.n	8005244 <SPI_EndRxTxTransaction+0x70>
        break;
 8005242:	bf00      	nop
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000018 	.word	0x20000018
 8005254:	165e9f81 	.word	0x165e9f81

08005258 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005260:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <SPI_CloseTx_ISR+0xbc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2c      	ldr	r2, [pc, #176]	; (8005318 <SPI_CloseTx_ISR+0xc0>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	2264      	movs	r2, #100	; 0x64
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005274:	f7fd fb66 	bl	8002944 <HAL_GetTick>
 8005278:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800528c:	e009      	b.n	80052a2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3b01      	subs	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0eb      	beq.n	800527a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	2164      	movs	r1, #100	; 0x64
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff ff8c 	bl	80051d4 <SPI_EndRxTxTransaction>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fe9b 	bl	8005038 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005302:	e002      	b.n	800530a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fc ffb7 	bl	8002278 <HAL_SPI_TxCpltCallback>
}
 800530a:	bf00      	nop
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000018 	.word	0x20000018
 8005318:	057619f1 	.word	0x057619f1

0800531c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e01d      	b.n	800536a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fd f938 	bl	80025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f000 fa38 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b06      	cmp	r3, #6
 8005392:	d007      	beq.n	80053a4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d122      	bne.n	800545e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d11b      	bne.n	800545e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0202 	mvn.w	r2, #2
 800542e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9a5 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 800544a:	e005      	b.n	8005458 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f997 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9a8 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d122      	bne.n	80054b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d11b      	bne.n	80054b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0204 	mvn.w	r2, #4
 8005482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f97b 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 800549e:	e005      	b.n	80054ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f96d 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f97e 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d122      	bne.n	8005506 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d11b      	bne.n	8005506 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0208 	mvn.w	r2, #8
 80054d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f951 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 80054f2:	e005      	b.n	8005500 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f943 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f954 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d122      	bne.n	800555a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b10      	cmp	r3, #16
 8005520:	d11b      	bne.n	800555a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0210 	mvn.w	r2, #16
 800552a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2208      	movs	r2, #8
 8005530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f927 	bl	8005794 <HAL_TIM_IC_CaptureCallback>
 8005546:	e005      	b.n	8005554 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f919 	bl	8005780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f92a 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10e      	bne.n	8005586 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0201 	mvn.w	r2, #1
 800557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fc fe8f 	bl	80022a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 faa1 	bl	8005af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d10e      	bne.n	80055de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d107      	bne.n	80055de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f8ef 	bl	80057bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0220 	mvn.w	r2, #32
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fa6b 	bl	8005ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_TIM_ConfigClockSource+0x18>
 8005626:	2302      	movs	r3, #2
 8005628:	e0a6      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x166>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005648:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005650:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	d067      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x120>
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d80b      	bhi.n	800567e <HAL_TIM_ConfigClockSource+0x6c>
 8005666:	2b10      	cmp	r3, #16
 8005668:	d073      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x140>
 800566a:	2b10      	cmp	r3, #16
 800566c:	d802      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x62>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d06f      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005672:	e078      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005674:	2b20      	cmp	r3, #32
 8005676:	d06c      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x140>
 8005678:	2b30      	cmp	r3, #48	; 0x30
 800567a:	d06a      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800567c:	e073      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800567e:	2b70      	cmp	r3, #112	; 0x70
 8005680:	d00d      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x8c>
 8005682:	2b70      	cmp	r3, #112	; 0x70
 8005684:	d804      	bhi.n	8005690 <HAL_TIM_ConfigClockSource+0x7e>
 8005686:	2b50      	cmp	r3, #80	; 0x50
 8005688:	d033      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0xe0>
 800568a:	2b60      	cmp	r3, #96	; 0x60
 800568c:	d041      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800568e:	e06a      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005694:	d066      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x152>
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569a:	d017      	beq.n	80056cc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800569c:	e063      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6899      	ldr	r1, [r3, #8]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f000 f989 	bl	80059c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	609a      	str	r2, [r3, #8]
      break;
 80056ca:	e04c      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6899      	ldr	r1, [r3, #8]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f000 f972 	bl	80059c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ee:	609a      	str	r2, [r3, #8]
      break;
 80056f0:	e039      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 f8e6 	bl	80058d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2150      	movs	r1, #80	; 0x50
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f93f 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 8005710:	e029      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	461a      	mov	r2, r3
 8005720:	f000 f905 	bl	800592e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2160      	movs	r1, #96	; 0x60
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f92f 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 8005730:	e019      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	461a      	mov	r2, r3
 8005740:	f000 f8c6 	bl	80058d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f91f 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 8005750:	e009      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f000 f916 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 8005762:	e000      	b.n	8005766 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005764:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a34      	ldr	r2, [pc, #208]	; (80058b4 <TIM_Base_SetConfig+0xe4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a31      	ldr	r2, [pc, #196]	; (80058b8 <TIM_Base_SetConfig+0xe8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a30      	ldr	r2, [pc, #192]	; (80058bc <TIM_Base_SetConfig+0xec>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0x38>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a2f      	ldr	r2, [pc, #188]	; (80058c0 <TIM_Base_SetConfig+0xf0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d108      	bne.n	800581a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <TIM_Base_SetConfig+0xe4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01b      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d017      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <TIM_Base_SetConfig+0xe8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a21      	ldr	r2, [pc, #132]	; (80058bc <TIM_Base_SetConfig+0xec>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00f      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a20      	ldr	r2, [pc, #128]	; (80058c0 <TIM_Base_SetConfig+0xf0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00b      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <TIM_Base_SetConfig+0xf4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <TIM_Base_SetConfig+0xf8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_Base_SetConfig+0x8a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1d      	ldr	r2, [pc, #116]	; (80058cc <TIM_Base_SetConfig+0xfc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <TIM_Base_SetConfig+0xe4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d103      	bne.n	80058a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	615a      	str	r2, [r3, #20]
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 030a 	bic.w	r3, r3, #10
 800590c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0210 	bic.w	r2, r3, #16
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	031b      	lsls	r3, r3, #12
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800596a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f043 0307 	orr.w	r3, r3, #7
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	609a      	str	r2, [r3, #8]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	021a      	lsls	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e050      	b.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d013      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10c      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40014000 	.word	0x40014000

08005ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e03f      	b.n	8005b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fc fd80 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb97 	bl	8006280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b088      	sub	sp, #32
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	f040 8083 	bne.w	8005cca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Transmit+0x2e>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e07b      	b.n	8005ccc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Transmit+0x40>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e074      	b.n	8005ccc <HAL_UART_Transmit+0x12a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2221      	movs	r2, #33	; 0x21
 8005bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bf8:	f7fc fea4 	bl	8002944 <HAL_GetTick>
 8005bfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	88fa      	ldrh	r2, [r7, #6]
 8005c02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c12:	e042      	b.n	8005c9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	d122      	bne.n	8005c72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	2180      	movs	r1, #128	; 0x80
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f9b6 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e042      	b.n	8005ccc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	3302      	adds	r3, #2
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	e017      	b.n	8005c9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60bb      	str	r3, [r7, #8]
 8005c70:	e013      	b.n	8005c9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f993 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e01f      	b.n	8005ccc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	60ba      	str	r2, [r7, #8]
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1b7      	bne.n	8005c14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2200      	movs	r2, #0
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f97a 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e006      	b.n	8005ccc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d140      	bne.n	8005d70 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_UART_Receive_IT+0x26>
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e039      	b.n	8005d72 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Receive_IT+0x38>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e032      	b.n	8005d72 <HAL_UART_Receive_IT+0x9e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	88fa      	ldrh	r2, [r7, #6]
 8005d1e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2222      	movs	r2, #34	; 0x22
 8005d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0220 	orr.w	r2, r2, #32
 8005d6a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10d      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x52>
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9d6 	bl	800617c <UART_Receive_IT>
      return;
 8005dd0:	e0d1      	b.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80b0 	beq.w	8005f3a <HAL_UART_IRQHandler+0x1ba>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_UART_IRQHandler+0x70>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80a5 	beq.w	8005f3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_UART_IRQHandler+0x90>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_UART_IRQHandler+0xb0>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	f043 0202 	orr.w	r2, r3, #2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_UART_IRQHandler+0xd0>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00f      	beq.n	8005e7a <HAL_UART_IRQHandler+0xfa>
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_UART_IRQHandler+0xee>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	f043 0208 	orr.w	r2, r3, #8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d078      	beq.n	8005f74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_UART_IRQHandler+0x11c>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f970 	bl	800617c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x144>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d031      	beq.n	8005f28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8b9 	bl	800603c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d123      	bne.n	8005f20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d013      	beq.n	8005f18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_UART_IRQHandler+0x1fc>)
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fd fe15 	bl	8003b2c <HAL_DMA_Abort_IT>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d016      	beq.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f12:	4610      	mov	r0, r2
 8005f14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f16:	e00e      	b.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f83b 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1e:	e00a      	b.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f837 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f26:	e006      	b.n	8005f36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f833 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f34:	e01e      	b.n	8005f74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f36:	bf00      	nop
    return;
 8005f38:	e01c      	b.n	8005f74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_UART_IRQHandler+0x1d6>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8a6 	bl	80060a0 <UART_Transmit_IT>
    return;
 8005f54:	e00f      	b.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8ee 	bl	800614c <UART_EndTransmit_IT>
    return;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f74:	bf00      	nop
  }
}
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	08006079 	.word	0x08006079

08005f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb8:	e02c      	b.n	8006014 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d028      	beq.n	8006014 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc8:	f7fc fcbc 	bl	8002944 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d21d      	bcs.n	8006014 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fe6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e00f      	b.n	8006034 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4013      	ands	r3, r2
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	d0c3      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006052:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff ff7e 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b21      	cmp	r3, #33	; 0x21
 80060b2:	d144      	bne.n	800613e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d11a      	bne.n	80060f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]
 80060e6:	e00e      	b.n	8006106 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]
 80060f2:	e008      	b.n	8006106 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	1c59      	adds	r1, r3, #1
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6211      	str	r1, [r2, #32]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4619      	mov	r1, r3
 8006114:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006128:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006138:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006162:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ff07 	bl	8005f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b22      	cmp	r3, #34	; 0x22
 800618e:	d171      	bne.n	8006274 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006198:	d123      	bne.n	80061e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10e      	bne.n	80061c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
 80061c4:	e029      	b.n	800621a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	629a      	str	r2, [r3, #40]	; 0x28
 80061e0:	e01b      	b.n	800621a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6858      	ldr	r0, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	1c59      	adds	r1, r3, #1
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6291      	str	r1, [r2, #40]	; 0x28
 80061fa:	b2c2      	uxtb	r2, r0
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e00c      	b.n	800621a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	1c58      	adds	r0, r3, #1
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	6288      	str	r0, [r1, #40]	; 0x28
 8006212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29b      	uxth	r3, r3
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4619      	mov	r1, r3
 8006228:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800622a:	2b00      	cmp	r3, #0
 800622c:	d120      	bne.n	8006270 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0220 	bic.w	r2, r2, #32
 800623c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800624c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fc f870 	bl	800234c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e002      	b.n	8006276 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062c2:	f023 030c 	bic.w	r3, r3, #12
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	f040 818b 	bne.w	8006608 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4ac1      	ldr	r2, [pc, #772]	; (80065fc <UART_SetConfig+0x37c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d005      	beq.n	8006308 <UART_SetConfig+0x88>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4abf      	ldr	r2, [pc, #764]	; (8006600 <UART_SetConfig+0x380>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f040 80bd 	bne.w	8006482 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006308:	f7fe fc9c 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 800630c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	461d      	mov	r5, r3
 8006312:	f04f 0600 	mov.w	r6, #0
 8006316:	46a8      	mov	r8, r5
 8006318:	46b1      	mov	r9, r6
 800631a:	eb18 0308 	adds.w	r3, r8, r8
 800631e:	eb49 0409 	adc.w	r4, r9, r9
 8006322:	4698      	mov	r8, r3
 8006324:	46a1      	mov	r9, r4
 8006326:	eb18 0805 	adds.w	r8, r8, r5
 800632a:	eb49 0906 	adc.w	r9, r9, r6
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800633a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800633e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006342:	4688      	mov	r8, r1
 8006344:	4691      	mov	r9, r2
 8006346:	eb18 0005 	adds.w	r0, r8, r5
 800634a:	eb49 0106 	adc.w	r1, r9, r6
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	461d      	mov	r5, r3
 8006354:	f04f 0600 	mov.w	r6, #0
 8006358:	196b      	adds	r3, r5, r5
 800635a:	eb46 0406 	adc.w	r4, r6, r6
 800635e:	461a      	mov	r2, r3
 8006360:	4623      	mov	r3, r4
 8006362:	f7fa fc83 	bl	8000c6c <__aeabi_uldivmod>
 8006366:	4603      	mov	r3, r0
 8006368:	460c      	mov	r4, r1
 800636a:	461a      	mov	r2, r3
 800636c:	4ba5      	ldr	r3, [pc, #660]	; (8006604 <UART_SetConfig+0x384>)
 800636e:	fba3 2302 	umull	r2, r3, r3, r2
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	461d      	mov	r5, r3
 800637c:	f04f 0600 	mov.w	r6, #0
 8006380:	46a9      	mov	r9, r5
 8006382:	46b2      	mov	sl, r6
 8006384:	eb19 0309 	adds.w	r3, r9, r9
 8006388:	eb4a 040a 	adc.w	r4, sl, sl
 800638c:	4699      	mov	r9, r3
 800638e:	46a2      	mov	sl, r4
 8006390:	eb19 0905 	adds.w	r9, r9, r5
 8006394:	eb4a 0a06 	adc.w	sl, sl, r6
 8006398:	f04f 0100 	mov.w	r1, #0
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063ac:	4689      	mov	r9, r1
 80063ae:	4692      	mov	sl, r2
 80063b0:	eb19 0005 	adds.w	r0, r9, r5
 80063b4:	eb4a 0106 	adc.w	r1, sl, r6
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	461d      	mov	r5, r3
 80063be:	f04f 0600 	mov.w	r6, #0
 80063c2:	196b      	adds	r3, r5, r5
 80063c4:	eb46 0406 	adc.w	r4, r6, r6
 80063c8:	461a      	mov	r2, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	f7fa fc4e 	bl	8000c6c <__aeabi_uldivmod>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b8b      	ldr	r3, [pc, #556]	; (8006604 <UART_SetConfig+0x384>)
 80063d8:	fba3 1302 	umull	r1, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2164      	movs	r1, #100	; 0x64
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a86      	ldr	r2, [pc, #536]	; (8006604 <UART_SetConfig+0x384>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063f8:	4498      	add	r8, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	461d      	mov	r5, r3
 80063fe:	f04f 0600 	mov.w	r6, #0
 8006402:	46a9      	mov	r9, r5
 8006404:	46b2      	mov	sl, r6
 8006406:	eb19 0309 	adds.w	r3, r9, r9
 800640a:	eb4a 040a 	adc.w	r4, sl, sl
 800640e:	4699      	mov	r9, r3
 8006410:	46a2      	mov	sl, r4
 8006412:	eb19 0905 	adds.w	r9, r9, r5
 8006416:	eb4a 0a06 	adc.w	sl, sl, r6
 800641a:	f04f 0100 	mov.w	r1, #0
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800642a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800642e:	4689      	mov	r9, r1
 8006430:	4692      	mov	sl, r2
 8006432:	eb19 0005 	adds.w	r0, r9, r5
 8006436:	eb4a 0106 	adc.w	r1, sl, r6
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	461d      	mov	r5, r3
 8006440:	f04f 0600 	mov.w	r6, #0
 8006444:	196b      	adds	r3, r5, r5
 8006446:	eb46 0406 	adc.w	r4, r6, r6
 800644a:	461a      	mov	r2, r3
 800644c:	4623      	mov	r3, r4
 800644e:	f7fa fc0d 	bl	8000c6c <__aeabi_uldivmod>
 8006452:	4603      	mov	r3, r0
 8006454:	460c      	mov	r4, r1
 8006456:	461a      	mov	r2, r3
 8006458:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <UART_SetConfig+0x384>)
 800645a:	fba3 1302 	umull	r1, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2164      	movs	r1, #100	; 0x64
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	3332      	adds	r3, #50	; 0x32
 800646c:	4a65      	ldr	r2, [pc, #404]	; (8006604 <UART_SetConfig+0x384>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 0207 	and.w	r2, r3, #7
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4442      	add	r2, r8
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	e26f      	b.n	8006962 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006482:	f7fe fbcb 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006486:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	461d      	mov	r5, r3
 800648c:	f04f 0600 	mov.w	r6, #0
 8006490:	46a8      	mov	r8, r5
 8006492:	46b1      	mov	r9, r6
 8006494:	eb18 0308 	adds.w	r3, r8, r8
 8006498:	eb49 0409 	adc.w	r4, r9, r9
 800649c:	4698      	mov	r8, r3
 800649e:	46a1      	mov	r9, r4
 80064a0:	eb18 0805 	adds.w	r8, r8, r5
 80064a4:	eb49 0906 	adc.w	r9, r9, r6
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064bc:	4688      	mov	r8, r1
 80064be:	4691      	mov	r9, r2
 80064c0:	eb18 0005 	adds.w	r0, r8, r5
 80064c4:	eb49 0106 	adc.w	r1, r9, r6
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	461d      	mov	r5, r3
 80064ce:	f04f 0600 	mov.w	r6, #0
 80064d2:	196b      	adds	r3, r5, r5
 80064d4:	eb46 0406 	adc.w	r4, r6, r6
 80064d8:	461a      	mov	r2, r3
 80064da:	4623      	mov	r3, r4
 80064dc:	f7fa fbc6 	bl	8000c6c <__aeabi_uldivmod>
 80064e0:	4603      	mov	r3, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b47      	ldr	r3, [pc, #284]	; (8006604 <UART_SetConfig+0x384>)
 80064e8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	461d      	mov	r5, r3
 80064f6:	f04f 0600 	mov.w	r6, #0
 80064fa:	46a9      	mov	r9, r5
 80064fc:	46b2      	mov	sl, r6
 80064fe:	eb19 0309 	adds.w	r3, r9, r9
 8006502:	eb4a 040a 	adc.w	r4, sl, sl
 8006506:	4699      	mov	r9, r3
 8006508:	46a2      	mov	sl, r4
 800650a:	eb19 0905 	adds.w	r9, r9, r5
 800650e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800651e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006526:	4689      	mov	r9, r1
 8006528:	4692      	mov	sl, r2
 800652a:	eb19 0005 	adds.w	r0, r9, r5
 800652e:	eb4a 0106 	adc.w	r1, sl, r6
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	461d      	mov	r5, r3
 8006538:	f04f 0600 	mov.w	r6, #0
 800653c:	196b      	adds	r3, r5, r5
 800653e:	eb46 0406 	adc.w	r4, r6, r6
 8006542:	461a      	mov	r2, r3
 8006544:	4623      	mov	r3, r4
 8006546:	f7fa fb91 	bl	8000c6c <__aeabi_uldivmod>
 800654a:	4603      	mov	r3, r0
 800654c:	460c      	mov	r4, r1
 800654e:	461a      	mov	r2, r3
 8006550:	4b2c      	ldr	r3, [pc, #176]	; (8006604 <UART_SetConfig+0x384>)
 8006552:	fba3 1302 	umull	r1, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2164      	movs	r1, #100	; 0x64
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	3332      	adds	r3, #50	; 0x32
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <UART_SetConfig+0x384>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006572:	4498      	add	r8, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	461d      	mov	r5, r3
 8006578:	f04f 0600 	mov.w	r6, #0
 800657c:	46a9      	mov	r9, r5
 800657e:	46b2      	mov	sl, r6
 8006580:	eb19 0309 	adds.w	r3, r9, r9
 8006584:	eb4a 040a 	adc.w	r4, sl, sl
 8006588:	4699      	mov	r9, r3
 800658a:	46a2      	mov	sl, r4
 800658c:	eb19 0905 	adds.w	r9, r9, r5
 8006590:	eb4a 0a06 	adc.w	sl, sl, r6
 8006594:	f04f 0100 	mov.w	r1, #0
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065a8:	4689      	mov	r9, r1
 80065aa:	4692      	mov	sl, r2
 80065ac:	eb19 0005 	adds.w	r0, r9, r5
 80065b0:	eb4a 0106 	adc.w	r1, sl, r6
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	461d      	mov	r5, r3
 80065ba:	f04f 0600 	mov.w	r6, #0
 80065be:	196b      	adds	r3, r5, r5
 80065c0:	eb46 0406 	adc.w	r4, r6, r6
 80065c4:	461a      	mov	r2, r3
 80065c6:	4623      	mov	r3, r4
 80065c8:	f7fa fb50 	bl	8000c6c <__aeabi_uldivmod>
 80065cc:	4603      	mov	r3, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <UART_SetConfig+0x384>)
 80065d4:	fba3 1302 	umull	r1, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	2164      	movs	r1, #100	; 0x64
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	3332      	adds	r3, #50	; 0x32
 80065e6:	4a07      	ldr	r2, [pc, #28]	; (8006604 <UART_SetConfig+0x384>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f003 0207 	and.w	r2, r3, #7
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4442      	add	r2, r8
 80065f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80065fa:	e1b2      	b.n	8006962 <UART_SetConfig+0x6e2>
 80065fc:	40011000 	.word	0x40011000
 8006600:	40011400 	.word	0x40011400
 8006604:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4ad7      	ldr	r2, [pc, #860]	; (800696c <UART_SetConfig+0x6ec>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d005      	beq.n	800661e <UART_SetConfig+0x39e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4ad6      	ldr	r2, [pc, #856]	; (8006970 <UART_SetConfig+0x6f0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	f040 80d1 	bne.w	80067c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800661e:	f7fe fb11 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	469a      	mov	sl, r3
 8006628:	f04f 0b00 	mov.w	fp, #0
 800662c:	46d0      	mov	r8, sl
 800662e:	46d9      	mov	r9, fp
 8006630:	eb18 0308 	adds.w	r3, r8, r8
 8006634:	eb49 0409 	adc.w	r4, r9, r9
 8006638:	4698      	mov	r8, r3
 800663a:	46a1      	mov	r9, r4
 800663c:	eb18 080a 	adds.w	r8, r8, sl
 8006640:	eb49 090b 	adc.w	r9, r9, fp
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006658:	4688      	mov	r8, r1
 800665a:	4691      	mov	r9, r2
 800665c:	eb1a 0508 	adds.w	r5, sl, r8
 8006660:	eb4b 0609 	adc.w	r6, fp, r9
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4619      	mov	r1, r3
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	f04f 0400 	mov.w	r4, #0
 8006676:	0094      	lsls	r4, r2, #2
 8006678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800667c:	008b      	lsls	r3, r1, #2
 800667e:	461a      	mov	r2, r3
 8006680:	4623      	mov	r3, r4
 8006682:	4628      	mov	r0, r5
 8006684:	4631      	mov	r1, r6
 8006686:	f7fa faf1 	bl	8000c6c <__aeabi_uldivmod>
 800668a:	4603      	mov	r3, r0
 800668c:	460c      	mov	r4, r1
 800668e:	461a      	mov	r2, r3
 8006690:	4bb8      	ldr	r3, [pc, #736]	; (8006974 <UART_SetConfig+0x6f4>)
 8006692:	fba3 2302 	umull	r2, r3, r3, r2
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	469b      	mov	fp, r3
 80066a0:	f04f 0c00 	mov.w	ip, #0
 80066a4:	46d9      	mov	r9, fp
 80066a6:	46e2      	mov	sl, ip
 80066a8:	eb19 0309 	adds.w	r3, r9, r9
 80066ac:	eb4a 040a 	adc.w	r4, sl, sl
 80066b0:	4699      	mov	r9, r3
 80066b2:	46a2      	mov	sl, r4
 80066b4:	eb19 090b 	adds.w	r9, r9, fp
 80066b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d0:	4689      	mov	r9, r1
 80066d2:	4692      	mov	sl, r2
 80066d4:	eb1b 0509 	adds.w	r5, fp, r9
 80066d8:	eb4c 060a 	adc.w	r6, ip, sl
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4619      	mov	r1, r3
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	f04f 0400 	mov.w	r4, #0
 80066ee:	0094      	lsls	r4, r2, #2
 80066f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f4:	008b      	lsls	r3, r1, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	4623      	mov	r3, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	4631      	mov	r1, r6
 80066fe:	f7fa fab5 	bl	8000c6c <__aeabi_uldivmod>
 8006702:	4603      	mov	r3, r0
 8006704:	460c      	mov	r4, r1
 8006706:	461a      	mov	r2, r3
 8006708:	4b9a      	ldr	r3, [pc, #616]	; (8006974 <UART_SetConfig+0x6f4>)
 800670a:	fba3 1302 	umull	r1, r3, r3, r2
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	2164      	movs	r1, #100	; 0x64
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	3332      	adds	r3, #50	; 0x32
 800671c:	4a95      	ldr	r2, [pc, #596]	; (8006974 <UART_SetConfig+0x6f4>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006728:	4498      	add	r8, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	469b      	mov	fp, r3
 800672e:	f04f 0c00 	mov.w	ip, #0
 8006732:	46d9      	mov	r9, fp
 8006734:	46e2      	mov	sl, ip
 8006736:	eb19 0309 	adds.w	r3, r9, r9
 800673a:	eb4a 040a 	adc.w	r4, sl, sl
 800673e:	4699      	mov	r9, r3
 8006740:	46a2      	mov	sl, r4
 8006742:	eb19 090b 	adds.w	r9, r9, fp
 8006746:	eb4a 0a0c 	adc.w	sl, sl, ip
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006756:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800675a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800675e:	4689      	mov	r9, r1
 8006760:	4692      	mov	sl, r2
 8006762:	eb1b 0509 	adds.w	r5, fp, r9
 8006766:	eb4c 060a 	adc.w	r6, ip, sl
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4619      	mov	r1, r3
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	f04f 0400 	mov.w	r4, #0
 800677c:	0094      	lsls	r4, r2, #2
 800677e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006782:	008b      	lsls	r3, r1, #2
 8006784:	461a      	mov	r2, r3
 8006786:	4623      	mov	r3, r4
 8006788:	4628      	mov	r0, r5
 800678a:	4631      	mov	r1, r6
 800678c:	f7fa fa6e 	bl	8000c6c <__aeabi_uldivmod>
 8006790:	4603      	mov	r3, r0
 8006792:	460c      	mov	r4, r1
 8006794:	461a      	mov	r2, r3
 8006796:	4b77      	ldr	r3, [pc, #476]	; (8006974 <UART_SetConfig+0x6f4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a72      	ldr	r2, [pc, #456]	; (8006974 <UART_SetConfig+0x6f4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 020f 	and.w	r2, r3, #15
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4442      	add	r2, r8
 80067bc:	609a      	str	r2, [r3, #8]
 80067be:	e0d0      	b.n	8006962 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80067c0:	f7fe fa2c 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80067c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	469a      	mov	sl, r3
 80067ca:	f04f 0b00 	mov.w	fp, #0
 80067ce:	46d0      	mov	r8, sl
 80067d0:	46d9      	mov	r9, fp
 80067d2:	eb18 0308 	adds.w	r3, r8, r8
 80067d6:	eb49 0409 	adc.w	r4, r9, r9
 80067da:	4698      	mov	r8, r3
 80067dc:	46a1      	mov	r9, r4
 80067de:	eb18 080a 	adds.w	r8, r8, sl
 80067e2:	eb49 090b 	adc.w	r9, r9, fp
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067fa:	4688      	mov	r8, r1
 80067fc:	4691      	mov	r9, r2
 80067fe:	eb1a 0508 	adds.w	r5, sl, r8
 8006802:	eb4b 0609 	adc.w	r6, fp, r9
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4619      	mov	r1, r3
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	f04f 0400 	mov.w	r4, #0
 8006818:	0094      	lsls	r4, r2, #2
 800681a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800681e:	008b      	lsls	r3, r1, #2
 8006820:	461a      	mov	r2, r3
 8006822:	4623      	mov	r3, r4
 8006824:	4628      	mov	r0, r5
 8006826:	4631      	mov	r1, r6
 8006828:	f7fa fa20 	bl	8000c6c <__aeabi_uldivmod>
 800682c:	4603      	mov	r3, r0
 800682e:	460c      	mov	r4, r1
 8006830:	461a      	mov	r2, r3
 8006832:	4b50      	ldr	r3, [pc, #320]	; (8006974 <UART_SetConfig+0x6f4>)
 8006834:	fba3 2302 	umull	r2, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	469b      	mov	fp, r3
 8006842:	f04f 0c00 	mov.w	ip, #0
 8006846:	46d9      	mov	r9, fp
 8006848:	46e2      	mov	sl, ip
 800684a:	eb19 0309 	adds.w	r3, r9, r9
 800684e:	eb4a 040a 	adc.w	r4, sl, sl
 8006852:	4699      	mov	r9, r3
 8006854:	46a2      	mov	sl, r4
 8006856:	eb19 090b 	adds.w	r9, r9, fp
 800685a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800685e:	f04f 0100 	mov.w	r1, #0
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800686a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800686e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006872:	4689      	mov	r9, r1
 8006874:	4692      	mov	sl, r2
 8006876:	eb1b 0509 	adds.w	r5, fp, r9
 800687a:	eb4c 060a 	adc.w	r6, ip, sl
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4619      	mov	r1, r3
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	f04f 0400 	mov.w	r4, #0
 8006890:	0094      	lsls	r4, r2, #2
 8006892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006896:	008b      	lsls	r3, r1, #2
 8006898:	461a      	mov	r2, r3
 800689a:	4623      	mov	r3, r4
 800689c:	4628      	mov	r0, r5
 800689e:	4631      	mov	r1, r6
 80068a0:	f7fa f9e4 	bl	8000c6c <__aeabi_uldivmod>
 80068a4:	4603      	mov	r3, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	461a      	mov	r2, r3
 80068aa:	4b32      	ldr	r3, [pc, #200]	; (8006974 <UART_SetConfig+0x6f4>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	; 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	3332      	adds	r3, #50	; 0x32
 80068be:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <UART_SetConfig+0x6f4>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ca:	4498      	add	r8, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	469b      	mov	fp, r3
 80068d0:	f04f 0c00 	mov.w	ip, #0
 80068d4:	46d9      	mov	r9, fp
 80068d6:	46e2      	mov	sl, ip
 80068d8:	eb19 0309 	adds.w	r3, r9, r9
 80068dc:	eb4a 040a 	adc.w	r4, sl, sl
 80068e0:	4699      	mov	r9, r3
 80068e2:	46a2      	mov	sl, r4
 80068e4:	eb19 090b 	adds.w	r9, r9, fp
 80068e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068ec:	f04f 0100 	mov.w	r1, #0
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006900:	4689      	mov	r9, r1
 8006902:	4692      	mov	sl, r2
 8006904:	eb1b 0509 	adds.w	r5, fp, r9
 8006908:	eb4c 060a 	adc.w	r6, ip, sl
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4619      	mov	r1, r3
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	f04f 0400 	mov.w	r4, #0
 800691e:	0094      	lsls	r4, r2, #2
 8006920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006924:	008b      	lsls	r3, r1, #2
 8006926:	461a      	mov	r2, r3
 8006928:	4623      	mov	r3, r4
 800692a:	4628      	mov	r0, r5
 800692c:	4631      	mov	r1, r6
 800692e:	f7fa f99d 	bl	8000c6c <__aeabi_uldivmod>
 8006932:	4603      	mov	r3, r0
 8006934:	460c      	mov	r4, r1
 8006936:	461a      	mov	r2, r3
 8006938:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <UART_SetConfig+0x6f4>)
 800693a:	fba3 1302 	umull	r1, r3, r3, r2
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	2164      	movs	r1, #100	; 0x64
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	3332      	adds	r3, #50	; 0x32
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <UART_SetConfig+0x6f4>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f003 020f 	and.w	r2, r3, #15
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4442      	add	r2, r8
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	e7ff      	b.n	8006962 <UART_SetConfig+0x6e2>
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	40011000 	.word	0x40011000
 8006970:	40011400 	.word	0x40011400
 8006974:	51eb851f 	.word	0x51eb851f

08006978 <__errno>:
 8006978:	4b01      	ldr	r3, [pc, #4]	; (8006980 <__errno+0x8>)
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20000024 	.word	0x20000024

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4e0d      	ldr	r6, [pc, #52]	; (80069bc <__libc_init_array+0x38>)
 8006988:	4c0d      	ldr	r4, [pc, #52]	; (80069c0 <__libc_init_array+0x3c>)
 800698a:	1ba4      	subs	r4, r4, r6
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	2500      	movs	r5, #0
 8006990:	42a5      	cmp	r5, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	4e0b      	ldr	r6, [pc, #44]	; (80069c4 <__libc_init_array+0x40>)
 8006996:	4c0c      	ldr	r4, [pc, #48]	; (80069c8 <__libc_init_array+0x44>)
 8006998:	f001 fc3c 	bl	8008214 <_init>
 800699c:	1ba4      	subs	r4, r4, r6
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	2500      	movs	r5, #0
 80069a2:	42a5      	cmp	r5, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ac:	4798      	blx	r3
 80069ae:	3501      	adds	r5, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b6:	4798      	blx	r3
 80069b8:	3501      	adds	r5, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	080086b8 	.word	0x080086b8
 80069c0:	080086b8 	.word	0x080086b8
 80069c4:	080086b8 	.word	0x080086b8
 80069c8:	080086bc 	.word	0x080086bc

080069cc <memcpy>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	1e43      	subs	r3, r0, #1
 80069d0:	440a      	add	r2, r1
 80069d2:	4291      	cmp	r1, r2
 80069d4:	d100      	bne.n	80069d8 <memcpy+0xc>
 80069d6:	bd10      	pop	{r4, pc}
 80069d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e0:	e7f7      	b.n	80069d2 <memcpy+0x6>

080069e2 <memset>:
 80069e2:	4402      	add	r2, r0
 80069e4:	4603      	mov	r3, r0
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d100      	bne.n	80069ec <memset+0xa>
 80069ea:	4770      	bx	lr
 80069ec:	f803 1b01 	strb.w	r1, [r3], #1
 80069f0:	e7f9      	b.n	80069e6 <memset+0x4>
	...

080069f4 <siprintf>:
 80069f4:	b40e      	push	{r1, r2, r3}
 80069f6:	b500      	push	{lr}
 80069f8:	b09c      	sub	sp, #112	; 0x70
 80069fa:	ab1d      	add	r3, sp, #116	; 0x74
 80069fc:	9002      	str	r0, [sp, #8]
 80069fe:	9006      	str	r0, [sp, #24]
 8006a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a04:	4809      	ldr	r0, [pc, #36]	; (8006a2c <siprintf+0x38>)
 8006a06:	9107      	str	r1, [sp, #28]
 8006a08:	9104      	str	r1, [sp, #16]
 8006a0a:	4909      	ldr	r1, [pc, #36]	; (8006a30 <siprintf+0x3c>)
 8006a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a10:	9105      	str	r1, [sp, #20]
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	a902      	add	r1, sp, #8
 8006a18:	f000 f866 	bl	8006ae8 <_svfiprintf_r>
 8006a1c:	9b02      	ldr	r3, [sp, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	b01c      	add	sp, #112	; 0x70
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b003      	add	sp, #12
 8006a2a:	4770      	bx	lr
 8006a2c:	20000024 	.word	0x20000024
 8006a30:	ffff0208 	.word	0xffff0208

08006a34 <__ssputs_r>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	688e      	ldr	r6, [r1, #8]
 8006a3a:	429e      	cmp	r6, r3
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	4690      	mov	r8, r2
 8006a42:	4699      	mov	r9, r3
 8006a44:	d837      	bhi.n	8006ab6 <__ssputs_r+0x82>
 8006a46:	898a      	ldrh	r2, [r1, #12]
 8006a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a4c:	d031      	beq.n	8006ab2 <__ssputs_r+0x7e>
 8006a4e:	6825      	ldr	r5, [r4, #0]
 8006a50:	6909      	ldr	r1, [r1, #16]
 8006a52:	1a6f      	subs	r7, r5, r1
 8006a54:	6965      	ldr	r5, [r4, #20]
 8006a56:	2302      	movs	r3, #2
 8006a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a60:	f109 0301 	add.w	r3, r9, #1
 8006a64:	443b      	add	r3, r7
 8006a66:	429d      	cmp	r5, r3
 8006a68:	bf38      	it	cc
 8006a6a:	461d      	movcc	r5, r3
 8006a6c:	0553      	lsls	r3, r2, #21
 8006a6e:	d530      	bpl.n	8006ad2 <__ssputs_r+0x9e>
 8006a70:	4629      	mov	r1, r5
 8006a72:	f000 fb21 	bl	80070b8 <_malloc_r>
 8006a76:	4606      	mov	r6, r0
 8006a78:	b950      	cbnz	r0, 8006a90 <__ssputs_r+0x5c>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	f8ca 3000 	str.w	r3, [sl]
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	463a      	mov	r2, r7
 8006a92:	6921      	ldr	r1, [r4, #16]
 8006a94:	f7ff ff9a 	bl	80069cc <memcpy>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	6126      	str	r6, [r4, #16]
 8006aa6:	6165      	str	r5, [r4, #20]
 8006aa8:	443e      	add	r6, r7
 8006aaa:	1bed      	subs	r5, r5, r7
 8006aac:	6026      	str	r6, [r4, #0]
 8006aae:	60a5      	str	r5, [r4, #8]
 8006ab0:	464e      	mov	r6, r9
 8006ab2:	454e      	cmp	r6, r9
 8006ab4:	d900      	bls.n	8006ab8 <__ssputs_r+0x84>
 8006ab6:	464e      	mov	r6, r9
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4641      	mov	r1, r8
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	f000 fa93 	bl	8006fe8 <memmove>
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	1b9b      	subs	r3, r3, r6
 8006ac6:	60a3      	str	r3, [r4, #8]
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	441e      	add	r6, r3
 8006acc:	6026      	str	r6, [r4, #0]
 8006ace:	2000      	movs	r0, #0
 8006ad0:	e7dc      	b.n	8006a8c <__ssputs_r+0x58>
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	f000 fb4a 	bl	800716c <_realloc_r>
 8006ad8:	4606      	mov	r6, r0
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d1e2      	bne.n	8006aa4 <__ssputs_r+0x70>
 8006ade:	6921      	ldr	r1, [r4, #16]
 8006ae0:	4650      	mov	r0, sl
 8006ae2:	f000 fa9b 	bl	800701c <_free_r>
 8006ae6:	e7c8      	b.n	8006a7a <__ssputs_r+0x46>

08006ae8 <_svfiprintf_r>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	461d      	mov	r5, r3
 8006aee:	898b      	ldrh	r3, [r1, #12]
 8006af0:	061f      	lsls	r7, r3, #24
 8006af2:	b09d      	sub	sp, #116	; 0x74
 8006af4:	4680      	mov	r8, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	4616      	mov	r6, r2
 8006afa:	d50f      	bpl.n	8006b1c <_svfiprintf_r+0x34>
 8006afc:	690b      	ldr	r3, [r1, #16]
 8006afe:	b96b      	cbnz	r3, 8006b1c <_svfiprintf_r+0x34>
 8006b00:	2140      	movs	r1, #64	; 0x40
 8006b02:	f000 fad9 	bl	80070b8 <_malloc_r>
 8006b06:	6020      	str	r0, [r4, #0]
 8006b08:	6120      	str	r0, [r4, #16]
 8006b0a:	b928      	cbnz	r0, 8006b18 <_svfiprintf_r+0x30>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	f8c8 3000 	str.w	r3, [r8]
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295
 8006b16:	e0c8      	b.n	8006caa <_svfiprintf_r+0x1c2>
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	6163      	str	r3, [r4, #20]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b20:	2320      	movs	r3, #32
 8006b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b26:	2330      	movs	r3, #48	; 0x30
 8006b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b2c:	9503      	str	r5, [sp, #12]
 8006b2e:	f04f 0b01 	mov.w	fp, #1
 8006b32:	4637      	mov	r7, r6
 8006b34:	463d      	mov	r5, r7
 8006b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b3a:	b10b      	cbz	r3, 8006b40 <_svfiprintf_r+0x58>
 8006b3c:	2b25      	cmp	r3, #37	; 0x25
 8006b3e:	d13e      	bne.n	8006bbe <_svfiprintf_r+0xd6>
 8006b40:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b44:	d00b      	beq.n	8006b5e <_svfiprintf_r+0x76>
 8006b46:	4653      	mov	r3, sl
 8006b48:	4632      	mov	r2, r6
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	f7ff ff71 	bl	8006a34 <__ssputs_r>
 8006b52:	3001      	adds	r0, #1
 8006b54:	f000 80a4 	beq.w	8006ca0 <_svfiprintf_r+0x1b8>
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	4453      	add	r3, sl
 8006b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5e:	783b      	ldrb	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 809d 	beq.w	8006ca0 <_svfiprintf_r+0x1b8>
 8006b66:	2300      	movs	r3, #0
 8006b68:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	9307      	str	r3, [sp, #28]
 8006b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b78:	931a      	str	r3, [sp, #104]	; 0x68
 8006b7a:	462f      	mov	r7, r5
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b82:	4850      	ldr	r0, [pc, #320]	; (8006cc4 <_svfiprintf_r+0x1dc>)
 8006b84:	f7f9 fb34 	bl	80001f0 <memchr>
 8006b88:	9b04      	ldr	r3, [sp, #16]
 8006b8a:	b9d0      	cbnz	r0, 8006bc2 <_svfiprintf_r+0xda>
 8006b8c:	06d9      	lsls	r1, r3, #27
 8006b8e:	bf44      	itt	mi
 8006b90:	2220      	movmi	r2, #32
 8006b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b96:	071a      	lsls	r2, r3, #28
 8006b98:	bf44      	itt	mi
 8006b9a:	222b      	movmi	r2, #43	; 0x2b
 8006b9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ba0:	782a      	ldrb	r2, [r5, #0]
 8006ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8006ba4:	d015      	beq.n	8006bd2 <_svfiprintf_r+0xea>
 8006ba6:	9a07      	ldr	r2, [sp, #28]
 8006ba8:	462f      	mov	r7, r5
 8006baa:	2000      	movs	r0, #0
 8006bac:	250a      	movs	r5, #10
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb4:	3b30      	subs	r3, #48	; 0x30
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d94d      	bls.n	8006c56 <_svfiprintf_r+0x16e>
 8006bba:	b1b8      	cbz	r0, 8006bec <_svfiprintf_r+0x104>
 8006bbc:	e00f      	b.n	8006bde <_svfiprintf_r+0xf6>
 8006bbe:	462f      	mov	r7, r5
 8006bc0:	e7b8      	b.n	8006b34 <_svfiprintf_r+0x4c>
 8006bc2:	4a40      	ldr	r2, [pc, #256]	; (8006cc4 <_svfiprintf_r+0x1dc>)
 8006bc4:	1a80      	subs	r0, r0, r2
 8006bc6:	fa0b f000 	lsl.w	r0, fp, r0
 8006bca:	4318      	orrs	r0, r3
 8006bcc:	9004      	str	r0, [sp, #16]
 8006bce:	463d      	mov	r5, r7
 8006bd0:	e7d3      	b.n	8006b7a <_svfiprintf_r+0x92>
 8006bd2:	9a03      	ldr	r2, [sp, #12]
 8006bd4:	1d11      	adds	r1, r2, #4
 8006bd6:	6812      	ldr	r2, [r2, #0]
 8006bd8:	9103      	str	r1, [sp, #12]
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	db01      	blt.n	8006be2 <_svfiprintf_r+0xfa>
 8006bde:	9207      	str	r2, [sp, #28]
 8006be0:	e004      	b.n	8006bec <_svfiprintf_r+0x104>
 8006be2:	4252      	negs	r2, r2
 8006be4:	f043 0302 	orr.w	r3, r3, #2
 8006be8:	9207      	str	r2, [sp, #28]
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	783b      	ldrb	r3, [r7, #0]
 8006bee:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf0:	d10c      	bne.n	8006c0c <_svfiprintf_r+0x124>
 8006bf2:	787b      	ldrb	r3, [r7, #1]
 8006bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf6:	d133      	bne.n	8006c60 <_svfiprintf_r+0x178>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	1d1a      	adds	r2, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	9203      	str	r2, [sp, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bfb8      	it	lt
 8006c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c08:	3702      	adds	r7, #2
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	4d2e      	ldr	r5, [pc, #184]	; (8006cc8 <_svfiprintf_r+0x1e0>)
 8006c0e:	7839      	ldrb	r1, [r7, #0]
 8006c10:	2203      	movs	r2, #3
 8006c12:	4628      	mov	r0, r5
 8006c14:	f7f9 faec 	bl	80001f0 <memchr>
 8006c18:	b138      	cbz	r0, 8006c2a <_svfiprintf_r+0x142>
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	1b40      	subs	r0, r0, r5
 8006c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	4303      	orrs	r3, r0
 8006c26:	3701      	adds	r7, #1
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	7839      	ldrb	r1, [r7, #0]
 8006c2c:	4827      	ldr	r0, [pc, #156]	; (8006ccc <_svfiprintf_r+0x1e4>)
 8006c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c32:	2206      	movs	r2, #6
 8006c34:	1c7e      	adds	r6, r7, #1
 8006c36:	f7f9 fadb 	bl	80001f0 <memchr>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d038      	beq.n	8006cb0 <_svfiprintf_r+0x1c8>
 8006c3e:	4b24      	ldr	r3, [pc, #144]	; (8006cd0 <_svfiprintf_r+0x1e8>)
 8006c40:	bb13      	cbnz	r3, 8006c88 <_svfiprintf_r+0x1a0>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	3307      	adds	r3, #7
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	9303      	str	r3, [sp, #12]
 8006c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c50:	444b      	add	r3, r9
 8006c52:	9309      	str	r3, [sp, #36]	; 0x24
 8006c54:	e76d      	b.n	8006b32 <_svfiprintf_r+0x4a>
 8006c56:	fb05 3202 	mla	r2, r5, r2, r3
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	460f      	mov	r7, r1
 8006c5e:	e7a6      	b.n	8006bae <_svfiprintf_r+0xc6>
 8006c60:	2300      	movs	r3, #0
 8006c62:	3701      	adds	r7, #1
 8006c64:	9305      	str	r3, [sp, #20]
 8006c66:	4619      	mov	r1, r3
 8006c68:	250a      	movs	r5, #10
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c70:	3a30      	subs	r2, #48	; 0x30
 8006c72:	2a09      	cmp	r2, #9
 8006c74:	d903      	bls.n	8006c7e <_svfiprintf_r+0x196>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0c8      	beq.n	8006c0c <_svfiprintf_r+0x124>
 8006c7a:	9105      	str	r1, [sp, #20]
 8006c7c:	e7c6      	b.n	8006c0c <_svfiprintf_r+0x124>
 8006c7e:	fb05 2101 	mla	r1, r5, r1, r2
 8006c82:	2301      	movs	r3, #1
 8006c84:	4607      	mov	r7, r0
 8006c86:	e7f0      	b.n	8006c6a <_svfiprintf_r+0x182>
 8006c88:	ab03      	add	r3, sp, #12
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <_svfiprintf_r+0x1ec>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	4640      	mov	r0, r8
 8006c94:	f3af 8000 	nop.w
 8006c98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	d1d6      	bne.n	8006c4e <_svfiprintf_r+0x166>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	065b      	lsls	r3, r3, #25
 8006ca4:	f53f af35 	bmi.w	8006b12 <_svfiprintf_r+0x2a>
 8006ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006caa:	b01d      	add	sp, #116	; 0x74
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	ab03      	add	r3, sp, #12
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <_svfiprintf_r+0x1ec>)
 8006cb8:	a904      	add	r1, sp, #16
 8006cba:	4640      	mov	r0, r8
 8006cbc:	f000 f882 	bl	8006dc4 <_printf_i>
 8006cc0:	e7ea      	b.n	8006c98 <_svfiprintf_r+0x1b0>
 8006cc2:	bf00      	nop
 8006cc4:	080084a0 	.word	0x080084a0
 8006cc8:	080084a6 	.word	0x080084a6
 8006ccc:	080084aa 	.word	0x080084aa
 8006cd0:	00000000 	.word	0x00000000
 8006cd4:	08006a35 	.word	0x08006a35

08006cd8 <_printf_common>:
 8006cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cdc:	4691      	mov	r9, r2
 8006cde:	461f      	mov	r7, r3
 8006ce0:	688a      	ldr	r2, [r1, #8]
 8006ce2:	690b      	ldr	r3, [r1, #16]
 8006ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	bfb8      	it	lt
 8006cec:	4613      	movlt	r3, r2
 8006cee:	f8c9 3000 	str.w	r3, [r9]
 8006cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	b112      	cbz	r2, 8006d02 <_printf_common+0x2a>
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8c9 3000 	str.w	r3, [r9]
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	0699      	lsls	r1, r3, #26
 8006d06:	bf42      	ittt	mi
 8006d08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d0c:	3302      	addmi	r3, #2
 8006d0e:	f8c9 3000 	strmi.w	r3, [r9]
 8006d12:	6825      	ldr	r5, [r4, #0]
 8006d14:	f015 0506 	ands.w	r5, r5, #6
 8006d18:	d107      	bne.n	8006d2a <_printf_common+0x52>
 8006d1a:	f104 0a19 	add.w	sl, r4, #25
 8006d1e:	68e3      	ldr	r3, [r4, #12]
 8006d20:	f8d9 2000 	ldr.w	r2, [r9]
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	42ab      	cmp	r3, r5
 8006d28:	dc28      	bgt.n	8006d7c <_printf_common+0xa4>
 8006d2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	3300      	adds	r3, #0
 8006d32:	bf18      	it	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	0692      	lsls	r2, r2, #26
 8006d38:	d42d      	bmi.n	8006d96 <_printf_common+0xbe>
 8006d3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d3e:	4639      	mov	r1, r7
 8006d40:	4630      	mov	r0, r6
 8006d42:	47c0      	blx	r8
 8006d44:	3001      	adds	r0, #1
 8006d46:	d020      	beq.n	8006d8a <_printf_common+0xb2>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	68e5      	ldr	r5, [r4, #12]
 8006d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d50:	f003 0306 	and.w	r3, r3, #6
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	bf08      	it	eq
 8006d58:	1aad      	subeq	r5, r5, r2
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	6922      	ldr	r2, [r4, #16]
 8006d5e:	bf0c      	ite	eq
 8006d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d64:	2500      	movne	r5, #0
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bfc4      	itt	gt
 8006d6a:	1a9b      	subgt	r3, r3, r2
 8006d6c:	18ed      	addgt	r5, r5, r3
 8006d6e:	f04f 0900 	mov.w	r9, #0
 8006d72:	341a      	adds	r4, #26
 8006d74:	454d      	cmp	r5, r9
 8006d76:	d11a      	bne.n	8006dae <_printf_common+0xd6>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e008      	b.n	8006d8e <_printf_common+0xb6>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4639      	mov	r1, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d103      	bne.n	8006d92 <_printf_common+0xba>
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d92:	3501      	adds	r5, #1
 8006d94:	e7c3      	b.n	8006d1e <_printf_common+0x46>
 8006d96:	18e1      	adds	r1, r4, r3
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	2030      	movs	r0, #48	; 0x30
 8006d9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006da0:	4422      	add	r2, r4
 8006da2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006da6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006daa:	3302      	adds	r3, #2
 8006dac:	e7c5      	b.n	8006d3a <_printf_common+0x62>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4622      	mov	r2, r4
 8006db2:	4639      	mov	r1, r7
 8006db4:	4630      	mov	r0, r6
 8006db6:	47c0      	blx	r8
 8006db8:	3001      	adds	r0, #1
 8006dba:	d0e6      	beq.n	8006d8a <_printf_common+0xb2>
 8006dbc:	f109 0901 	add.w	r9, r9, #1
 8006dc0:	e7d8      	b.n	8006d74 <_printf_common+0x9c>
	...

08006dc4 <_printf_i>:
 8006dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006dcc:	460c      	mov	r4, r1
 8006dce:	7e09      	ldrb	r1, [r1, #24]
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	296e      	cmp	r1, #110	; 0x6e
 8006dd4:	4617      	mov	r7, r2
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	4698      	mov	r8, r3
 8006dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ddc:	f000 80b3 	beq.w	8006f46 <_printf_i+0x182>
 8006de0:	d822      	bhi.n	8006e28 <_printf_i+0x64>
 8006de2:	2963      	cmp	r1, #99	; 0x63
 8006de4:	d036      	beq.n	8006e54 <_printf_i+0x90>
 8006de6:	d80a      	bhi.n	8006dfe <_printf_i+0x3a>
 8006de8:	2900      	cmp	r1, #0
 8006dea:	f000 80b9 	beq.w	8006f60 <_printf_i+0x19c>
 8006dee:	2958      	cmp	r1, #88	; 0x58
 8006df0:	f000 8083 	beq.w	8006efa <_printf_i+0x136>
 8006df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006dfc:	e032      	b.n	8006e64 <_printf_i+0xa0>
 8006dfe:	2964      	cmp	r1, #100	; 0x64
 8006e00:	d001      	beq.n	8006e06 <_printf_i+0x42>
 8006e02:	2969      	cmp	r1, #105	; 0x69
 8006e04:	d1f6      	bne.n	8006df4 <_printf_i+0x30>
 8006e06:	6820      	ldr	r0, [r4, #0]
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	0605      	lsls	r5, r0, #24
 8006e0c:	f103 0104 	add.w	r1, r3, #4
 8006e10:	d52a      	bpl.n	8006e68 <_printf_i+0xa4>
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6011      	str	r1, [r2, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da03      	bge.n	8006e22 <_printf_i+0x5e>
 8006e1a:	222d      	movs	r2, #45	; 0x2d
 8006e1c:	425b      	negs	r3, r3
 8006e1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e22:	486f      	ldr	r0, [pc, #444]	; (8006fe0 <_printf_i+0x21c>)
 8006e24:	220a      	movs	r2, #10
 8006e26:	e039      	b.n	8006e9c <_printf_i+0xd8>
 8006e28:	2973      	cmp	r1, #115	; 0x73
 8006e2a:	f000 809d 	beq.w	8006f68 <_printf_i+0x1a4>
 8006e2e:	d808      	bhi.n	8006e42 <_printf_i+0x7e>
 8006e30:	296f      	cmp	r1, #111	; 0x6f
 8006e32:	d020      	beq.n	8006e76 <_printf_i+0xb2>
 8006e34:	2970      	cmp	r1, #112	; 0x70
 8006e36:	d1dd      	bne.n	8006df4 <_printf_i+0x30>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	f043 0320 	orr.w	r3, r3, #32
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	e003      	b.n	8006e4a <_printf_i+0x86>
 8006e42:	2975      	cmp	r1, #117	; 0x75
 8006e44:	d017      	beq.n	8006e76 <_printf_i+0xb2>
 8006e46:	2978      	cmp	r1, #120	; 0x78
 8006e48:	d1d4      	bne.n	8006df4 <_printf_i+0x30>
 8006e4a:	2378      	movs	r3, #120	; 0x78
 8006e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e50:	4864      	ldr	r0, [pc, #400]	; (8006fe4 <_printf_i+0x220>)
 8006e52:	e055      	b.n	8006f00 <_printf_i+0x13c>
 8006e54:	6813      	ldr	r3, [r2, #0]
 8006e56:	1d19      	adds	r1, r3, #4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6011      	str	r1, [r2, #0]
 8006e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e64:	2301      	movs	r3, #1
 8006e66:	e08c      	b.n	8006f82 <_printf_i+0x1be>
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6011      	str	r1, [r2, #0]
 8006e6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e70:	bf18      	it	ne
 8006e72:	b21b      	sxthne	r3, r3
 8006e74:	e7cf      	b.n	8006e16 <_printf_i+0x52>
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	6825      	ldr	r5, [r4, #0]
 8006e7a:	1d18      	adds	r0, r3, #4
 8006e7c:	6010      	str	r0, [r2, #0]
 8006e7e:	0628      	lsls	r0, r5, #24
 8006e80:	d501      	bpl.n	8006e86 <_printf_i+0xc2>
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	e002      	b.n	8006e8c <_printf_i+0xc8>
 8006e86:	0668      	lsls	r0, r5, #25
 8006e88:	d5fb      	bpl.n	8006e82 <_printf_i+0xbe>
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	4854      	ldr	r0, [pc, #336]	; (8006fe0 <_printf_i+0x21c>)
 8006e8e:	296f      	cmp	r1, #111	; 0x6f
 8006e90:	bf14      	ite	ne
 8006e92:	220a      	movne	r2, #10
 8006e94:	2208      	moveq	r2, #8
 8006e96:	2100      	movs	r1, #0
 8006e98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e9c:	6865      	ldr	r5, [r4, #4]
 8006e9e:	60a5      	str	r5, [r4, #8]
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	f2c0 8095 	blt.w	8006fd0 <_printf_i+0x20c>
 8006ea6:	6821      	ldr	r1, [r4, #0]
 8006ea8:	f021 0104 	bic.w	r1, r1, #4
 8006eac:	6021      	str	r1, [r4, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d13d      	bne.n	8006f2e <_printf_i+0x16a>
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	f040 808e 	bne.w	8006fd4 <_printf_i+0x210>
 8006eb8:	4665      	mov	r5, ip
 8006eba:	2a08      	cmp	r2, #8
 8006ebc:	d10b      	bne.n	8006ed6 <_printf_i+0x112>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	07db      	lsls	r3, r3, #31
 8006ec2:	d508      	bpl.n	8006ed6 <_printf_i+0x112>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	bfde      	ittt	le
 8006ecc:	2330      	movle	r3, #48	; 0x30
 8006ece:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ed6:	ebac 0305 	sub.w	r3, ip, r5
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	f8cd 8000 	str.w	r8, [sp]
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	aa03      	add	r2, sp, #12
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f7ff fef6 	bl	8006cd8 <_printf_common>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d14d      	bne.n	8006f8c <_printf_i+0x1c8>
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	b005      	add	sp, #20
 8006ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006efa:	4839      	ldr	r0, [pc, #228]	; (8006fe0 <_printf_i+0x21c>)
 8006efc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f00:	6813      	ldr	r3, [r2, #0]
 8006f02:	6821      	ldr	r1, [r4, #0]
 8006f04:	1d1d      	adds	r5, r3, #4
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6015      	str	r5, [r2, #0]
 8006f0a:	060a      	lsls	r2, r1, #24
 8006f0c:	d50b      	bpl.n	8006f26 <_printf_i+0x162>
 8006f0e:	07ca      	lsls	r2, r1, #31
 8006f10:	bf44      	itt	mi
 8006f12:	f041 0120 	orrmi.w	r1, r1, #32
 8006f16:	6021      	strmi	r1, [r4, #0]
 8006f18:	b91b      	cbnz	r3, 8006f22 <_printf_i+0x15e>
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	f022 0220 	bic.w	r2, r2, #32
 8006f20:	6022      	str	r2, [r4, #0]
 8006f22:	2210      	movs	r2, #16
 8006f24:	e7b7      	b.n	8006e96 <_printf_i+0xd2>
 8006f26:	064d      	lsls	r5, r1, #25
 8006f28:	bf48      	it	mi
 8006f2a:	b29b      	uxthmi	r3, r3
 8006f2c:	e7ef      	b.n	8006f0e <_printf_i+0x14a>
 8006f2e:	4665      	mov	r5, ip
 8006f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f34:	fb02 3311 	mls	r3, r2, r1, r3
 8006f38:	5cc3      	ldrb	r3, [r0, r3]
 8006f3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f3e:	460b      	mov	r3, r1
 8006f40:	2900      	cmp	r1, #0
 8006f42:	d1f5      	bne.n	8006f30 <_printf_i+0x16c>
 8006f44:	e7b9      	b.n	8006eba <_printf_i+0xf6>
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	6825      	ldr	r5, [r4, #0]
 8006f4a:	6961      	ldr	r1, [r4, #20]
 8006f4c:	1d18      	adds	r0, r3, #4
 8006f4e:	6010      	str	r0, [r2, #0]
 8006f50:	0628      	lsls	r0, r5, #24
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	d501      	bpl.n	8006f5a <_printf_i+0x196>
 8006f56:	6019      	str	r1, [r3, #0]
 8006f58:	e002      	b.n	8006f60 <_printf_i+0x19c>
 8006f5a:	066a      	lsls	r2, r5, #25
 8006f5c:	d5fb      	bpl.n	8006f56 <_printf_i+0x192>
 8006f5e:	8019      	strh	r1, [r3, #0]
 8006f60:	2300      	movs	r3, #0
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	4665      	mov	r5, ip
 8006f66:	e7b9      	b.n	8006edc <_printf_i+0x118>
 8006f68:	6813      	ldr	r3, [r2, #0]
 8006f6a:	1d19      	adds	r1, r3, #4
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	681d      	ldr	r5, [r3, #0]
 8006f70:	6862      	ldr	r2, [r4, #4]
 8006f72:	2100      	movs	r1, #0
 8006f74:	4628      	mov	r0, r5
 8006f76:	f7f9 f93b 	bl	80001f0 <memchr>
 8006f7a:	b108      	cbz	r0, 8006f80 <_printf_i+0x1bc>
 8006f7c:	1b40      	subs	r0, r0, r5
 8006f7e:	6060      	str	r0, [r4, #4]
 8006f80:	6863      	ldr	r3, [r4, #4]
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	2300      	movs	r3, #0
 8006f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8a:	e7a7      	b.n	8006edc <_printf_i+0x118>
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	462a      	mov	r2, r5
 8006f90:	4639      	mov	r1, r7
 8006f92:	4630      	mov	r0, r6
 8006f94:	47c0      	blx	r8
 8006f96:	3001      	adds	r0, #1
 8006f98:	d0aa      	beq.n	8006ef0 <_printf_i+0x12c>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	079b      	lsls	r3, r3, #30
 8006f9e:	d413      	bmi.n	8006fc8 <_printf_i+0x204>
 8006fa0:	68e0      	ldr	r0, [r4, #12]
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	4298      	cmp	r0, r3
 8006fa6:	bfb8      	it	lt
 8006fa8:	4618      	movlt	r0, r3
 8006faa:	e7a3      	b.n	8006ef4 <_printf_i+0x130>
 8006fac:	2301      	movs	r3, #1
 8006fae:	464a      	mov	r2, r9
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	47c0      	blx	r8
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d09a      	beq.n	8006ef0 <_printf_i+0x12c>
 8006fba:	3501      	adds	r5, #1
 8006fbc:	68e3      	ldr	r3, [r4, #12]
 8006fbe:	9a03      	ldr	r2, [sp, #12]
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	42ab      	cmp	r3, r5
 8006fc4:	dcf2      	bgt.n	8006fac <_printf_i+0x1e8>
 8006fc6:	e7eb      	b.n	8006fa0 <_printf_i+0x1dc>
 8006fc8:	2500      	movs	r5, #0
 8006fca:	f104 0919 	add.w	r9, r4, #25
 8006fce:	e7f5      	b.n	8006fbc <_printf_i+0x1f8>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1ac      	bne.n	8006f2e <_printf_i+0x16a>
 8006fd4:	7803      	ldrb	r3, [r0, #0]
 8006fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fde:	e76c      	b.n	8006eba <_printf_i+0xf6>
 8006fe0:	080084b1 	.word	0x080084b1
 8006fe4:	080084c2 	.word	0x080084c2

08006fe8 <memmove>:
 8006fe8:	4288      	cmp	r0, r1
 8006fea:	b510      	push	{r4, lr}
 8006fec:	eb01 0302 	add.w	r3, r1, r2
 8006ff0:	d807      	bhi.n	8007002 <memmove+0x1a>
 8006ff2:	1e42      	subs	r2, r0, #1
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d00a      	beq.n	800700e <memmove+0x26>
 8006ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007000:	e7f8      	b.n	8006ff4 <memmove+0xc>
 8007002:	4283      	cmp	r3, r0
 8007004:	d9f5      	bls.n	8006ff2 <memmove+0xa>
 8007006:	1881      	adds	r1, r0, r2
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	42d3      	cmn	r3, r2
 800700c:	d100      	bne.n	8007010 <memmove+0x28>
 800700e:	bd10      	pop	{r4, pc}
 8007010:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007014:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007018:	e7f7      	b.n	800700a <memmove+0x22>
	...

0800701c <_free_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4605      	mov	r5, r0
 8007020:	2900      	cmp	r1, #0
 8007022:	d045      	beq.n	80070b0 <_free_r+0x94>
 8007024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007028:	1f0c      	subs	r4, r1, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	bfb8      	it	lt
 800702e:	18e4      	addlt	r4, r4, r3
 8007030:	f000 f8d2 	bl	80071d8 <__malloc_lock>
 8007034:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <_free_r+0x98>)
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	4610      	mov	r0, r2
 800703a:	b933      	cbnz	r3, 800704a <_free_r+0x2e>
 800703c:	6063      	str	r3, [r4, #4]
 800703e:	6014      	str	r4, [r2, #0]
 8007040:	4628      	mov	r0, r5
 8007042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007046:	f000 b8c8 	b.w	80071da <__malloc_unlock>
 800704a:	42a3      	cmp	r3, r4
 800704c:	d90c      	bls.n	8007068 <_free_r+0x4c>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	1862      	adds	r2, r4, r1
 8007052:	4293      	cmp	r3, r2
 8007054:	bf04      	itt	eq
 8007056:	681a      	ldreq	r2, [r3, #0]
 8007058:	685b      	ldreq	r3, [r3, #4]
 800705a:	6063      	str	r3, [r4, #4]
 800705c:	bf04      	itt	eq
 800705e:	1852      	addeq	r2, r2, r1
 8007060:	6022      	streq	r2, [r4, #0]
 8007062:	6004      	str	r4, [r0, #0]
 8007064:	e7ec      	b.n	8007040 <_free_r+0x24>
 8007066:	4613      	mov	r3, r2
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	b10a      	cbz	r2, 8007070 <_free_r+0x54>
 800706c:	42a2      	cmp	r2, r4
 800706e:	d9fa      	bls.n	8007066 <_free_r+0x4a>
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	1858      	adds	r0, r3, r1
 8007074:	42a0      	cmp	r0, r4
 8007076:	d10b      	bne.n	8007090 <_free_r+0x74>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	4401      	add	r1, r0
 800707c:	1858      	adds	r0, r3, r1
 800707e:	4282      	cmp	r2, r0
 8007080:	6019      	str	r1, [r3, #0]
 8007082:	d1dd      	bne.n	8007040 <_free_r+0x24>
 8007084:	6810      	ldr	r0, [r2, #0]
 8007086:	6852      	ldr	r2, [r2, #4]
 8007088:	605a      	str	r2, [r3, #4]
 800708a:	4401      	add	r1, r0
 800708c:	6019      	str	r1, [r3, #0]
 800708e:	e7d7      	b.n	8007040 <_free_r+0x24>
 8007090:	d902      	bls.n	8007098 <_free_r+0x7c>
 8007092:	230c      	movs	r3, #12
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	e7d3      	b.n	8007040 <_free_r+0x24>
 8007098:	6820      	ldr	r0, [r4, #0]
 800709a:	1821      	adds	r1, r4, r0
 800709c:	428a      	cmp	r2, r1
 800709e:	bf04      	itt	eq
 80070a0:	6811      	ldreq	r1, [r2, #0]
 80070a2:	6852      	ldreq	r2, [r2, #4]
 80070a4:	6062      	str	r2, [r4, #4]
 80070a6:	bf04      	itt	eq
 80070a8:	1809      	addeq	r1, r1, r0
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	605c      	str	r4, [r3, #4]
 80070ae:	e7c7      	b.n	8007040 <_free_r+0x24>
 80070b0:	bd38      	pop	{r3, r4, r5, pc}
 80070b2:	bf00      	nop
 80070b4:	20000120 	.word	0x20000120

080070b8 <_malloc_r>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	1ccd      	adds	r5, r1, #3
 80070bc:	f025 0503 	bic.w	r5, r5, #3
 80070c0:	3508      	adds	r5, #8
 80070c2:	2d0c      	cmp	r5, #12
 80070c4:	bf38      	it	cc
 80070c6:	250c      	movcc	r5, #12
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	4606      	mov	r6, r0
 80070cc:	db01      	blt.n	80070d2 <_malloc_r+0x1a>
 80070ce:	42a9      	cmp	r1, r5
 80070d0:	d903      	bls.n	80070da <_malloc_r+0x22>
 80070d2:	230c      	movs	r3, #12
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	2000      	movs	r0, #0
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
 80070da:	f000 f87d 	bl	80071d8 <__malloc_lock>
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <_malloc_r+0xac>)
 80070e0:	6814      	ldr	r4, [r2, #0]
 80070e2:	4621      	mov	r1, r4
 80070e4:	b991      	cbnz	r1, 800710c <_malloc_r+0x54>
 80070e6:	4c20      	ldr	r4, [pc, #128]	; (8007168 <_malloc_r+0xb0>)
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	b91b      	cbnz	r3, 80070f4 <_malloc_r+0x3c>
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f863 	bl	80071b8 <_sbrk_r>
 80070f2:	6020      	str	r0, [r4, #0]
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f85e 	bl	80071b8 <_sbrk_r>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d124      	bne.n	800714a <_malloc_r+0x92>
 8007100:	230c      	movs	r3, #12
 8007102:	6033      	str	r3, [r6, #0]
 8007104:	4630      	mov	r0, r6
 8007106:	f000 f868 	bl	80071da <__malloc_unlock>
 800710a:	e7e4      	b.n	80070d6 <_malloc_r+0x1e>
 800710c:	680b      	ldr	r3, [r1, #0]
 800710e:	1b5b      	subs	r3, r3, r5
 8007110:	d418      	bmi.n	8007144 <_malloc_r+0x8c>
 8007112:	2b0b      	cmp	r3, #11
 8007114:	d90f      	bls.n	8007136 <_malloc_r+0x7e>
 8007116:	600b      	str	r3, [r1, #0]
 8007118:	50cd      	str	r5, [r1, r3]
 800711a:	18cc      	adds	r4, r1, r3
 800711c:	4630      	mov	r0, r6
 800711e:	f000 f85c 	bl	80071da <__malloc_unlock>
 8007122:	f104 000b 	add.w	r0, r4, #11
 8007126:	1d23      	adds	r3, r4, #4
 8007128:	f020 0007 	bic.w	r0, r0, #7
 800712c:	1ac3      	subs	r3, r0, r3
 800712e:	d0d3      	beq.n	80070d8 <_malloc_r+0x20>
 8007130:	425a      	negs	r2, r3
 8007132:	50e2      	str	r2, [r4, r3]
 8007134:	e7d0      	b.n	80070d8 <_malloc_r+0x20>
 8007136:	428c      	cmp	r4, r1
 8007138:	684b      	ldr	r3, [r1, #4]
 800713a:	bf16      	itet	ne
 800713c:	6063      	strne	r3, [r4, #4]
 800713e:	6013      	streq	r3, [r2, #0]
 8007140:	460c      	movne	r4, r1
 8007142:	e7eb      	b.n	800711c <_malloc_r+0x64>
 8007144:	460c      	mov	r4, r1
 8007146:	6849      	ldr	r1, [r1, #4]
 8007148:	e7cc      	b.n	80070e4 <_malloc_r+0x2c>
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d005      	beq.n	8007160 <_malloc_r+0xa8>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4630      	mov	r0, r6
 8007158:	f000 f82e 	bl	80071b8 <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d0cf      	beq.n	8007100 <_malloc_r+0x48>
 8007160:	6025      	str	r5, [r4, #0]
 8007162:	e7db      	b.n	800711c <_malloc_r+0x64>
 8007164:	20000120 	.word	0x20000120
 8007168:	20000124 	.word	0x20000124

0800716c <_realloc_r>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	4607      	mov	r7, r0
 8007170:	4614      	mov	r4, r2
 8007172:	460e      	mov	r6, r1
 8007174:	b921      	cbnz	r1, 8007180 <_realloc_r+0x14>
 8007176:	4611      	mov	r1, r2
 8007178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800717c:	f7ff bf9c 	b.w	80070b8 <_malloc_r>
 8007180:	b922      	cbnz	r2, 800718c <_realloc_r+0x20>
 8007182:	f7ff ff4b 	bl	800701c <_free_r>
 8007186:	4625      	mov	r5, r4
 8007188:	4628      	mov	r0, r5
 800718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800718c:	f000 f826 	bl	80071dc <_malloc_usable_size_r>
 8007190:	42a0      	cmp	r0, r4
 8007192:	d20f      	bcs.n	80071b4 <_realloc_r+0x48>
 8007194:	4621      	mov	r1, r4
 8007196:	4638      	mov	r0, r7
 8007198:	f7ff ff8e 	bl	80070b8 <_malloc_r>
 800719c:	4605      	mov	r5, r0
 800719e:	2800      	cmp	r0, #0
 80071a0:	d0f2      	beq.n	8007188 <_realloc_r+0x1c>
 80071a2:	4631      	mov	r1, r6
 80071a4:	4622      	mov	r2, r4
 80071a6:	f7ff fc11 	bl	80069cc <memcpy>
 80071aa:	4631      	mov	r1, r6
 80071ac:	4638      	mov	r0, r7
 80071ae:	f7ff ff35 	bl	800701c <_free_r>
 80071b2:	e7e9      	b.n	8007188 <_realloc_r+0x1c>
 80071b4:	4635      	mov	r5, r6
 80071b6:	e7e7      	b.n	8007188 <_realloc_r+0x1c>

080071b8 <_sbrk_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4c06      	ldr	r4, [pc, #24]	; (80071d4 <_sbrk_r+0x1c>)
 80071bc:	2300      	movs	r3, #0
 80071be:	4605      	mov	r5, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	f7fb fae2 	bl	800278c <_sbrk>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_sbrk_r+0x1a>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_sbrk_r+0x1a>
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	200002ec 	.word	0x200002ec

080071d8 <__malloc_lock>:
 80071d8:	4770      	bx	lr

080071da <__malloc_unlock>:
 80071da:	4770      	bx	lr

080071dc <_malloc_usable_size_r>:
 80071dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e0:	1f18      	subs	r0, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bfbc      	itt	lt
 80071e6:	580b      	ldrlt	r3, [r1, r0]
 80071e8:	18c0      	addlt	r0, r0, r3
 80071ea:	4770      	bx	lr
 80071ec:	0000      	movs	r0, r0
	...

080071f0 <sin>:
 80071f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071f2:	ec51 0b10 	vmov	r0, r1, d0
 80071f6:	4a20      	ldr	r2, [pc, #128]	; (8007278 <sin+0x88>)
 80071f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071fc:	4293      	cmp	r3, r2
 80071fe:	dc07      	bgt.n	8007210 <sin+0x20>
 8007200:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007270 <sin+0x80>
 8007204:	2000      	movs	r0, #0
 8007206:	f000 fe37 	bl	8007e78 <__kernel_sin>
 800720a:	ec51 0b10 	vmov	r0, r1, d0
 800720e:	e007      	b.n	8007220 <sin+0x30>
 8007210:	4a1a      	ldr	r2, [pc, #104]	; (800727c <sin+0x8c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	dd09      	ble.n	800722a <sin+0x3a>
 8007216:	ee10 2a10 	vmov	r2, s0
 800721a:	460b      	mov	r3, r1
 800721c:	f7f9 f83c 	bl	8000298 <__aeabi_dsub>
 8007220:	ec41 0b10 	vmov	d0, r0, r1
 8007224:	b005      	add	sp, #20
 8007226:	f85d fb04 	ldr.w	pc, [sp], #4
 800722a:	4668      	mov	r0, sp
 800722c:	f000 f828 	bl	8007280 <__ieee754_rem_pio2>
 8007230:	f000 0003 	and.w	r0, r0, #3
 8007234:	2801      	cmp	r0, #1
 8007236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800723a:	ed9d 0b00 	vldr	d0, [sp]
 800723e:	d004      	beq.n	800724a <sin+0x5a>
 8007240:	2802      	cmp	r0, #2
 8007242:	d005      	beq.n	8007250 <sin+0x60>
 8007244:	b970      	cbnz	r0, 8007264 <sin+0x74>
 8007246:	2001      	movs	r0, #1
 8007248:	e7dd      	b.n	8007206 <sin+0x16>
 800724a:	f000 fa0d 	bl	8007668 <__kernel_cos>
 800724e:	e7dc      	b.n	800720a <sin+0x1a>
 8007250:	2001      	movs	r0, #1
 8007252:	f000 fe11 	bl	8007e78 <__kernel_sin>
 8007256:	ec53 2b10 	vmov	r2, r3, d0
 800725a:	ee10 0a10 	vmov	r0, s0
 800725e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007262:	e7dd      	b.n	8007220 <sin+0x30>
 8007264:	f000 fa00 	bl	8007668 <__kernel_cos>
 8007268:	e7f5      	b.n	8007256 <sin+0x66>
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w
	...
 8007278:	3fe921fb 	.word	0x3fe921fb
 800727c:	7fefffff 	.word	0x7fefffff

08007280 <__ieee754_rem_pio2>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	ec57 6b10 	vmov	r6, r7, d0
 8007288:	4bc3      	ldr	r3, [pc, #780]	; (8007598 <__ieee754_rem_pio2+0x318>)
 800728a:	b08d      	sub	sp, #52	; 0x34
 800728c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007290:	4598      	cmp	r8, r3
 8007292:	4604      	mov	r4, r0
 8007294:	9704      	str	r7, [sp, #16]
 8007296:	dc07      	bgt.n	80072a8 <__ieee754_rem_pio2+0x28>
 8007298:	2200      	movs	r2, #0
 800729a:	2300      	movs	r3, #0
 800729c:	ed84 0b00 	vstr	d0, [r4]
 80072a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80072a4:	2500      	movs	r5, #0
 80072a6:	e027      	b.n	80072f8 <__ieee754_rem_pio2+0x78>
 80072a8:	4bbc      	ldr	r3, [pc, #752]	; (800759c <__ieee754_rem_pio2+0x31c>)
 80072aa:	4598      	cmp	r8, r3
 80072ac:	dc75      	bgt.n	800739a <__ieee754_rem_pio2+0x11a>
 80072ae:	9b04      	ldr	r3, [sp, #16]
 80072b0:	4dbb      	ldr	r5, [pc, #748]	; (80075a0 <__ieee754_rem_pio2+0x320>)
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	ee10 0a10 	vmov	r0, s0
 80072b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8007560 <__ieee754_rem_pio2+0x2e0>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	4639      	mov	r1, r7
 80072c0:	dd36      	ble.n	8007330 <__ieee754_rem_pio2+0xb0>
 80072c2:	f7f8 ffe9 	bl	8000298 <__aeabi_dsub>
 80072c6:	45a8      	cmp	r8, r5
 80072c8:	4606      	mov	r6, r0
 80072ca:	460f      	mov	r7, r1
 80072cc:	d018      	beq.n	8007300 <__ieee754_rem_pio2+0x80>
 80072ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8007568 <__ieee754_rem_pio2+0x2e8>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f8 ffe0 	bl	8000298 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	e9c4 2300 	strd	r2, r3, [r4]
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f8 ffd8 	bl	8000298 <__aeabi_dsub>
 80072e8:	a39f      	add	r3, pc, #636	; (adr r3, 8007568 <__ieee754_rem_pio2+0x2e8>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f8 ffd3 	bl	8000298 <__aeabi_dsub>
 80072f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072f6:	2501      	movs	r5, #1
 80072f8:	4628      	mov	r0, r5
 80072fa:	b00d      	add	sp, #52	; 0x34
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	a39b      	add	r3, pc, #620	; (adr r3, 8007570 <__ieee754_rem_pio2+0x2f0>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f8 ffc7 	bl	8000298 <__aeabi_dsub>
 800730a:	a39b      	add	r3, pc, #620	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2f8>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	4606      	mov	r6, r0
 8007312:	460f      	mov	r7, r1
 8007314:	f7f8 ffc0 	bl	8000298 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	e9c4 2300 	strd	r2, r3, [r4]
 8007320:	4630      	mov	r0, r6
 8007322:	4639      	mov	r1, r7
 8007324:	f7f8 ffb8 	bl	8000298 <__aeabi_dsub>
 8007328:	a393      	add	r3, pc, #588	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2f8>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e7de      	b.n	80072ee <__ieee754_rem_pio2+0x6e>
 8007330:	f7f8 ffb4 	bl	800029c <__adddf3>
 8007334:	45a8      	cmp	r8, r5
 8007336:	4606      	mov	r6, r0
 8007338:	460f      	mov	r7, r1
 800733a:	d016      	beq.n	800736a <__ieee754_rem_pio2+0xea>
 800733c:	a38a      	add	r3, pc, #552	; (adr r3, 8007568 <__ieee754_rem_pio2+0x2e8>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ffab 	bl	800029c <__adddf3>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9c4 2300 	strd	r2, r3, [r4]
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f8 ffa1 	bl	8000298 <__aeabi_dsub>
 8007356:	a384      	add	r3, pc, #528	; (adr r3, 8007568 <__ieee754_rem_pio2+0x2e8>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f8 ff9e 	bl	800029c <__adddf3>
 8007360:	f04f 35ff 	mov.w	r5, #4294967295
 8007364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007368:	e7c6      	b.n	80072f8 <__ieee754_rem_pio2+0x78>
 800736a:	a381      	add	r3, pc, #516	; (adr r3, 8007570 <__ieee754_rem_pio2+0x2f0>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f8 ff94 	bl	800029c <__adddf3>
 8007374:	a380      	add	r3, pc, #512	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2f8>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4606      	mov	r6, r0
 800737c:	460f      	mov	r7, r1
 800737e:	f7f8 ff8d 	bl	800029c <__adddf3>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	e9c4 2300 	strd	r2, r3, [r4]
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f8 ff83 	bl	8000298 <__aeabi_dsub>
 8007392:	a379      	add	r3, pc, #484	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2f8>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	e7e0      	b.n	800735c <__ieee754_rem_pio2+0xdc>
 800739a:	4b82      	ldr	r3, [pc, #520]	; (80075a4 <__ieee754_rem_pio2+0x324>)
 800739c:	4598      	cmp	r8, r3
 800739e:	f300 80d0 	bgt.w	8007542 <__ieee754_rem_pio2+0x2c2>
 80073a2:	f000 fe23 	bl	8007fec <fabs>
 80073a6:	ec57 6b10 	vmov	r6, r7, d0
 80073aa:	ee10 0a10 	vmov	r0, s0
 80073ae:	a374      	add	r3, pc, #464	; (adr r3, 8007580 <__ieee754_rem_pio2+0x300>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	4639      	mov	r1, r7
 80073b6:	f7f9 f927 	bl	8000608 <__aeabi_dmul>
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b7a      	ldr	r3, [pc, #488]	; (80075a8 <__ieee754_rem_pio2+0x328>)
 80073be:	f7f8 ff6d 	bl	800029c <__adddf3>
 80073c2:	f7f9 fbbb 	bl	8000b3c <__aeabi_d2iz>
 80073c6:	4605      	mov	r5, r0
 80073c8:	f7f9 f8b4 	bl	8000534 <__aeabi_i2d>
 80073cc:	a364      	add	r3, pc, #400	; (adr r3, 8007560 <__ieee754_rem_pio2+0x2e0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d6:	f7f9 f917 	bl	8000608 <__aeabi_dmul>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4630      	mov	r0, r6
 80073e0:	4639      	mov	r1, r7
 80073e2:	f7f8 ff59 	bl	8000298 <__aeabi_dsub>
 80073e6:	a360      	add	r3, pc, #384	; (adr r3, 8007568 <__ieee754_rem_pio2+0x2e8>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	4682      	mov	sl, r0
 80073ee:	468b      	mov	fp, r1
 80073f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073f4:	f7f9 f908 	bl	8000608 <__aeabi_dmul>
 80073f8:	2d1f      	cmp	r5, #31
 80073fa:	4606      	mov	r6, r0
 80073fc:	460f      	mov	r7, r1
 80073fe:	dc0c      	bgt.n	800741a <__ieee754_rem_pio2+0x19a>
 8007400:	1e6a      	subs	r2, r5, #1
 8007402:	4b6a      	ldr	r3, [pc, #424]	; (80075ac <__ieee754_rem_pio2+0x32c>)
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	4543      	cmp	r3, r8
 800740a:	d006      	beq.n	800741a <__ieee754_rem_pio2+0x19a>
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	4650      	mov	r0, sl
 8007412:	4659      	mov	r1, fp
 8007414:	f7f8 ff40 	bl	8000298 <__aeabi_dsub>
 8007418:	e00e      	b.n	8007438 <__ieee754_rem_pio2+0x1b8>
 800741a:	4632      	mov	r2, r6
 800741c:	463b      	mov	r3, r7
 800741e:	4650      	mov	r0, sl
 8007420:	4659      	mov	r1, fp
 8007422:	f7f8 ff39 	bl	8000298 <__aeabi_dsub>
 8007426:	ea4f 5328 	mov.w	r3, r8, asr #20
 800742a:	9305      	str	r3, [sp, #20]
 800742c:	9a05      	ldr	r2, [sp, #20]
 800742e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b10      	cmp	r3, #16
 8007436:	dc02      	bgt.n	800743e <__ieee754_rem_pio2+0x1be>
 8007438:	e9c4 0100 	strd	r0, r1, [r4]
 800743c:	e039      	b.n	80074b2 <__ieee754_rem_pio2+0x232>
 800743e:	a34c      	add	r3, pc, #304	; (adr r3, 8007570 <__ieee754_rem_pio2+0x2f0>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007448:	f7f9 f8de 	bl	8000608 <__aeabi_dmul>
 800744c:	4606      	mov	r6, r0
 800744e:	460f      	mov	r7, r1
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4650      	mov	r0, sl
 8007456:	4659      	mov	r1, fp
 8007458:	f7f8 ff1e 	bl	8000298 <__aeabi_dsub>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4680      	mov	r8, r0
 8007462:	4689      	mov	r9, r1
 8007464:	4650      	mov	r0, sl
 8007466:	4659      	mov	r1, fp
 8007468:	f7f8 ff16 	bl	8000298 <__aeabi_dsub>
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	f7f8 ff12 	bl	8000298 <__aeabi_dsub>
 8007474:	a340      	add	r3, pc, #256	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2f8>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	4606      	mov	r6, r0
 800747c:	460f      	mov	r7, r1
 800747e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007482:	f7f9 f8c1 	bl	8000608 <__aeabi_dmul>
 8007486:	4632      	mov	r2, r6
 8007488:	463b      	mov	r3, r7
 800748a:	f7f8 ff05 	bl	8000298 <__aeabi_dsub>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	4640      	mov	r0, r8
 8007498:	4649      	mov	r1, r9
 800749a:	f7f8 fefd 	bl	8000298 <__aeabi_dsub>
 800749e:	9a05      	ldr	r2, [sp, #20]
 80074a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b31      	cmp	r3, #49	; 0x31
 80074a8:	dc20      	bgt.n	80074ec <__ieee754_rem_pio2+0x26c>
 80074aa:	e9c4 0100 	strd	r0, r1, [r4]
 80074ae:	46c2      	mov	sl, r8
 80074b0:	46cb      	mov	fp, r9
 80074b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80074b6:	4650      	mov	r0, sl
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	4659      	mov	r1, fp
 80074be:	f7f8 feeb 	bl	8000298 <__aeabi_dsub>
 80074c2:	463b      	mov	r3, r7
 80074c4:	4632      	mov	r2, r6
 80074c6:	f7f8 fee7 	bl	8000298 <__aeabi_dsub>
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80074d2:	f6bf af11 	bge.w	80072f8 <__ieee754_rem_pio2+0x78>
 80074d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	f8c4 8000 	str.w	r8, [r4]
 80074e0:	60a0      	str	r0, [r4, #8]
 80074e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074e6:	60e3      	str	r3, [r4, #12]
 80074e8:	426d      	negs	r5, r5
 80074ea:	e705      	b.n	80072f8 <__ieee754_rem_pio2+0x78>
 80074ec:	a326      	add	r3, pc, #152	; (adr r3, 8007588 <__ieee754_rem_pio2+0x308>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f6:	f7f9 f887 	bl	8000608 <__aeabi_dmul>
 80074fa:	4606      	mov	r6, r0
 80074fc:	460f      	mov	r7, r1
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4640      	mov	r0, r8
 8007504:	4649      	mov	r1, r9
 8007506:	f7f8 fec7 	bl	8000298 <__aeabi_dsub>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4682      	mov	sl, r0
 8007510:	468b      	mov	fp, r1
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f8 febf 	bl	8000298 <__aeabi_dsub>
 800751a:	4632      	mov	r2, r6
 800751c:	463b      	mov	r3, r7
 800751e:	f7f8 febb 	bl	8000298 <__aeabi_dsub>
 8007522:	a31b      	add	r3, pc, #108	; (adr r3, 8007590 <__ieee754_rem_pio2+0x310>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007530:	f7f9 f86a 	bl	8000608 <__aeabi_dmul>
 8007534:	4632      	mov	r2, r6
 8007536:	463b      	mov	r3, r7
 8007538:	f7f8 feae 	bl	8000298 <__aeabi_dsub>
 800753c:	4606      	mov	r6, r0
 800753e:	460f      	mov	r7, r1
 8007540:	e764      	b.n	800740c <__ieee754_rem_pio2+0x18c>
 8007542:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <__ieee754_rem_pio2+0x330>)
 8007544:	4598      	cmp	r8, r3
 8007546:	dd35      	ble.n	80075b4 <__ieee754_rem_pio2+0x334>
 8007548:	ee10 2a10 	vmov	r2, s0
 800754c:	463b      	mov	r3, r7
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f8 fea1 	bl	8000298 <__aeabi_dsub>
 8007556:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800755a:	e9c4 0100 	strd	r0, r1, [r4]
 800755e:	e6a1      	b.n	80072a4 <__ieee754_rem_pio2+0x24>
 8007560:	54400000 	.word	0x54400000
 8007564:	3ff921fb 	.word	0x3ff921fb
 8007568:	1a626331 	.word	0x1a626331
 800756c:	3dd0b461 	.word	0x3dd0b461
 8007570:	1a600000 	.word	0x1a600000
 8007574:	3dd0b461 	.word	0x3dd0b461
 8007578:	2e037073 	.word	0x2e037073
 800757c:	3ba3198a 	.word	0x3ba3198a
 8007580:	6dc9c883 	.word	0x6dc9c883
 8007584:	3fe45f30 	.word	0x3fe45f30
 8007588:	2e000000 	.word	0x2e000000
 800758c:	3ba3198a 	.word	0x3ba3198a
 8007590:	252049c1 	.word	0x252049c1
 8007594:	397b839a 	.word	0x397b839a
 8007598:	3fe921fb 	.word	0x3fe921fb
 800759c:	4002d97b 	.word	0x4002d97b
 80075a0:	3ff921fb 	.word	0x3ff921fb
 80075a4:	413921fb 	.word	0x413921fb
 80075a8:	3fe00000 	.word	0x3fe00000
 80075ac:	080084d4 	.word	0x080084d4
 80075b0:	7fefffff 	.word	0x7fefffff
 80075b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80075b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80075bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80075c0:	4630      	mov	r0, r6
 80075c2:	460f      	mov	r7, r1
 80075c4:	f7f9 faba 	bl	8000b3c <__aeabi_d2iz>
 80075c8:	f7f8 ffb4 	bl	8000534 <__aeabi_i2d>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075d8:	f7f8 fe5e 	bl	8000298 <__aeabi_dsub>
 80075dc:	2200      	movs	r2, #0
 80075de:	4b1f      	ldr	r3, [pc, #124]	; (800765c <__ieee754_rem_pio2+0x3dc>)
 80075e0:	f7f9 f812 	bl	8000608 <__aeabi_dmul>
 80075e4:	460f      	mov	r7, r1
 80075e6:	4606      	mov	r6, r0
 80075e8:	f7f9 faa8 	bl	8000b3c <__aeabi_d2iz>
 80075ec:	f7f8 ffa2 	bl	8000534 <__aeabi_i2d>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4630      	mov	r0, r6
 80075f6:	4639      	mov	r1, r7
 80075f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075fc:	f7f8 fe4c 	bl	8000298 <__aeabi_dsub>
 8007600:	2200      	movs	r2, #0
 8007602:	4b16      	ldr	r3, [pc, #88]	; (800765c <__ieee754_rem_pio2+0x3dc>)
 8007604:	f7f9 f800 	bl	8000608 <__aeabi_dmul>
 8007608:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800760c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007610:	f04f 0803 	mov.w	r8, #3
 8007614:	2600      	movs	r6, #0
 8007616:	2700      	movs	r7, #0
 8007618:	4632      	mov	r2, r6
 800761a:	463b      	mov	r3, r7
 800761c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007620:	f108 3aff 	add.w	sl, r8, #4294967295
 8007624:	f7f9 fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007628:	b9b0      	cbnz	r0, 8007658 <__ieee754_rem_pio2+0x3d8>
 800762a:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <__ieee754_rem_pio2+0x3e0>)
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	2302      	movs	r3, #2
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	462a      	mov	r2, r5
 8007634:	4643      	mov	r3, r8
 8007636:	4621      	mov	r1, r4
 8007638:	a806      	add	r0, sp, #24
 800763a:	f000 f8dd 	bl	80077f8 <__kernel_rem_pio2>
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	4605      	mov	r5, r0
 8007644:	f6bf ae58 	bge.w	80072f8 <__ieee754_rem_pio2+0x78>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800764e:	6063      	str	r3, [r4, #4]
 8007650:	68e3      	ldr	r3, [r4, #12]
 8007652:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007656:	e746      	b.n	80074e6 <__ieee754_rem_pio2+0x266>
 8007658:	46d0      	mov	r8, sl
 800765a:	e7dd      	b.n	8007618 <__ieee754_rem_pio2+0x398>
 800765c:	41700000 	.word	0x41700000
 8007660:	08008554 	.word	0x08008554
 8007664:	00000000 	.word	0x00000000

08007668 <__kernel_cos>:
 8007668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	ec59 8b10 	vmov	r8, r9, d0
 8007670:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007674:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007678:	ed2d 8b02 	vpush	{d8}
 800767c:	eeb0 8a41 	vmov.f32	s16, s2
 8007680:	eef0 8a61 	vmov.f32	s17, s3
 8007684:	da07      	bge.n	8007696 <__kernel_cos+0x2e>
 8007686:	ee10 0a10 	vmov	r0, s0
 800768a:	4649      	mov	r1, r9
 800768c:	f7f9 fa56 	bl	8000b3c <__aeabi_d2iz>
 8007690:	2800      	cmp	r0, #0
 8007692:	f000 8089 	beq.w	80077a8 <__kernel_cos+0x140>
 8007696:	4642      	mov	r2, r8
 8007698:	464b      	mov	r3, r9
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	2200      	movs	r2, #0
 80076a4:	4b4e      	ldr	r3, [pc, #312]	; (80077e0 <__kernel_cos+0x178>)
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	f7f8 ffad 	bl	8000608 <__aeabi_dmul>
 80076ae:	a340      	add	r3, pc, #256	; (adr r3, 80077b0 <__kernel_cos+0x148>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	4682      	mov	sl, r0
 80076b6:	468b      	mov	fp, r1
 80076b8:	4620      	mov	r0, r4
 80076ba:	4629      	mov	r1, r5
 80076bc:	f7f8 ffa4 	bl	8000608 <__aeabi_dmul>
 80076c0:	a33d      	add	r3, pc, #244	; (adr r3, 80077b8 <__kernel_cos+0x150>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 fde9 	bl	800029c <__adddf3>
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	f7f8 ff9b 	bl	8000608 <__aeabi_dmul>
 80076d2:	a33b      	add	r3, pc, #236	; (adr r3, 80077c0 <__kernel_cos+0x158>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 fdde 	bl	8000298 <__aeabi_dsub>
 80076dc:	4622      	mov	r2, r4
 80076de:	462b      	mov	r3, r5
 80076e0:	f7f8 ff92 	bl	8000608 <__aeabi_dmul>
 80076e4:	a338      	add	r3, pc, #224	; (adr r3, 80077c8 <__kernel_cos+0x160>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fdd7 	bl	800029c <__adddf3>
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	f7f8 ff89 	bl	8000608 <__aeabi_dmul>
 80076f6:	a336      	add	r3, pc, #216	; (adr r3, 80077d0 <__kernel_cos+0x168>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fdcc 	bl	8000298 <__aeabi_dsub>
 8007700:	4622      	mov	r2, r4
 8007702:	462b      	mov	r3, r5
 8007704:	f7f8 ff80 	bl	8000608 <__aeabi_dmul>
 8007708:	a333      	add	r3, pc, #204	; (adr r3, 80077d8 <__kernel_cos+0x170>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fdc5 	bl	800029c <__adddf3>
 8007712:	4622      	mov	r2, r4
 8007714:	462b      	mov	r3, r5
 8007716:	f7f8 ff77 	bl	8000608 <__aeabi_dmul>
 800771a:	4622      	mov	r2, r4
 800771c:	462b      	mov	r3, r5
 800771e:	f7f8 ff73 	bl	8000608 <__aeabi_dmul>
 8007722:	ec53 2b18 	vmov	r2, r3, d8
 8007726:	4604      	mov	r4, r0
 8007728:	460d      	mov	r5, r1
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f8 ff6b 	bl	8000608 <__aeabi_dmul>
 8007732:	460b      	mov	r3, r1
 8007734:	4602      	mov	r2, r0
 8007736:	4629      	mov	r1, r5
 8007738:	4620      	mov	r0, r4
 800773a:	f7f8 fdad 	bl	8000298 <__aeabi_dsub>
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <__kernel_cos+0x17c>)
 8007740:	429e      	cmp	r6, r3
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	dc11      	bgt.n	800776c <__kernel_cos+0x104>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4650      	mov	r0, sl
 800774e:	4659      	mov	r1, fp
 8007750:	f7f8 fda2 	bl	8000298 <__aeabi_dsub>
 8007754:	460b      	mov	r3, r1
 8007756:	4924      	ldr	r1, [pc, #144]	; (80077e8 <__kernel_cos+0x180>)
 8007758:	4602      	mov	r2, r0
 800775a:	2000      	movs	r0, #0
 800775c:	f7f8 fd9c 	bl	8000298 <__aeabi_dsub>
 8007760:	ecbd 8b02 	vpop	{d8}
 8007764:	ec41 0b10 	vmov	d0, r0, r1
 8007768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <__kernel_cos+0x184>)
 800776e:	491e      	ldr	r1, [pc, #120]	; (80077e8 <__kernel_cos+0x180>)
 8007770:	429e      	cmp	r6, r3
 8007772:	bfcc      	ite	gt
 8007774:	4d1e      	ldrgt	r5, [pc, #120]	; (80077f0 <__kernel_cos+0x188>)
 8007776:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800777a:	2400      	movs	r4, #0
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	2000      	movs	r0, #0
 8007782:	f7f8 fd89 	bl	8000298 <__aeabi_dsub>
 8007786:	4622      	mov	r2, r4
 8007788:	4606      	mov	r6, r0
 800778a:	460f      	mov	r7, r1
 800778c:	462b      	mov	r3, r5
 800778e:	4650      	mov	r0, sl
 8007790:	4659      	mov	r1, fp
 8007792:	f7f8 fd81 	bl	8000298 <__aeabi_dsub>
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	f7f8 fd7d 	bl	8000298 <__aeabi_dsub>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	e7d9      	b.n	800775c <__kernel_cos+0xf4>
 80077a8:	2000      	movs	r0, #0
 80077aa:	490f      	ldr	r1, [pc, #60]	; (80077e8 <__kernel_cos+0x180>)
 80077ac:	e7d8      	b.n	8007760 <__kernel_cos+0xf8>
 80077ae:	bf00      	nop
 80077b0:	be8838d4 	.word	0xbe8838d4
 80077b4:	bda8fae9 	.word	0xbda8fae9
 80077b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80077bc:	3e21ee9e 	.word	0x3e21ee9e
 80077c0:	809c52ad 	.word	0x809c52ad
 80077c4:	3e927e4f 	.word	0x3e927e4f
 80077c8:	19cb1590 	.word	0x19cb1590
 80077cc:	3efa01a0 	.word	0x3efa01a0
 80077d0:	16c15177 	.word	0x16c15177
 80077d4:	3f56c16c 	.word	0x3f56c16c
 80077d8:	5555554c 	.word	0x5555554c
 80077dc:	3fa55555 	.word	0x3fa55555
 80077e0:	3fe00000 	.word	0x3fe00000
 80077e4:	3fd33332 	.word	0x3fd33332
 80077e8:	3ff00000 	.word	0x3ff00000
 80077ec:	3fe90000 	.word	0x3fe90000
 80077f0:	3fd20000 	.word	0x3fd20000
 80077f4:	00000000 	.word	0x00000000

080077f8 <__kernel_rem_pio2>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ed2d 8b02 	vpush	{d8}
 8007800:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007804:	1ed4      	subs	r4, r2, #3
 8007806:	9308      	str	r3, [sp, #32]
 8007808:	9101      	str	r1, [sp, #4]
 800780a:	4bc5      	ldr	r3, [pc, #788]	; (8007b20 <__kernel_rem_pio2+0x328>)
 800780c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800780e:	9009      	str	r0, [sp, #36]	; 0x24
 8007810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007814:	9304      	str	r3, [sp, #16]
 8007816:	9b08      	ldr	r3, [sp, #32]
 8007818:	3b01      	subs	r3, #1
 800781a:	9307      	str	r3, [sp, #28]
 800781c:	2318      	movs	r3, #24
 800781e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007822:	f06f 0317 	mvn.w	r3, #23
 8007826:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800782a:	fb04 3303 	mla	r3, r4, r3, r3
 800782e:	eb03 0a02 	add.w	sl, r3, r2
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	9a07      	ldr	r2, [sp, #28]
 8007836:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007b10 <__kernel_rem_pio2+0x318>
 800783a:	eb03 0802 	add.w	r8, r3, r2
 800783e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007840:	1aa7      	subs	r7, r4, r2
 8007842:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007846:	ae22      	add	r6, sp, #136	; 0x88
 8007848:	2500      	movs	r5, #0
 800784a:	4545      	cmp	r5, r8
 800784c:	dd13      	ble.n	8007876 <__kernel_rem_pio2+0x7e>
 800784e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007b10 <__kernel_rem_pio2+0x318>
 8007852:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007856:	2600      	movs	r6, #0
 8007858:	9b04      	ldr	r3, [sp, #16]
 800785a:	429e      	cmp	r6, r3
 800785c:	dc32      	bgt.n	80078c4 <__kernel_rem_pio2+0xcc>
 800785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007860:	9302      	str	r3, [sp, #8]
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	199d      	adds	r5, r3, r6
 8007866:	ab22      	add	r3, sp, #136	; 0x88
 8007868:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800786c:	9306      	str	r3, [sp, #24]
 800786e:	ec59 8b18 	vmov	r8, r9, d8
 8007872:	2700      	movs	r7, #0
 8007874:	e01f      	b.n	80078b6 <__kernel_rem_pio2+0xbe>
 8007876:	42ef      	cmn	r7, r5
 8007878:	d407      	bmi.n	800788a <__kernel_rem_pio2+0x92>
 800787a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800787e:	f7f8 fe59 	bl	8000534 <__aeabi_i2d>
 8007882:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007886:	3501      	adds	r5, #1
 8007888:	e7df      	b.n	800784a <__kernel_rem_pio2+0x52>
 800788a:	ec51 0b18 	vmov	r0, r1, d8
 800788e:	e7f8      	b.n	8007882 <__kernel_rem_pio2+0x8a>
 8007890:	9906      	ldr	r1, [sp, #24]
 8007892:	9d02      	ldr	r5, [sp, #8]
 8007894:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007898:	9106      	str	r1, [sp, #24]
 800789a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800789e:	9502      	str	r5, [sp, #8]
 80078a0:	f7f8 feb2 	bl	8000608 <__aeabi_dmul>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4640      	mov	r0, r8
 80078aa:	4649      	mov	r1, r9
 80078ac:	f7f8 fcf6 	bl	800029c <__adddf3>
 80078b0:	3701      	adds	r7, #1
 80078b2:	4680      	mov	r8, r0
 80078b4:	4689      	mov	r9, r1
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	429f      	cmp	r7, r3
 80078ba:	dde9      	ble.n	8007890 <__kernel_rem_pio2+0x98>
 80078bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80078c0:	3601      	adds	r6, #1
 80078c2:	e7c9      	b.n	8007858 <__kernel_rem_pio2+0x60>
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	aa0e      	add	r2, sp, #56	; 0x38
 80078c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078cc:	930c      	str	r3, [sp, #48]	; 0x30
 80078ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80078d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80078d4:	9c04      	ldr	r4, [sp, #16]
 80078d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d8:	ab9a      	add	r3, sp, #616	; 0x268
 80078da:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80078de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078e6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80078ea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80078ee:	ab9a      	add	r3, sp, #616	; 0x268
 80078f0:	445b      	add	r3, fp
 80078f2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80078f6:	2500      	movs	r5, #0
 80078f8:	1b63      	subs	r3, r4, r5
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dc78      	bgt.n	80079f0 <__kernel_rem_pio2+0x1f8>
 80078fe:	4650      	mov	r0, sl
 8007900:	ec49 8b10 	vmov	d0, r8, r9
 8007904:	f000 fc00 	bl	8008108 <scalbn>
 8007908:	ec57 6b10 	vmov	r6, r7, d0
 800790c:	2200      	movs	r2, #0
 800790e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007912:	ee10 0a10 	vmov	r0, s0
 8007916:	4639      	mov	r1, r7
 8007918:	f7f8 fe76 	bl	8000608 <__aeabi_dmul>
 800791c:	ec41 0b10 	vmov	d0, r0, r1
 8007920:	f000 fb6e 	bl	8008000 <floor>
 8007924:	2200      	movs	r2, #0
 8007926:	ec51 0b10 	vmov	r0, r1, d0
 800792a:	4b7e      	ldr	r3, [pc, #504]	; (8007b24 <__kernel_rem_pio2+0x32c>)
 800792c:	f7f8 fe6c 	bl	8000608 <__aeabi_dmul>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4630      	mov	r0, r6
 8007936:	4639      	mov	r1, r7
 8007938:	f7f8 fcae 	bl	8000298 <__aeabi_dsub>
 800793c:	460f      	mov	r7, r1
 800793e:	4606      	mov	r6, r0
 8007940:	f7f9 f8fc 	bl	8000b3c <__aeabi_d2iz>
 8007944:	9006      	str	r0, [sp, #24]
 8007946:	f7f8 fdf5 	bl	8000534 <__aeabi_i2d>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f8 fca1 	bl	8000298 <__aeabi_dsub>
 8007956:	f1ba 0f00 	cmp.w	sl, #0
 800795a:	4606      	mov	r6, r0
 800795c:	460f      	mov	r7, r1
 800795e:	dd6c      	ble.n	8007a3a <__kernel_rem_pio2+0x242>
 8007960:	1e62      	subs	r2, r4, #1
 8007962:	ab0e      	add	r3, sp, #56	; 0x38
 8007964:	f1ca 0118 	rsb	r1, sl, #24
 8007968:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800796c:	9d06      	ldr	r5, [sp, #24]
 800796e:	fa40 f301 	asr.w	r3, r0, r1
 8007972:	441d      	add	r5, r3
 8007974:	408b      	lsls	r3, r1
 8007976:	1ac0      	subs	r0, r0, r3
 8007978:	ab0e      	add	r3, sp, #56	; 0x38
 800797a:	9506      	str	r5, [sp, #24]
 800797c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007980:	f1ca 0317 	rsb	r3, sl, #23
 8007984:	fa40 f303 	asr.w	r3, r0, r3
 8007988:	9302      	str	r3, [sp, #8]
 800798a:	9b02      	ldr	r3, [sp, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dd62      	ble.n	8007a56 <__kernel_rem_pio2+0x25e>
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	2200      	movs	r2, #0
 8007994:	3301      	adds	r3, #1
 8007996:	9306      	str	r3, [sp, #24]
 8007998:	4615      	mov	r5, r2
 800799a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800799e:	4294      	cmp	r4, r2
 80079a0:	f300 8095 	bgt.w	8007ace <__kernel_rem_pio2+0x2d6>
 80079a4:	f1ba 0f00 	cmp.w	sl, #0
 80079a8:	dd07      	ble.n	80079ba <__kernel_rem_pio2+0x1c2>
 80079aa:	f1ba 0f01 	cmp.w	sl, #1
 80079ae:	f000 80a2 	beq.w	8007af6 <__kernel_rem_pio2+0x2fe>
 80079b2:	f1ba 0f02 	cmp.w	sl, #2
 80079b6:	f000 80c1 	beq.w	8007b3c <__kernel_rem_pio2+0x344>
 80079ba:	9b02      	ldr	r3, [sp, #8]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d14a      	bne.n	8007a56 <__kernel_rem_pio2+0x25e>
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	2000      	movs	r0, #0
 80079c6:	4958      	ldr	r1, [pc, #352]	; (8007b28 <__kernel_rem_pio2+0x330>)
 80079c8:	f7f8 fc66 	bl	8000298 <__aeabi_dsub>
 80079cc:	4606      	mov	r6, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	d040      	beq.n	8007a56 <__kernel_rem_pio2+0x25e>
 80079d4:	4650      	mov	r0, sl
 80079d6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007b18 <__kernel_rem_pio2+0x320>
 80079da:	f000 fb95 	bl	8008108 <scalbn>
 80079de:	4630      	mov	r0, r6
 80079e0:	4639      	mov	r1, r7
 80079e2:	ec53 2b10 	vmov	r2, r3, d0
 80079e6:	f7f8 fc57 	bl	8000298 <__aeabi_dsub>
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	e032      	b.n	8007a56 <__kernel_rem_pio2+0x25e>
 80079f0:	2200      	movs	r2, #0
 80079f2:	4b4e      	ldr	r3, [pc, #312]	; (8007b2c <__kernel_rem_pio2+0x334>)
 80079f4:	4640      	mov	r0, r8
 80079f6:	4649      	mov	r1, r9
 80079f8:	f7f8 fe06 	bl	8000608 <__aeabi_dmul>
 80079fc:	f7f9 f89e 	bl	8000b3c <__aeabi_d2iz>
 8007a00:	f7f8 fd98 	bl	8000534 <__aeabi_i2d>
 8007a04:	2200      	movs	r2, #0
 8007a06:	4b4a      	ldr	r3, [pc, #296]	; (8007b30 <__kernel_rem_pio2+0x338>)
 8007a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a0c:	f7f8 fdfc 	bl	8000608 <__aeabi_dmul>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f8 fc3e 	bl	8000298 <__aeabi_dsub>
 8007a1c:	f7f9 f88e 	bl	8000b3c <__aeabi_d2iz>
 8007a20:	ab0e      	add	r3, sp, #56	; 0x38
 8007a22:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007a26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a2e:	f7f8 fc35 	bl	800029c <__adddf3>
 8007a32:	3501      	adds	r5, #1
 8007a34:	4680      	mov	r8, r0
 8007a36:	4689      	mov	r9, r1
 8007a38:	e75e      	b.n	80078f8 <__kernel_rem_pio2+0x100>
 8007a3a:	d105      	bne.n	8007a48 <__kernel_rem_pio2+0x250>
 8007a3c:	1e63      	subs	r3, r4, #1
 8007a3e:	aa0e      	add	r2, sp, #56	; 0x38
 8007a40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a44:	15c3      	asrs	r3, r0, #23
 8007a46:	e79f      	b.n	8007988 <__kernel_rem_pio2+0x190>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4b3a      	ldr	r3, [pc, #232]	; (8007b34 <__kernel_rem_pio2+0x33c>)
 8007a4c:	f7f9 f862 	bl	8000b14 <__aeabi_dcmpge>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d139      	bne.n	8007ac8 <__kernel_rem_pio2+0x2d0>
 8007a54:	9002      	str	r0, [sp, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7f9 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f000 80c7 	beq.w	8007bf6 <__kernel_rem_pio2+0x3fe>
 8007a68:	1e65      	subs	r5, r4, #1
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	9904      	ldr	r1, [sp, #16]
 8007a70:	428b      	cmp	r3, r1
 8007a72:	da6a      	bge.n	8007b4a <__kernel_rem_pio2+0x352>
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	f000 8088 	beq.w	8007b8a <__kernel_rem_pio2+0x392>
 8007a7a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80b4 	beq.w	8007bf2 <__kernel_rem_pio2+0x3fa>
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007b18 <__kernel_rem_pio2+0x320>
 8007a90:	f000 fb3a 	bl	8008108 <scalbn>
 8007a94:	00ec      	lsls	r4, r5, #3
 8007a96:	ab72      	add	r3, sp, #456	; 0x1c8
 8007a98:	191e      	adds	r6, r3, r4
 8007a9a:	ec59 8b10 	vmov	r8, r9, d0
 8007a9e:	f106 0a08 	add.w	sl, r6, #8
 8007aa2:	462f      	mov	r7, r5
 8007aa4:	2f00      	cmp	r7, #0
 8007aa6:	f280 80df 	bge.w	8007c68 <__kernel_rem_pio2+0x470>
 8007aaa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007b10 <__kernel_rem_pio2+0x318>
 8007aae:	f04f 0a00 	mov.w	sl, #0
 8007ab2:	eba5 030a 	sub.w	r3, r5, sl
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f2c0 810a 	blt.w	8007cd0 <__kernel_rem_pio2+0x4d8>
 8007abc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007b38 <__kernel_rem_pio2+0x340>
 8007ac0:	ec59 8b18 	vmov	r8, r9, d8
 8007ac4:	2700      	movs	r7, #0
 8007ac6:	e0f5      	b.n	8007cb4 <__kernel_rem_pio2+0x4bc>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	9302      	str	r3, [sp, #8]
 8007acc:	e760      	b.n	8007990 <__kernel_rem_pio2+0x198>
 8007ace:	ab0e      	add	r3, sp, #56	; 0x38
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	b94d      	cbnz	r5, 8007aea <__kernel_rem_pio2+0x2f2>
 8007ad6:	b12b      	cbz	r3, 8007ae4 <__kernel_rem_pio2+0x2ec>
 8007ad8:	a80e      	add	r0, sp, #56	; 0x38
 8007ada:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007ade:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	3201      	adds	r2, #1
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	e759      	b.n	800799e <__kernel_rem_pio2+0x1a6>
 8007aea:	a80e      	add	r0, sp, #56	; 0x38
 8007aec:	1acb      	subs	r3, r1, r3
 8007aee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007af2:	462b      	mov	r3, r5
 8007af4:	e7f6      	b.n	8007ae4 <__kernel_rem_pio2+0x2ec>
 8007af6:	1e62      	subs	r2, r4, #1
 8007af8:	ab0e      	add	r3, sp, #56	; 0x38
 8007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007b02:	a90e      	add	r1, sp, #56	; 0x38
 8007b04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007b08:	e757      	b.n	80079ba <__kernel_rem_pio2+0x1c2>
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w
	...
 8007b1c:	3ff00000 	.word	0x3ff00000
 8007b20:	080086a0 	.word	0x080086a0
 8007b24:	40200000 	.word	0x40200000
 8007b28:	3ff00000 	.word	0x3ff00000
 8007b2c:	3e700000 	.word	0x3e700000
 8007b30:	41700000 	.word	0x41700000
 8007b34:	3fe00000 	.word	0x3fe00000
 8007b38:	08008660 	.word	0x08008660
 8007b3c:	1e62      	subs	r2, r4, #1
 8007b3e:	ab0e      	add	r3, sp, #56	; 0x38
 8007b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007b48:	e7db      	b.n	8007b02 <__kernel_rem_pio2+0x30a>
 8007b4a:	a90e      	add	r1, sp, #56	; 0x38
 8007b4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	430a      	orrs	r2, r1
 8007b54:	e78b      	b.n	8007a6e <__kernel_rem_pio2+0x276>
 8007b56:	3301      	adds	r3, #1
 8007b58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d0fa      	beq.n	8007b56 <__kernel_rem_pio2+0x35e>
 8007b60:	9a08      	ldr	r2, [sp, #32]
 8007b62:	4422      	add	r2, r4
 8007b64:	00d2      	lsls	r2, r2, #3
 8007b66:	a922      	add	r1, sp, #136	; 0x88
 8007b68:	18e3      	adds	r3, r4, r3
 8007b6a:	9206      	str	r2, [sp, #24]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	f10b 0108 	add.w	r1, fp, #8
 8007b74:	f102 0308 	add.w	r3, r2, #8
 8007b78:	1c66      	adds	r6, r4, #1
 8007b7a:	910a      	str	r1, [sp, #40]	; 0x28
 8007b7c:	2500      	movs	r5, #0
 8007b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b80:	9b02      	ldr	r3, [sp, #8]
 8007b82:	42b3      	cmp	r3, r6
 8007b84:	da04      	bge.n	8007b90 <__kernel_rem_pio2+0x398>
 8007b86:	461c      	mov	r4, r3
 8007b88:	e6a6      	b.n	80078d8 <__kernel_rem_pio2+0xe0>
 8007b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e7e3      	b.n	8007b58 <__kernel_rem_pio2+0x360>
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	18ef      	adds	r7, r5, r3
 8007b94:	ab22      	add	r3, sp, #136	; 0x88
 8007b96:	441f      	add	r7, r3
 8007b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b9e:	f7f8 fcc9 	bl	8000534 <__aeabi_i2d>
 8007ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba4:	461c      	mov	r4, r3
 8007ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba8:	e9c7 0100 	strd	r0, r1, [r7]
 8007bac:	eb03 0b05 	add.w	fp, r3, r5
 8007bb0:	2700      	movs	r7, #0
 8007bb2:	f04f 0800 	mov.w	r8, #0
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	9b07      	ldr	r3, [sp, #28]
 8007bbc:	429f      	cmp	r7, r3
 8007bbe:	dd08      	ble.n	8007bd2 <__kernel_rem_pio2+0x3da>
 8007bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc2:	aa72      	add	r2, sp, #456	; 0x1c8
 8007bc4:	18eb      	adds	r3, r5, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007bcc:	3601      	adds	r6, #1
 8007bce:	3508      	adds	r5, #8
 8007bd0:	e7d6      	b.n	8007b80 <__kernel_rem_pio2+0x388>
 8007bd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007bd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007bda:	f7f8 fd15 	bl	8000608 <__aeabi_dmul>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fb59 	bl	800029c <__adddf3>
 8007bea:	3701      	adds	r7, #1
 8007bec:	4680      	mov	r8, r0
 8007bee:	4689      	mov	r9, r1
 8007bf0:	e7e3      	b.n	8007bba <__kernel_rem_pio2+0x3c2>
 8007bf2:	3d01      	subs	r5, #1
 8007bf4:	e741      	b.n	8007a7a <__kernel_rem_pio2+0x282>
 8007bf6:	f1ca 0000 	rsb	r0, sl, #0
 8007bfa:	ec47 6b10 	vmov	d0, r6, r7
 8007bfe:	f000 fa83 	bl	8008108 <scalbn>
 8007c02:	ec57 6b10 	vmov	r6, r7, d0
 8007c06:	2200      	movs	r2, #0
 8007c08:	4b99      	ldr	r3, [pc, #612]	; (8007e70 <__kernel_rem_pio2+0x678>)
 8007c0a:	ee10 0a10 	vmov	r0, s0
 8007c0e:	4639      	mov	r1, r7
 8007c10:	f7f8 ff80 	bl	8000b14 <__aeabi_dcmpge>
 8007c14:	b1f8      	cbz	r0, 8007c56 <__kernel_rem_pio2+0x45e>
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b96      	ldr	r3, [pc, #600]	; (8007e74 <__kernel_rem_pio2+0x67c>)
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 fcf3 	bl	8000608 <__aeabi_dmul>
 8007c22:	f7f8 ff8b 	bl	8000b3c <__aeabi_d2iz>
 8007c26:	4680      	mov	r8, r0
 8007c28:	f7f8 fc84 	bl	8000534 <__aeabi_i2d>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4b90      	ldr	r3, [pc, #576]	; (8007e70 <__kernel_rem_pio2+0x678>)
 8007c30:	f7f8 fcea 	bl	8000608 <__aeabi_dmul>
 8007c34:	460b      	mov	r3, r1
 8007c36:	4602      	mov	r2, r0
 8007c38:	4639      	mov	r1, r7
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f7f8 fb2c 	bl	8000298 <__aeabi_dsub>
 8007c40:	f7f8 ff7c 	bl	8000b3c <__aeabi_d2iz>
 8007c44:	1c65      	adds	r5, r4, #1
 8007c46:	ab0e      	add	r3, sp, #56	; 0x38
 8007c48:	f10a 0a18 	add.w	sl, sl, #24
 8007c4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c50:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007c54:	e719      	b.n	8007a8a <__kernel_rem_pio2+0x292>
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 ff6f 	bl	8000b3c <__aeabi_d2iz>
 8007c5e:	ab0e      	add	r3, sp, #56	; 0x38
 8007c60:	4625      	mov	r5, r4
 8007c62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c66:	e710      	b.n	8007a8a <__kernel_rem_pio2+0x292>
 8007c68:	ab0e      	add	r3, sp, #56	; 0x38
 8007c6a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007c6e:	f7f8 fc61 	bl	8000534 <__aeabi_i2d>
 8007c72:	4642      	mov	r2, r8
 8007c74:	464b      	mov	r3, r9
 8007c76:	f7f8 fcc7 	bl	8000608 <__aeabi_dmul>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007c80:	4b7c      	ldr	r3, [pc, #496]	; (8007e74 <__kernel_rem_pio2+0x67c>)
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	f7f8 fcbf 	bl	8000608 <__aeabi_dmul>
 8007c8a:	3f01      	subs	r7, #1
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	e708      	b.n	8007aa4 <__kernel_rem_pio2+0x2ac>
 8007c92:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007c9e:	f7f8 fcb3 	bl	8000608 <__aeabi_dmul>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	4649      	mov	r1, r9
 8007caa:	f7f8 faf7 	bl	800029c <__adddf3>
 8007cae:	3701      	adds	r7, #1
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	429f      	cmp	r7, r3
 8007cb8:	dc01      	bgt.n	8007cbe <__kernel_rem_pio2+0x4c6>
 8007cba:	45ba      	cmp	sl, r7
 8007cbc:	dae9      	bge.n	8007c92 <__kernel_rem_pio2+0x49a>
 8007cbe:	ab4a      	add	r3, sp, #296	; 0x128
 8007cc0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cc4:	e9c3 8900 	strd	r8, r9, [r3]
 8007cc8:	f10a 0a01 	add.w	sl, sl, #1
 8007ccc:	3e08      	subs	r6, #8
 8007cce:	e6f0      	b.n	8007ab2 <__kernel_rem_pio2+0x2ba>
 8007cd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d85b      	bhi.n	8007d8e <__kernel_rem_pio2+0x596>
 8007cd6:	e8df f003 	tbb	[pc, r3]
 8007cda:	264a      	.short	0x264a
 8007cdc:	0226      	.short	0x0226
 8007cde:	ab9a      	add	r3, sp, #616	; 0x268
 8007ce0:	441c      	add	r4, r3
 8007ce2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007ce6:	46a2      	mov	sl, r4
 8007ce8:	46ab      	mov	fp, r5
 8007cea:	f1bb 0f00 	cmp.w	fp, #0
 8007cee:	dc6c      	bgt.n	8007dca <__kernel_rem_pio2+0x5d2>
 8007cf0:	46a2      	mov	sl, r4
 8007cf2:	46ab      	mov	fp, r5
 8007cf4:	f1bb 0f01 	cmp.w	fp, #1
 8007cf8:	f300 8086 	bgt.w	8007e08 <__kernel_rem_pio2+0x610>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	2d01      	cmp	r5, #1
 8007d02:	f300 80a0 	bgt.w	8007e46 <__kernel_rem_pio2+0x64e>
 8007d06:	9b02      	ldr	r3, [sp, #8]
 8007d08:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007d0c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 809e 	bne.w	8007e52 <__kernel_rem_pio2+0x65a>
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	e9c3 7800 	strd	r7, r8, [r3]
 8007d1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007d20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007d24:	e033      	b.n	8007d8e <__kernel_rem_pio2+0x596>
 8007d26:	3408      	adds	r4, #8
 8007d28:	ab4a      	add	r3, sp, #296	; 0x128
 8007d2a:	441c      	add	r4, r3
 8007d2c:	462e      	mov	r6, r5
 8007d2e:	2000      	movs	r0, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	2e00      	cmp	r6, #0
 8007d34:	da3a      	bge.n	8007dac <__kernel_rem_pio2+0x5b4>
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d03d      	beq.n	8007db8 <__kernel_rem_pio2+0x5c0>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d42:	9c01      	ldr	r4, [sp, #4]
 8007d44:	e9c4 2300 	strd	r2, r3, [r4]
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007d50:	f7f8 faa2 	bl	8000298 <__aeabi_dsub>
 8007d54:	ae4c      	add	r6, sp, #304	; 0x130
 8007d56:	2401      	movs	r4, #1
 8007d58:	42a5      	cmp	r5, r4
 8007d5a:	da30      	bge.n	8007dbe <__kernel_rem_pio2+0x5c6>
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	b113      	cbz	r3, 8007d66 <__kernel_rem_pio2+0x56e>
 8007d60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d64:	4619      	mov	r1, r3
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d6c:	e00f      	b.n	8007d8e <__kernel_rem_pio2+0x596>
 8007d6e:	ab9a      	add	r3, sp, #616	; 0x268
 8007d70:	441c      	add	r4, r3
 8007d72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007d76:	2000      	movs	r0, #0
 8007d78:	2100      	movs	r1, #0
 8007d7a:	2d00      	cmp	r5, #0
 8007d7c:	da10      	bge.n	8007da0 <__kernel_rem_pio2+0x5a8>
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	b113      	cbz	r3, 8007d88 <__kernel_rem_pio2+0x590>
 8007d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d86:	4619      	mov	r1, r3
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	e9c3 0100 	strd	r0, r1, [r3]
 8007d8e:	9b06      	ldr	r3, [sp, #24]
 8007d90:	f003 0007 	and.w	r0, r3, #7
 8007d94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007d98:	ecbd 8b02 	vpop	{d8}
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007da4:	f7f8 fa7a 	bl	800029c <__adddf3>
 8007da8:	3d01      	subs	r5, #1
 8007daa:	e7e6      	b.n	8007d7a <__kernel_rem_pio2+0x582>
 8007dac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007db0:	f7f8 fa74 	bl	800029c <__adddf3>
 8007db4:	3e01      	subs	r6, #1
 8007db6:	e7bc      	b.n	8007d32 <__kernel_rem_pio2+0x53a>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	e7c1      	b.n	8007d42 <__kernel_rem_pio2+0x54a>
 8007dbe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007dc2:	f7f8 fa6b 	bl	800029c <__adddf3>
 8007dc6:	3401      	adds	r4, #1
 8007dc8:	e7c6      	b.n	8007d58 <__kernel_rem_pio2+0x560>
 8007dca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007dce:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	ec53 2b17 	vmov	r2, r3, d7
 8007dd8:	4649      	mov	r1, r9
 8007dda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007dde:	f7f8 fa5d 	bl	800029c <__adddf3>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4606      	mov	r6, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	4640      	mov	r0, r8
 8007dec:	4649      	mov	r1, r9
 8007dee:	f7f8 fa53 	bl	8000298 <__aeabi_dsub>
 8007df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df6:	f7f8 fa51 	bl	800029c <__adddf3>
 8007dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007dfe:	e9ca 0100 	strd	r0, r1, [sl]
 8007e02:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007e06:	e770      	b.n	8007cea <__kernel_rem_pio2+0x4f2>
 8007e08:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007e0c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007e10:	4630      	mov	r0, r6
 8007e12:	ec53 2b17 	vmov	r2, r3, d7
 8007e16:	4639      	mov	r1, r7
 8007e18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e1c:	f7f8 fa3e 	bl	800029c <__adddf3>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4680      	mov	r8, r0
 8007e26:	4689      	mov	r9, r1
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fa34 	bl	8000298 <__aeabi_dsub>
 8007e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e34:	f7f8 fa32 	bl	800029c <__adddf3>
 8007e38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e3c:	e9ca 0100 	strd	r0, r1, [sl]
 8007e40:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007e44:	e756      	b.n	8007cf4 <__kernel_rem_pio2+0x4fc>
 8007e46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e4a:	f7f8 fa27 	bl	800029c <__adddf3>
 8007e4e:	3d01      	subs	r5, #1
 8007e50:	e756      	b.n	8007d00 <__kernel_rem_pio2+0x508>
 8007e52:	9b01      	ldr	r3, [sp, #4]
 8007e54:	9a01      	ldr	r2, [sp, #4]
 8007e56:	601f      	str	r7, [r3, #0]
 8007e58:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007e5c:	605c      	str	r4, [r3, #4]
 8007e5e:	609d      	str	r5, [r3, #8]
 8007e60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e64:	60d3      	str	r3, [r2, #12]
 8007e66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e6a:	6110      	str	r0, [r2, #16]
 8007e6c:	6153      	str	r3, [r2, #20]
 8007e6e:	e78e      	b.n	8007d8e <__kernel_rem_pio2+0x596>
 8007e70:	41700000 	.word	0x41700000
 8007e74:	3e700000 	.word	0x3e700000

08007e78 <__kernel_sin>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ec55 4b10 	vmov	r4, r5, d0
 8007e80:	b085      	sub	sp, #20
 8007e82:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e86:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e8a:	ed8d 1b00 	vstr	d1, [sp]
 8007e8e:	9002      	str	r0, [sp, #8]
 8007e90:	da06      	bge.n	8007ea0 <__kernel_sin+0x28>
 8007e92:	ee10 0a10 	vmov	r0, s0
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fe50 	bl	8000b3c <__aeabi_d2iz>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d051      	beq.n	8007f44 <__kernel_sin+0xcc>
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	462b      	mov	r3, r5
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 fbae 	bl	8000608 <__aeabi_dmul>
 8007eac:	4682      	mov	sl, r0
 8007eae:	468b      	mov	fp, r1
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 fba6 	bl	8000608 <__aeabi_dmul>
 8007ebc:	a341      	add	r3, pc, #260	; (adr r3, 8007fc4 <__kernel_sin+0x14c>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4689      	mov	r9, r1
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	4659      	mov	r1, fp
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	a33f      	add	r3, pc, #252	; (adr r3, 8007fcc <__kernel_sin+0x154>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 f9e0 	bl	8000298 <__aeabi_dsub>
 8007ed8:	4652      	mov	r2, sl
 8007eda:	465b      	mov	r3, fp
 8007edc:	f7f8 fb94 	bl	8000608 <__aeabi_dmul>
 8007ee0:	a33c      	add	r3, pc, #240	; (adr r3, 8007fd4 <__kernel_sin+0x15c>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 f9d9 	bl	800029c <__adddf3>
 8007eea:	4652      	mov	r2, sl
 8007eec:	465b      	mov	r3, fp
 8007eee:	f7f8 fb8b 	bl	8000608 <__aeabi_dmul>
 8007ef2:	a33a      	add	r3, pc, #232	; (adr r3, 8007fdc <__kernel_sin+0x164>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f9ce 	bl	8000298 <__aeabi_dsub>
 8007efc:	4652      	mov	r2, sl
 8007efe:	465b      	mov	r3, fp
 8007f00:	f7f8 fb82 	bl	8000608 <__aeabi_dmul>
 8007f04:	a337      	add	r3, pc, #220	; (adr r3, 8007fe4 <__kernel_sin+0x16c>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f9c7 	bl	800029c <__adddf3>
 8007f0e:	9b02      	ldr	r3, [sp, #8]
 8007f10:	4606      	mov	r6, r0
 8007f12:	460f      	mov	r7, r1
 8007f14:	b9db      	cbnz	r3, 8007f4e <__kernel_sin+0xd6>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	f7f8 fb73 	bl	8000608 <__aeabi_dmul>
 8007f22:	a325      	add	r3, pc, #148	; (adr r3, 8007fb8 <__kernel_sin+0x140>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 f9b6 	bl	8000298 <__aeabi_dsub>
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	f7f8 fb6a 	bl	8000608 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7f8 f9ae 	bl	800029c <__adddf3>
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	ec45 4b10 	vmov	d0, r4, r5
 8007f48:	b005      	add	sp, #20
 8007f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <__kernel_sin+0x148>)
 8007f52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f56:	f7f8 fb57 	bl	8000608 <__aeabi_dmul>
 8007f5a:	4632      	mov	r2, r6
 8007f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f60:	463b      	mov	r3, r7
 8007f62:	4640      	mov	r0, r8
 8007f64:	4649      	mov	r1, r9
 8007f66:	f7f8 fb4f 	bl	8000608 <__aeabi_dmul>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f72:	f7f8 f991 	bl	8000298 <__aeabi_dsub>
 8007f76:	4652      	mov	r2, sl
 8007f78:	465b      	mov	r3, fp
 8007f7a:	f7f8 fb45 	bl	8000608 <__aeabi_dmul>
 8007f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f82:	f7f8 f989 	bl	8000298 <__aeabi_dsub>
 8007f86:	a30c      	add	r3, pc, #48	; (adr r3, 8007fb8 <__kernel_sin+0x140>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	4640      	mov	r0, r8
 8007f92:	4649      	mov	r1, r9
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	f7f8 f97c 	bl	800029c <__adddf3>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4620      	mov	r0, r4
 8007faa:	4629      	mov	r1, r5
 8007fac:	f7f8 f974 	bl	8000298 <__aeabi_dsub>
 8007fb0:	e7c6      	b.n	8007f40 <__kernel_sin+0xc8>
 8007fb2:	bf00      	nop
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	55555549 	.word	0x55555549
 8007fbc:	3fc55555 	.word	0x3fc55555
 8007fc0:	3fe00000 	.word	0x3fe00000
 8007fc4:	5acfd57c 	.word	0x5acfd57c
 8007fc8:	3de5d93a 	.word	0x3de5d93a
 8007fcc:	8a2b9ceb 	.word	0x8a2b9ceb
 8007fd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007fd4:	57b1fe7d 	.word	0x57b1fe7d
 8007fd8:	3ec71de3 	.word	0x3ec71de3
 8007fdc:	19c161d5 	.word	0x19c161d5
 8007fe0:	3f2a01a0 	.word	0x3f2a01a0
 8007fe4:	1110f8a6 	.word	0x1110f8a6
 8007fe8:	3f811111 	.word	0x3f811111

08007fec <fabs>:
 8007fec:	ec51 0b10 	vmov	r0, r1, d0
 8007ff0:	ee10 2a10 	vmov	r2, s0
 8007ff4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ff8:	ec43 2b10 	vmov	d0, r2, r3
 8007ffc:	4770      	bx	lr
	...

08008000 <floor>:
 8008000:	ec51 0b10 	vmov	r0, r1, d0
 8008004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800800c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008010:	2e13      	cmp	r6, #19
 8008012:	460c      	mov	r4, r1
 8008014:	ee10 5a10 	vmov	r5, s0
 8008018:	4680      	mov	r8, r0
 800801a:	dc34      	bgt.n	8008086 <floor+0x86>
 800801c:	2e00      	cmp	r6, #0
 800801e:	da16      	bge.n	800804e <floor+0x4e>
 8008020:	a335      	add	r3, pc, #212	; (adr r3, 80080f8 <floor+0xf8>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f939 	bl	800029c <__adddf3>
 800802a:	2200      	movs	r2, #0
 800802c:	2300      	movs	r3, #0
 800802e:	f7f8 fd7b 	bl	8000b28 <__aeabi_dcmpgt>
 8008032:	b148      	cbz	r0, 8008048 <floor+0x48>
 8008034:	2c00      	cmp	r4, #0
 8008036:	da59      	bge.n	80080ec <floor+0xec>
 8008038:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800803c:	4a30      	ldr	r2, [pc, #192]	; (8008100 <floor+0x100>)
 800803e:	432b      	orrs	r3, r5
 8008040:	2500      	movs	r5, #0
 8008042:	42ab      	cmp	r3, r5
 8008044:	bf18      	it	ne
 8008046:	4614      	movne	r4, r2
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	e025      	b.n	800809a <floor+0x9a>
 800804e:	4f2d      	ldr	r7, [pc, #180]	; (8008104 <floor+0x104>)
 8008050:	4137      	asrs	r7, r6
 8008052:	ea01 0307 	and.w	r3, r1, r7
 8008056:	4303      	orrs	r3, r0
 8008058:	d01f      	beq.n	800809a <floor+0x9a>
 800805a:	a327      	add	r3, pc, #156	; (adr r3, 80080f8 <floor+0xf8>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 f91c 	bl	800029c <__adddf3>
 8008064:	2200      	movs	r2, #0
 8008066:	2300      	movs	r3, #0
 8008068:	f7f8 fd5e 	bl	8000b28 <__aeabi_dcmpgt>
 800806c:	2800      	cmp	r0, #0
 800806e:	d0eb      	beq.n	8008048 <floor+0x48>
 8008070:	2c00      	cmp	r4, #0
 8008072:	bfbe      	ittt	lt
 8008074:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008078:	fa43 f606 	asrlt.w	r6, r3, r6
 800807c:	19a4      	addlt	r4, r4, r6
 800807e:	ea24 0407 	bic.w	r4, r4, r7
 8008082:	2500      	movs	r5, #0
 8008084:	e7e0      	b.n	8008048 <floor+0x48>
 8008086:	2e33      	cmp	r6, #51	; 0x33
 8008088:	dd0b      	ble.n	80080a2 <floor+0xa2>
 800808a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800808e:	d104      	bne.n	800809a <floor+0x9a>
 8008090:	ee10 2a10 	vmov	r2, s0
 8008094:	460b      	mov	r3, r1
 8008096:	f7f8 f901 	bl	800029c <__adddf3>
 800809a:	ec41 0b10 	vmov	d0, r0, r1
 800809e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80080a6:	f04f 33ff 	mov.w	r3, #4294967295
 80080aa:	fa23 f707 	lsr.w	r7, r3, r7
 80080ae:	4207      	tst	r7, r0
 80080b0:	d0f3      	beq.n	800809a <floor+0x9a>
 80080b2:	a311      	add	r3, pc, #68	; (adr r3, 80080f8 <floor+0xf8>)
 80080b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b8:	f7f8 f8f0 	bl	800029c <__adddf3>
 80080bc:	2200      	movs	r2, #0
 80080be:	2300      	movs	r3, #0
 80080c0:	f7f8 fd32 	bl	8000b28 <__aeabi_dcmpgt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0bf      	beq.n	8008048 <floor+0x48>
 80080c8:	2c00      	cmp	r4, #0
 80080ca:	da02      	bge.n	80080d2 <floor+0xd2>
 80080cc:	2e14      	cmp	r6, #20
 80080ce:	d103      	bne.n	80080d8 <floor+0xd8>
 80080d0:	3401      	adds	r4, #1
 80080d2:	ea25 0507 	bic.w	r5, r5, r7
 80080d6:	e7b7      	b.n	8008048 <floor+0x48>
 80080d8:	2301      	movs	r3, #1
 80080da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80080de:	fa03 f606 	lsl.w	r6, r3, r6
 80080e2:	4435      	add	r5, r6
 80080e4:	4545      	cmp	r5, r8
 80080e6:	bf38      	it	cc
 80080e8:	18e4      	addcc	r4, r4, r3
 80080ea:	e7f2      	b.n	80080d2 <floor+0xd2>
 80080ec:	2500      	movs	r5, #0
 80080ee:	462c      	mov	r4, r5
 80080f0:	e7aa      	b.n	8008048 <floor+0x48>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	8800759c 	.word	0x8800759c
 80080fc:	7e37e43c 	.word	0x7e37e43c
 8008100:	bff00000 	.word	0xbff00000
 8008104:	000fffff 	.word	0x000fffff

08008108 <scalbn>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	ec55 4b10 	vmov	r4, r5, d0
 800810e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008112:	4606      	mov	r6, r0
 8008114:	462b      	mov	r3, r5
 8008116:	b9aa      	cbnz	r2, 8008144 <scalbn+0x3c>
 8008118:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800811c:	4323      	orrs	r3, r4
 800811e:	d03b      	beq.n	8008198 <scalbn+0x90>
 8008120:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <scalbn+0xe0>)
 8008122:	4629      	mov	r1, r5
 8008124:	2200      	movs	r2, #0
 8008126:	ee10 0a10 	vmov	r0, s0
 800812a:	f7f8 fa6d 	bl	8000608 <__aeabi_dmul>
 800812e:	4b2f      	ldr	r3, [pc, #188]	; (80081ec <scalbn+0xe4>)
 8008130:	429e      	cmp	r6, r3
 8008132:	4604      	mov	r4, r0
 8008134:	460d      	mov	r5, r1
 8008136:	da12      	bge.n	800815e <scalbn+0x56>
 8008138:	a327      	add	r3, pc, #156	; (adr r3, 80081d8 <scalbn+0xd0>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 fa63 	bl	8000608 <__aeabi_dmul>
 8008142:	e009      	b.n	8008158 <scalbn+0x50>
 8008144:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008148:	428a      	cmp	r2, r1
 800814a:	d10c      	bne.n	8008166 <scalbn+0x5e>
 800814c:	ee10 2a10 	vmov	r2, s0
 8008150:	4620      	mov	r0, r4
 8008152:	4629      	mov	r1, r5
 8008154:	f7f8 f8a2 	bl	800029c <__adddf3>
 8008158:	4604      	mov	r4, r0
 800815a:	460d      	mov	r5, r1
 800815c:	e01c      	b.n	8008198 <scalbn+0x90>
 800815e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008162:	460b      	mov	r3, r1
 8008164:	3a36      	subs	r2, #54	; 0x36
 8008166:	4432      	add	r2, r6
 8008168:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800816c:	428a      	cmp	r2, r1
 800816e:	dd0b      	ble.n	8008188 <scalbn+0x80>
 8008170:	ec45 4b11 	vmov	d1, r4, r5
 8008174:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80081e0 <scalbn+0xd8>
 8008178:	f000 f83c 	bl	80081f4 <copysign>
 800817c:	a318      	add	r3, pc, #96	; (adr r3, 80081e0 <scalbn+0xd8>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	ec51 0b10 	vmov	r0, r1, d0
 8008186:	e7da      	b.n	800813e <scalbn+0x36>
 8008188:	2a00      	cmp	r2, #0
 800818a:	dd08      	ble.n	800819e <scalbn+0x96>
 800818c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008190:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008194:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008198:	ec45 4b10 	vmov	d0, r4, r5
 800819c:	bd70      	pop	{r4, r5, r6, pc}
 800819e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081a2:	da0d      	bge.n	80081c0 <scalbn+0xb8>
 80081a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081a8:	429e      	cmp	r6, r3
 80081aa:	ec45 4b11 	vmov	d1, r4, r5
 80081ae:	dce1      	bgt.n	8008174 <scalbn+0x6c>
 80081b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80081d8 <scalbn+0xd0>
 80081b4:	f000 f81e 	bl	80081f4 <copysign>
 80081b8:	a307      	add	r3, pc, #28	; (adr r3, 80081d8 <scalbn+0xd0>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	e7e0      	b.n	8008182 <scalbn+0x7a>
 80081c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081c4:	3236      	adds	r2, #54	; 0x36
 80081c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081ce:	4620      	mov	r0, r4
 80081d0:	4629      	mov	r1, r5
 80081d2:	2200      	movs	r2, #0
 80081d4:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <scalbn+0xe8>)
 80081d6:	e7b2      	b.n	800813e <scalbn+0x36>
 80081d8:	c2f8f359 	.word	0xc2f8f359
 80081dc:	01a56e1f 	.word	0x01a56e1f
 80081e0:	8800759c 	.word	0x8800759c
 80081e4:	7e37e43c 	.word	0x7e37e43c
 80081e8:	43500000 	.word	0x43500000
 80081ec:	ffff3cb0 	.word	0xffff3cb0
 80081f0:	3c900000 	.word	0x3c900000

080081f4 <copysign>:
 80081f4:	ec51 0b10 	vmov	r0, r1, d0
 80081f8:	ee11 0a90 	vmov	r0, s3
 80081fc:	ee10 2a10 	vmov	r2, s0
 8008200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008204:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008208:	ea41 0300 	orr.w	r3, r1, r0
 800820c:	ec43 2b10 	vmov	d0, r2, r3
 8008210:	4770      	bx	lr
	...

08008214 <_init>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	bf00      	nop
 8008218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821a:	bc08      	pop	{r3}
 800821c:	469e      	mov	lr, r3
 800821e:	4770      	bx	lr

08008220 <_fini>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr
